
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006398  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08006454  08006454  00007454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c0  080065c0  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080065c0  080065c0  000075c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065c8  080065c8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c8  080065c8  000075c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065cc  080065cc  000075cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080065d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  2000006c  0800663c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  0800663c  00008400  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156cf  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac4  00000000  00000000  0001d763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00020228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4f  00000000  00000000  00021590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac27  00000000  00000000  000224df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018397  00000000  00000000  0003d106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae6a5  00000000  00000000  0005549d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103b42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c5c  00000000  00000000  00103b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001087e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800643c 	.word	0x0800643c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	0800643c 	.word	0x0800643c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x27 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b087      	sub	sp, #28
 8000644:	af02      	add	r7, sp, #8
 8000646:	0002      	movs	r2, r0
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800064c:	200f      	movs	r0, #15
 800064e:	183b      	adds	r3, r7, r0
 8000650:	1dfa      	adds	r2, r7, #7
 8000652:	7812      	ldrb	r2, [r2, #0]
 8000654:	210f      	movs	r1, #15
 8000656:	438a      	bics	r2, r1
 8000658:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	011a      	lsls	r2, r3, #4
 8000660:	240e      	movs	r4, #14
 8000662:	193b      	adds	r3, r7, r4
 8000664:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000666:	183b      	adds	r3, r7, r0
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	220c      	movs	r2, #12
 800066c:	4313      	orrs	r3, r2
 800066e:	b2da      	uxtb	r2, r3
 8000670:	2108      	movs	r1, #8
 8000672:	187b      	adds	r3, r7, r1
 8000674:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000676:	183b      	adds	r3, r7, r0
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2208      	movs	r2, #8
 800067c:	4313      	orrs	r3, r2
 800067e:	b2da      	uxtb	r2, r3
 8000680:	187b      	adds	r3, r7, r1
 8000682:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000684:	193b      	adds	r3, r7, r4
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	220c      	movs	r2, #12
 800068a:	4313      	orrs	r3, r2
 800068c:	b2da      	uxtb	r2, r3
 800068e:	187b      	adds	r3, r7, r1
 8000690:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000692:	193b      	adds	r3, r7, r4
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2208      	movs	r2, #8
 8000698:	4313      	orrs	r3, r2
 800069a:	b2da      	uxtb	r2, r3
 800069c:	187b      	adds	r3, r7, r1
 800069e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80006a0:	187a      	adds	r2, r7, r1
 80006a2:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <lcd_send_cmd+0x78>)
 80006a4:	2364      	movs	r3, #100	@ 0x64
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2304      	movs	r3, #4
 80006aa:	2127      	movs	r1, #39	@ 0x27
 80006ac:	f002 f8ba 	bl	8002824 <HAL_I2C_Master_Transmit>
}
 80006b0:	46c0      	nop			@ (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b005      	add	sp, #20
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	200000ec 	.word	0x200000ec

080006bc <lcd_send_data>:

void lcd_send_data (char data)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b087      	sub	sp, #28
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	0002      	movs	r2, r0
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80006c8:	200f      	movs	r0, #15
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	1dfa      	adds	r2, r7, #7
 80006ce:	7812      	ldrb	r2, [r2, #0]
 80006d0:	210f      	movs	r1, #15
 80006d2:	438a      	bics	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	011a      	lsls	r2, r3, #4
 80006dc:	240e      	movs	r4, #14
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80006e2:	183b      	adds	r3, r7, r0
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	220d      	movs	r2, #13
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	2108      	movs	r1, #8
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80006f2:	183b      	adds	r3, r7, r0
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2209      	movs	r2, #9
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000700:	193b      	adds	r3, r7, r4
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	220d      	movs	r2, #13
 8000706:	4313      	orrs	r3, r2
 8000708:	b2da      	uxtb	r2, r3
 800070a:	187b      	adds	r3, r7, r1
 800070c:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800070e:	193b      	adds	r3, r7, r4
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2209      	movs	r2, #9
 8000714:	4313      	orrs	r3, r2
 8000716:	b2da      	uxtb	r2, r3
 8000718:	187b      	adds	r3, r7, r1
 800071a:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800071c:	187a      	adds	r2, r7, r1
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <lcd_send_data+0x78>)
 8000720:	2364      	movs	r3, #100	@ 0x64
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2304      	movs	r3, #4
 8000726:	2127      	movs	r1, #39	@ 0x27
 8000728:	f002 f87c 	bl	8002824 <HAL_I2C_Master_Transmit>
}
 800072c:	46c0      	nop			@ (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b005      	add	sp, #20
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	200000ec 	.word	0x200000ec

08000738 <lcd_clear>:

void lcd_clear (void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800073e:	2080      	movs	r0, #128	@ 0x80
 8000740:	f7ff ff7e 	bl	8000640 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	e005      	b.n	8000756 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800074a:	2020      	movs	r0, #32
 800074c:	f7ff ffb6 	bl	80006bc <lcd_send_data>
	for (int i=0; i<70; i++)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3301      	adds	r3, #1
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b45      	cmp	r3, #69	@ 0x45
 800075a:	ddf6      	ble.n	800074a <lcd_clear+0x12>
	}
}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}

08000766 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <lcd_put_cur+0x18>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d005      	beq.n	8000788 <lcd_put_cur+0x22>
 800077c:	e009      	b.n	8000792 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2280      	movs	r2, #128	@ 0x80
 8000782:	4313      	orrs	r3, r2
 8000784:	603b      	str	r3, [r7, #0]
            break;
 8000786:	e004      	b.n	8000792 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	22c0      	movs	r2, #192	@ 0xc0
 800078c:	4313      	orrs	r3, r2
 800078e:	603b      	str	r3, [r7, #0]
            break;
 8000790:	46c0      	nop			@ (mov r8, r8)
    }

    lcd_send_cmd (col);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	0018      	movs	r0, r3
 8000798:	f7ff ff52 	bl	8000640 <lcd_send_cmd>
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b002      	add	sp, #8
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <lcd_send_string>:
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

void lcd_send_string (char *str)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80007ac:	e006      	b.n	80007bc <lcd_send_string+0x18>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	607a      	str	r2, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff ff80 	bl	80006bc <lcd_send_data>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f4      	bne.n	80007ae <lcd_send_string+0xa>
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}

080007ce <debounceButton>:

//=====STUDENT ID=====
char student_id[9] = "24784821";		//defined student id

//=====BUTTON DEBOUNCE FUNCTION=====
uint8_t debounceButton(GPIO_TypeDef *port, uint16_t pin, uint32_t *last_press_time){ //will take port and pin information when i call the function in the loop
 80007ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d0:	b087      	sub	sp, #28
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	250a      	movs	r5, #10
 80007da:	197b      	adds	r3, r7, r5
 80007dc:	1c0a      	adds	r2, r1, #0
 80007de:	801a      	strh	r2, [r3, #0]
	uint8_t current_state = HAL_GPIO_ReadPin(port, pin); //store button state
 80007e0:	2617      	movs	r6, #23
 80007e2:	19bc      	adds	r4, r7, r6
 80007e4:	197b      	adds	r3, r7, r5
 80007e6:	881a      	ldrh	r2, [r3, #0]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 ff39 	bl	8002664 <HAL_GPIO_ReadPin>
 80007f2:	0003      	movs	r3, r0
 80007f4:	7023      	strb	r3, [r4, #0]
	uint32_t current_time = HAL_GetTick();	//store current time in ms
 80007f6:	f000 ff61 	bl	80016bc <HAL_GetTick>
 80007fa:	0003      	movs	r3, r0
 80007fc:	613b      	str	r3, [r7, #16]

	if (current_state == GPIO_PIN_SET){								//if the button is pressed
 80007fe:	19bb      	adds	r3, r7, r6
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d117      	bne.n	8000836 <debounceButton+0x68>
		if (current_time - *last_press_time >= DEBOUNCE_DELAY) {	//and the debounce timer has passed
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	2b63      	cmp	r3, #99	@ 0x63
 8000810:	d911      	bls.n	8000836 <debounceButton+0x68>
			HAL_Delay(DEBOUNCE_DELAY);								//confirmation delay (may not need)
 8000812:	2064      	movs	r0, #100	@ 0x64
 8000814:	f000 ff5c 	bl	80016d0 <HAL_Delay>
			if (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_SET){		//check if still pressed
 8000818:	197b      	adds	r3, r7, r5
 800081a:	881a      	ldrh	r2, [r3, #0]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f001 ff1f 	bl	8002664 <HAL_GPIO_ReadPin>
 8000826:	0003      	movs	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d104      	bne.n	8000836 <debounceButton+0x68>
				*last_press_time = current_time;					//update last pressed time
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	601a      	str	r2, [r3, #0]
				return 1; 											//valid debounced press
 8000832:	2301      	movs	r3, #1
 8000834:	e000      	b.n	8000838 <debounceButton+0x6a>
			}
		}
	}
	return 0; 	//button not pressed
 8000836:	2300      	movs	r3, #0
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b007      	add	sp, #28
 800083e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000840 <map>:

//=====MAP FUNCTION=====		// Calculates input range, calculates output range, then uses linear interpolation formula
int map(int x, int in_min, int in_max, int out_min, int out_max) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
 800084c:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	69b9      	ldr	r1, [r7, #24]
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	1a8a      	subs	r2, r1, r2
 800085a:	435a      	muls	r2, r3
 800085c:	0010      	movs	r0, r2
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	0019      	movs	r1, r3
 8000866:	f7ff fce9 	bl	800023c <__divsi3>
 800086a:	0003      	movs	r3, r0
 800086c:	001a      	movs	r2, r3
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	18d3      	adds	r3, r2, r3
}
 8000872:	0018      	movs	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	b004      	add	sp, #16
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <lcd_print_int>:

//=====LCD PRINT INT FUNCTION=====
void lcd_print_int(int num){
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	char holdme[16]; //storing string version of integer
	sprintf(holdme, "%d", num); //conversion of integer to string
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	4907      	ldr	r1, [pc, #28]	@ (80008a4 <lcd_print_int+0x28>)
 8000888:	2408      	movs	r4, #8
 800088a:	193b      	adds	r3, r7, r4
 800088c:	0018      	movs	r0, r3
 800088e:	f005 f937 	bl	8005b00 <siprintf>
	lcd_send_string(holdme);			//send to LCD
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff ff85 	bl	80007a4 <lcd_send_string>
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b007      	add	sp, #28
 80008a0:	bd90      	pop	{r4, r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	08006454 	.word	0x08006454

080008a8 <setServoPulse>:

//=====SET SERVO PULSE FUNCTION=====
void setServoPulse(uint16_t pulse) {
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dbb      	adds	r3, r7, #6
 80008b2:	801a      	strh	r2, [r3, #0]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80008b4:	240c      	movs	r4, #12
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	231c      	movs	r3, #28
 80008bc:	001a      	movs	r2, r3
 80008be:	2100      	movs	r1, #0
 80008c0:	f005 f93e 	bl	8005b40 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c4:	0021      	movs	r1, r4
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2260      	movs	r2, #96	@ 0x60
 80008ca:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = pulse;
 80008cc:	1dbb      	adds	r3, r7, #6
 80008ce:	881a      	ldrh	r2, [r3, #0]
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&SERVO_TIM_HANDLE, &sConfigOC, SERVO_TIM_CHANNEL);
 80008e0:	1879      	adds	r1, r7, r1
 80008e2:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <setServoPulse+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	0018      	movs	r0, r3
 80008e8:	f003 fb9e 	bl	8004028 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&SERVO_TIM_HANDLE, SERVO_TIM_CHANNEL);
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <setServoPulse+0x58>)
 80008ee:	2100      	movs	r1, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f003 faaf 	bl	8003e54 <HAL_TIM_PWM_Start>
}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b00b      	add	sp, #44	@ 0x2c
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	20000140 	.word	0x20000140

08000904 <stateA_actions>:


//=====STATE A ACTIONS=====
void stateA_actions(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

	//LCD CONTROL
	lcd_clear();						//clear lcd screen
 800090a:	f7ff ff15 	bl	8000738 <lcd_clear>
	lcd_put_cur(0, 0);					//position cursor in top left
 800090e:	2100      	movs	r1, #0
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff ff28 	bl	8000766 <lcd_put_cur>
	lcd_send_string("SID:");			//print 'SID'
 8000916:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <stateA_actions+0xb0>)
 8000918:	0018      	movs	r0, r3
 800091a:	f7ff ff43 	bl	80007a4 <lcd_send_string>
	lcd_send_string(student_id);		//print my student ID number
 800091e:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <stateA_actions+0xb4>)
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff ff3f 	bl	80007a4 <lcd_send_string>
	lcd_put_cur(0, 1);					//position cursor to second line
 8000926:	2101      	movs	r1, #1
 8000928:	2000      	movs	r0, #0
 800092a:	f7ff ff1c 	bl	8000766 <lcd_put_cur>
	lcd_send_string("MECHATRONICS 1");	//print string to second line
 800092e:	4b23      	ldr	r3, [pc, #140]	@ (80009bc <stateA_actions+0xb8>)
 8000930:	0018      	movs	r0, r3
 8000932:	f7ff ff37 	bl	80007a4 <lcd_send_string>

	//UART CONTROL
	static uint32_t last_uart_transmit = 0; //timer starts from 0
	if (transmit_uart && (HAL_GetTick() - last_uart_transmit >= UART_TRANSMIT_INTERVAL)){ //if there is a transmission flag and the time interval for transmissions has passed, then
 8000936:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <stateA_actions+0xbc>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d021      	beq.n	8000982 <stateA_actions+0x7e>
 800093e:	f000 febd 	bl	80016bc <HAL_GetTick>
 8000942:	0002      	movs	r2, r0
 8000944:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <stateA_actions+0xc0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	1ad2      	subs	r2, r2, r3
 800094a:	23fa      	movs	r3, #250	@ 0xfa
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	429a      	cmp	r2, r3
 8000950:	d317      	bcc.n	8000982 <stateA_actions+0x7e>
		sprintf(uart_message, "Autumn2025 MX1 SID: %s, ADC Reading: %lu", student_id, adc_value); //print message to monitor, inserting student_id and adc_value into the string
 8000952:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <stateA_actions+0xc4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a18      	ldr	r2, [pc, #96]	@ (80009b8 <stateA_actions+0xb4>)
 8000958:	491c      	ldr	r1, [pc, #112]	@ (80009cc <stateA_actions+0xc8>)
 800095a:	481d      	ldr	r0, [pc, #116]	@ (80009d0 <stateA_actions+0xcc>)
 800095c:	f005 f8d0 	bl	8005b00 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_message, strlen(uart_message), HAL_MAX_DELAY); //using STM32HAL functions to transmit UART. Converts uart_message into an integer that can be transmitted over UART.
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <stateA_actions+0xcc>)
 8000962:	0018      	movs	r0, r3
 8000964:	f7ff fbce 	bl	8000104 <strlen>
 8000968:	0003      	movs	r3, r0
 800096a:	b29a      	uxth	r2, r3
 800096c:	2301      	movs	r3, #1
 800096e:	425b      	negs	r3, r3
 8000970:	4917      	ldr	r1, [pc, #92]	@ (80009d0 <stateA_actions+0xcc>)
 8000972:	4818      	ldr	r0, [pc, #96]	@ (80009d4 <stateA_actions+0xd0>)
 8000974:	f004 f92e 	bl	8004bd4 <HAL_UART_Transmit>
		last_uart_transmit = HAL_GetTick(); //update last transmit time
 8000978:	f000 fea0 	bl	80016bc <HAL_GetTick>
 800097c:	0002      	movs	r2, r0
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <stateA_actions+0xc0>)
 8000980:	601a      	str	r2, [r3, #0]
	}

	//UART KEYBOARD TOGGLE
	uint8_t received_char;												//variable to store character received
	if (HAL_UART_Receive(&huart2, &received_char, 1, 0) == HAL_OK) {	//if statement checks if the UART successfully received a character
 8000982:	1df9      	adds	r1, r7, #7
 8000984:	4813      	ldr	r0, [pc, #76]	@ (80009d4 <stateA_actions+0xd0>)
 8000986:	2300      	movs	r3, #0
 8000988:	2201      	movs	r2, #1
 800098a:	f004 f9c7 	bl	8004d1c <HAL_UART_Receive>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d10b      	bne.n	80009aa <stateA_actions+0xa6>
		if (received_char == 's') {										//if it is successful, and the character matches, then toggle the UART transmissions
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b73      	cmp	r3, #115	@ 0x73
 8000998:	d107      	bne.n	80009aa <stateA_actions+0xa6>
			transmit_uart = !transmit_uart;
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <stateA_actions+0xbc>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	425a      	negs	r2, r3
 80009a0:	4153      	adcs	r3, r2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	001a      	movs	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <stateA_actions+0xbc>)
 80009a8:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b002      	add	sp, #8
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	08006458 	.word	0x08006458
 80009b8:	20000004 	.word	0x20000004
 80009bc:	08006460 	.word	0x08006460
 80009c0:	20000000 	.word	0x20000000
 80009c4:	2000029c 	.word	0x2000029c
 80009c8:	20000288 	.word	0x20000288
 80009cc:	08006470 	.word	0x08006470
 80009d0:	20000224 	.word	0x20000224
 80009d4:	2000018c 	.word	0x2000018c

080009d8 <stateB_actions>:

//=====STATE B ACTIONS=====
void stateB_actions(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af02      	add	r7, sp, #8
	//LCD CONTROL FOR ADC VALUES
	lcd_clear();					//clear lcd
 80009de:	f7ff feab 	bl	8000738 <lcd_clear>
	lcd_put_cur(0, 0);			//position cursor top left
 80009e2:	2100      	movs	r1, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff febe 	bl	8000766 <lcd_put_cur>
	lcd_send_string("ADC:");				//print ADC
 80009ea:	4b53      	ldr	r3, [pc, #332]	@ (8000b38 <stateB_actions+0x160>)
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff fed9 	bl	80007a4 <lcd_send_string>
	lcd_print_int(adc_value);		//print the ADC value as an integer
 80009f2:	4b52      	ldr	r3, [pc, #328]	@ (8000b3c <stateB_actions+0x164>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff ff40 	bl	800087c <lcd_print_int>
	lcd_send_string(" STATE B");
 80009fc:	4b50      	ldr	r3, [pc, #320]	@ (8000b40 <stateB_actions+0x168>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fed0 	bl	80007a4 <lcd_send_string>
	lcd_put_cur(0, 1);			//next line
 8000a04:	2101      	movs	r1, #1
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fead 	bl	8000766 <lcd_put_cur>
	lcd_send_string("MECHATRONICS 1");
 8000a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b44 <stateB_actions+0x16c>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fec8 	bl	80007a4 <lcd_send_string>


	//UART CONTROL
	transmit_uart = 0; 				//disable UART communication
 8000a14:	4b4c      	ldr	r3, [pc, #304]	@ (8000b48 <stateB_actions+0x170>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
	//ONBOARD LED CONTROL WITH POT
	static uint32_t last_led1_blink = 0; //period since last blink
	uint32_t led1_blink_period;			 //storage for variable blink timing
	static uint8_t led1_state = 0;				 //state of LED (off or on)

	led1_blink_period = map(adc_value, 0, 4095, 200, 1000); //linear interpolation of ADC values to led blink period, 5Hz -> 1Hz
 8000a1a:	4b48      	ldr	r3, [pc, #288]	@ (8000b3c <stateB_actions+0x164>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	0018      	movs	r0, r3
 8000a20:	4a4a      	ldr	r2, [pc, #296]	@ (8000b4c <stateB_actions+0x174>)
 8000a22:	23fa      	movs	r3, #250	@ 0xfa
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	23c8      	movs	r3, #200	@ 0xc8
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	f7ff ff08 	bl	8000840 <map>
 8000a30:	0003      	movs	r3, r0
 8000a32:	607b      	str	r3, [r7, #4]

	if (HAL_GetTick() - last_led1_blink >= led1_blink_period) { //checks if enough time has passed between blinks
 8000a34:	f000 fe42 	bl	80016bc <HAL_GetTick>
 8000a38:	0002      	movs	r2, r0
 8000a3a:	4b45      	ldr	r3, [pc, #276]	@ (8000b50 <stateB_actions+0x178>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d818      	bhi.n	8000a78 <stateB_actions+0xa0>
		led1_state = !led1_state; 								//toggle LED
 8000a46:	4b43      	ldr	r3, [pc, #268]	@ (8000b54 <stateB_actions+0x17c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	425a      	negs	r2, r3
 8000a4c:	4153      	adcs	r3, r2
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	001a      	movs	r2, r3
 8000a52:	4b40      	ldr	r3, [pc, #256]	@ (8000b54 <stateB_actions+0x17c>)
 8000a54:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_1_PORT, LED_1_PIN, led1_state ? GPIO_PIN_SET : GPIO_PIN_RESET); //Control of actual LED output. Takes port and pin info from definitions above
 8000a56:	4b3f      	ldr	r3, [pc, #252]	@ (8000b54 <stateB_actions+0x17c>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	1e5a      	subs	r2, r3, #1
 8000a5c:	4193      	sbcs	r3, r2
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	001a      	movs	r2, r3
 8000a62:	23a0      	movs	r3, #160	@ 0xa0
 8000a64:	05db      	lsls	r3, r3, #23
 8000a66:	2120      	movs	r1, #32
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f001 fe18 	bl	800269e <HAL_GPIO_WritePin>
		last_led1_blink = HAL_GetTick(); //update blink time
 8000a6e:	f000 fe25 	bl	80016bc <HAL_GetTick>
 8000a72:	0002      	movs	r2, r0
 8000a74:	4b36      	ldr	r3, [pc, #216]	@ (8000b50 <stateB_actions+0x178>)
 8000a76:	601a      	str	r2, [r3, #0]
	//EXTERNAL LED CONTROL
	static uint32_t last_led2_3_blink = 0; //variable to control timing for both LEDs
	static uint8_t led2_state = 0;				   //state of LED2 (on or off)
	static uint8_t led3_state = 0;				   //state of LED3 (on or off)

	if (button1_pressed) { 			//checks for valid debounced button press
 8000a78:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <stateB_actions+0x180>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d007      	beq.n	8000a90 <stateB_actions+0xb8>
		led_select = !led_select;	//toggle between LEDs when button 1 pressed
 8000a80:	4b36      	ldr	r3, [pc, #216]	@ (8000b5c <stateB_actions+0x184>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	425a      	negs	r2, r3
 8000a86:	4153      	adcs	r3, r2
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <stateB_actions+0x184>)
 8000a8e:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GetTick() - last_led2_3_blink >= 500) { //1Hz blinking 500on 500off
 8000a90:	f000 fe14 	bl	80016bc <HAL_GetTick>
 8000a94:	0002      	movs	r2, r0
 8000a96:	4b32      	ldr	r3, [pc, #200]	@ (8000b60 <stateB_actions+0x188>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	1ad2      	subs	r2, r2, r3
 8000a9c:	23fa      	movs	r3, #250	@ 0xfa
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d32f      	bcc.n	8000b04 <stateB_actions+0x12c>
        last_led2_3_blink = HAL_GetTick(); 			//update blink time
 8000aa4:	f000 fe0a 	bl	80016bc <HAL_GetTick>
 8000aa8:	0002      	movs	r2, r0
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000b60 <stateB_actions+0x188>)
 8000aac:	601a      	str	r2, [r3, #0]
        if (led_select == 0) {						//checks which LED is selected and toggles state
 8000aae:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <stateB_actions+0x184>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d113      	bne.n	8000ade <stateB_actions+0x106>
        	led2_state = !led2_state;
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b64 <stateB_actions+0x18c>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	425a      	negs	r2, r3
 8000abc:	4153      	adcs	r3, r2
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	4b28      	ldr	r3, [pc, #160]	@ (8000b64 <stateB_actions+0x18c>)
 8000ac4:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(LED_2_PORT, LED_2_PIN, led2_state ? GPIO_PIN_SET : GPIO_PIN_RESET); //actual output of LED2, will toggle either off or on
 8000ac6:	4b27      	ldr	r3, [pc, #156]	@ (8000b64 <stateB_actions+0x18c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	4b25      	ldr	r3, [pc, #148]	@ (8000b68 <stateB_actions+0x190>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f001 fde1 	bl	800269e <HAL_GPIO_WritePin>
 8000adc:	e012      	b.n	8000b04 <stateB_actions+0x12c>
        } else {
        	led3_state = !led3_state;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <stateB_actions+0x194>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	425a      	negs	r2, r3
 8000ae4:	4153      	adcs	r3, r2
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	001a      	movs	r2, r3
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <stateB_actions+0x194>)
 8000aec:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(LED_3_PORT, LED_3_PIN, led3_state ? GPIO_PIN_SET : GPIO_PIN_RESET); //same thing for LED3
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <stateB_actions+0x194>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	1e5a      	subs	r2, r3, #1
 8000af4:	4193      	sbcs	r3, r2
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	001a      	movs	r2, r3
 8000afa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <stateB_actions+0x190>)
 8000afc:	2102      	movs	r1, #2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 fdcd 	bl	800269e <HAL_GPIO_WritePin>
        }
	}

	//SERVO CONTROL FROM POT
	uint16_t servo_pulse_width = map(adc_value, 0, 4095, 1000, 2000); //map adc values to servo PWM
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <stateB_actions+0x164>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	0018      	movs	r0, r3
 8000b0a:	23fa      	movs	r3, #250	@ 0xfa
 8000b0c:	009a      	lsls	r2, r3, #2
 8000b0e:	490f      	ldr	r1, [pc, #60]	@ (8000b4c <stateB_actions+0x174>)
 8000b10:	23fa      	movs	r3, #250	@ 0xfa
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	0013      	movs	r3, r2
 8000b18:	000a      	movs	r2, r1
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f7ff fe90 	bl	8000840 <map>
 8000b20:	0002      	movs	r2, r0
 8000b22:	1cbb      	adds	r3, r7, #2
 8000b24:	801a      	strh	r2, [r3, #0]
	setServoPulse(servo_pulse_width); //write to the servo
 8000b26:	1cbb      	adds	r3, r7, #2
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f7ff febc 	bl	80008a8 <setServoPulse>


}
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	0800649c 	.word	0x0800649c
 8000b3c:	20000288 	.word	0x20000288
 8000b40:	080064a4 	.word	0x080064a4
 8000b44:	08006460 	.word	0x08006460
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	00000fff 	.word	0x00000fff
 8000b50:	200002a0 	.word	0x200002a0
 8000b54:	200002a4 	.word	0x200002a4
 8000b58:	20000298 	.word	0x20000298
 8000b5c:	2000028c 	.word	0x2000028c
 8000b60:	200002a8 	.word	0x200002a8
 8000b64:	200002ac 	.word	0x200002ac
 8000b68:	50000400 	.word	0x50000400
 8000b6c:	200002ad 	.word	0x200002ad

08000b70 <stateC_actions>:
//=====STATE C ACTIONS=====
void stateC_actions(void) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

	//check everything disabled
	lcd_clear();
 8000b74:	f7ff fde0 	bl	8000738 <lcd_clear>
	transmit_uart = 0;
 8000b78:	4b02      	ldr	r3, [pc, #8]	@ (8000b84 <stateC_actions+0x14>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]


}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000000 	.word	0x20000000

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8e:	f000 fd19 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */
  void lcd_init (void);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b92:	f000 f87b 	bl	8000c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b96:	f000 fa65 	bl	8001064 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b9a:	f000 f8bf 	bl	8000d1c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b9e:	f000 f927 	bl	8000df0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ba2:	f000 fa11 	bl	8000fc8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ba6:	f000 f963 	bl	8000e70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);					//begin adc conversion
 8000baa:	4b32      	ldr	r3, [pc, #200]	@ (8000c74 <main+0xec>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f001 f87f 	bl	8001cb0 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //=====Debounce Control=====
	  uint8_t button1_pressed = debounceButton(EXT_BUTTON_1_PORT, EXT_BUTTON_1_PIN, &last_button1_press_time);	//Calls debounce function and sends button and port info
 8000bb2:	1dfc      	adds	r4, r7, #7
 8000bb4:	4a30      	ldr	r2, [pc, #192]	@ (8000c78 <main+0xf0>)
 8000bb6:	23a0      	movs	r3, #160	@ 0xa0
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	2102      	movs	r1, #2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff fe06 	bl	80007ce <debounceButton>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	7023      	strb	r3, [r4, #0]
	  uint8_t button2_pressed = debounceButton(ONB_BUTTON_PORT, ONB_BUTTON_PIN, &last_button2_press_time);
 8000bc6:	1dbc      	adds	r4, r7, #6
 8000bc8:	4a2c      	ldr	r2, [pc, #176]	@ (8000c7c <main+0xf4>)
 8000bca:	2380      	movs	r3, #128	@ 0x80
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	482c      	ldr	r0, [pc, #176]	@ (8000c80 <main+0xf8>)
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	f7ff fdfc 	bl	80007ce <debounceButton>
 8000bd6:	0003      	movs	r3, r0
 8000bd8:	7023      	strb	r3, [r4, #0]

	  //=====ADC CONTROL=====
	  if (HAL_ADC_GetState(&hadc1) == HAL_ADC_STATE_REG_EOC) {		//checks if conversion is complete
 8000bda:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <main+0xec>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 fa99 	bl	8002114 <HAL_ADC_GetState>
 8000be2:	0002      	movs	r2, r0
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d10a      	bne.n	8000c02 <main+0x7a>
		  adc_value = HAL_ADC_GetValue(&hadc1);						//stores the adc value
 8000bec:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <main+0xec>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 f8ac 	bl	8001d4c <HAL_ADC_GetValue>
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <main+0xfc>)
 8000bf8:	601a      	str	r2, [r3, #0]
		  HAL_ADC_Start(&hadc1);									//restarts conversion for continuous readings
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <main+0xec>)
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f001 f857 	bl	8001cb0 <HAL_ADC_Start>
	  }

	  //=====UPDATING STATE=====
	  if (button2_pressed) {										//Button 2 State change control
 8000c02:	1dbb      	adds	r3, r7, #6
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d012      	beq.n	8000c30 <main+0xa8>
		  if (currentState == STATE_A || currentState == STATE_C){	//if state is A or C change to B
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <main+0x100>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <main+0x92>
 8000c12:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <main+0x100>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d103      	bne.n	8000c22 <main+0x9a>
			  currentState = STATE_B;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <main+0x100>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e006      	b.n	8000c30 <main+0xa8>
		  }	else if (currentState == STATE_B) {						//if state is B change to A
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <main+0x100>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <main+0xa8>
			  currentState = STATE_A;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <main+0x100>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if (currentState == STATE_A && button1_pressed) {				//Button 1 State change control
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <main+0x100>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d106      	bne.n	8000c46 <main+0xbe>
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <main+0xbe>
		  currentState = STATE_C;									//if state is A change to C
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <main+0x100>)
 8000c42:	2202      	movs	r2, #2
 8000c44:	701a      	strb	r2, [r3, #0]
	  }

	  //=====FUNCTION CONTROL DEPENDING ON STATE=====
	  switch (currentState) {
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <main+0x100>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d00b      	beq.n	8000c66 <main+0xde>
 8000c4e:	dc0d      	bgt.n	8000c6c <main+0xe4>
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <main+0xd2>
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d003      	beq.n	8000c60 <main+0xd8>
 8000c58:	e008      	b.n	8000c6c <main+0xe4>
	  	  case STATE_A:
	  		  stateA_actions();
 8000c5a:	f7ff fe53 	bl	8000904 <stateA_actions>
	  		  break;
 8000c5e:	e005      	b.n	8000c6c <main+0xe4>
	  	  case STATE_B:
	  		  stateB_actions();				//EACH STATE A-C has different functions called depending on state
 8000c60:	f7ff feba 	bl	80009d8 <stateB_actions>
	  		  break;
 8000c64:	e002      	b.n	8000c6c <main+0xe4>
	  	  case STATE_C:
	  		  stateC_actions();
 8000c66:	f7ff ff83 	bl	8000b70 <stateC_actions>
	  		  break;
 8000c6a:	46c0      	nop			@ (mov r8, r8)

	  }

	  HAL_Delay(10); //stability
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f000 fd2f 	bl	80016d0 <HAL_Delay>
  {
 8000c72:	e79e      	b.n	8000bb2 <main+0x2a>
 8000c74:	20000088 	.word	0x20000088
 8000c78:	20000290 	.word	0x20000290
 8000c7c:	20000294 	.word	0x20000294
 8000c80:	50000800 	.word	0x50000800
 8000c84:	20000288 	.word	0x20000288
 8000c88:	20000220 	.word	0x20000220

08000c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b093      	sub	sp, #76	@ 0x4c
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c92:	2410      	movs	r4, #16
 8000c94:	193b      	adds	r3, r7, r4
 8000c96:	0018      	movs	r0, r3
 8000c98:	2338      	movs	r3, #56	@ 0x38
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	f004 ff4f 	bl	8005b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca2:	003b      	movs	r3, r7
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	001a      	movs	r2, r3
 8000caa:	2100      	movs	r1, #0
 8000cac:	f004 ff48 	bl	8005b40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f002 f9ad 	bl	8003014 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc0:	193b      	adds	r3, r7, r4
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	0052      	lsls	r2, r2, #1
 8000cc6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	2240      	movs	r2, #64	@ 0x40
 8000cd2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f002 f9e5 	bl	80030ac <HAL_RCC_OscConfig>
 8000ce2:	1e03      	subs	r3, r0, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000ce6:	f000 fa49 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cea:	003b      	movs	r3, r7
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cf0:	003b      	movs	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	003b      	movs	r3, r7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d02:	003b      	movs	r3, r7
 8000d04:	2100      	movs	r1, #0
 8000d06:	0018      	movs	r0, r3
 8000d08:	f002 fcea 	bl	80036e0 <HAL_RCC_ClockConfig>
 8000d0c:	1e03      	subs	r3, r0, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d10:	f000 fa34 	bl	800117c <Error_Handler>
  }
}
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b013      	add	sp, #76	@ 0x4c
 8000d1a:	bd90      	pop	{r4, r7, pc}

08000d1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	0018      	movs	r0, r3
 8000d26:	230c      	movs	r3, #12
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f004 ff08 	bl	8005b40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d30:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d32:	4a2e      	ldr	r2, [pc, #184]	@ (8000dec <MX_ADC1_Init+0xd0>)
 8000d34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d36:	4b2c      	ldr	r3, [pc, #176]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d38:	2280      	movs	r2, #128	@ 0x80
 8000d3a:	05d2      	lsls	r2, r2, #23
 8000d3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d44:	4b28      	ldr	r3, [pc, #160]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d4a:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d50:	4b25      	ldr	r3, [pc, #148]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d52:	2204      	movs	r2, #4
 8000d54:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d56:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000d5c:	4b22      	ldr	r3, [pc, #136]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d62:	4b21      	ldr	r3, [pc, #132]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d70:	2220      	movs	r2, #32
 8000d72:	2100      	movs	r1, #0
 8000d74:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d82:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d84:	222c      	movs	r2, #44	@ 0x2c
 8000d86:	2100      	movs	r1, #0
 8000d88:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000d90:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000d9e:	223c      	movs	r2, #60	@ 0x3c
 8000da0:	2100      	movs	r1, #0
 8000da2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000da4:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fdd7 	bl	8001960 <HAL_ADC_Init>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000db6:	f000 f9e1 	bl	800117c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dcc:	1d3a      	adds	r2, r7, #4
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <MX_ADC1_Init+0xcc>)
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 ffc6 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000dd8:	1e03      	subs	r3, r0, #0
 8000dda:	d001      	beq.n	8000de0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000ddc:	f000 f9ce 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b004      	add	sp, #16
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000088 	.word	0x20000088
 8000dec:	40012400 	.word	0x40012400

08000df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000df6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e68 <MX_I2C1_Init+0x78>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e6c <MX_I2C1_Init+0x7c>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e12:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f001 fc53 	bl	80026d8 <HAL_I2C_Init>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e36:	f000 f9a1 	bl	800117c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f002 f850 	bl	8002ee4 <HAL_I2CEx_ConfigAnalogFilter>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e48:	f000 f998 	bl	800117c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <MX_I2C1_Init+0x74>)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	0018      	movs	r0, r3
 8000e52:	f002 f893 	bl	8002f7c <HAL_I2CEx_ConfigDigitalFilter>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d001      	beq.n	8000e5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 f98f 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000ec 	.word	0x200000ec
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	00503d58 	.word	0x00503d58

08000e70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b098      	sub	sp, #96	@ 0x60
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e76:	2354      	movs	r3, #84	@ 0x54
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	001a      	movs	r2, r3
 8000e80:	2100      	movs	r1, #0
 8000e82:	f004 fe5d 	bl	8005b40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e86:	2338      	movs	r3, #56	@ 0x38
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	231c      	movs	r3, #28
 8000e8e:	001a      	movs	r2, r3
 8000e90:	2100      	movs	r1, #0
 8000e92:	f004 fe55 	bl	8005b40 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	0018      	movs	r0, r3
 8000e9a:	2334      	movs	r3, #52	@ 0x34
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f004 fe4e 	bl	8005b40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ea4:	4b45      	ldr	r3, [pc, #276]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000ea6:	4a46      	ldr	r2, [pc, #280]	@ (8000fc0 <MX_TIM1_Init+0x150>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eaa:	4b44      	ldr	r3, [pc, #272]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b42      	ldr	r3, [pc, #264]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000eb6:	4b41      	ldr	r3, [pc, #260]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000eb8:	4a42      	ldr	r2, [pc, #264]	@ (8000fc4 <MX_TIM1_Init+0x154>)
 8000eba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ece:	4b3b      	ldr	r3, [pc, #236]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f002 ff67 	bl	8003da4 <HAL_TIM_PWM_Init>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000eda:	f000 f94f 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ede:	2154      	movs	r1, #84	@ 0x54
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ef2:	187a      	adds	r2, r7, r1
 8000ef4:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f003 fd0b 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f02:	f000 f93b 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f06:	2138      	movs	r1, #56	@ 0x38
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2260      	movs	r2, #96	@ 0x60
 8000f0c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f32:	1879      	adds	r1, r7, r1
 8000f34:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f003 f875 	bl	8004028 <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	1e03      	subs	r3, r0, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000f42:	f000 f91b 	bl	800117c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	0192      	lsls	r2, r2, #6
 8000f6a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2280      	movs	r2, #128	@ 0x80
 8000f82:	0492      	lsls	r2, r2, #18
 8000f84:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f98:	1d3a      	adds	r2, r7, #4
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000f9c:	0011      	movs	r1, r2
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f003 fd26 	bl	80049f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000fa8:	f000 f8e8 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <MX_TIM1_Init+0x14c>)
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f000 f9ea 	bl	8001388 <HAL_TIM_MspPostInit>

}
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b018      	add	sp, #96	@ 0x60
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000140 	.word	0x20000140
 8000fc0:	40012c00 	.word	0x40012c00
 8000fc4:	0000ffff 	.word	0x0000ffff

08000fc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fcc:	4b23      	ldr	r3, [pc, #140]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8000fce:	4a24      	ldr	r2, [pc, #144]	@ (8001060 <MX_USART2_UART_Init+0x98>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd2:	4b22      	ldr	r3, [pc, #136]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8000fd4:	22e1      	movs	r2, #225	@ 0xe1
 8000fd6:	0252      	lsls	r2, r2, #9
 8000fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b20      	ldr	r3, [pc, #128]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001004:	4b15      	ldr	r3, [pc, #84]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100a:	4b14      	ldr	r3, [pc, #80]	@ (800105c <MX_USART2_UART_Init+0x94>)
 800100c:	2200      	movs	r2, #0
 800100e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8001012:	0018      	movs	r0, r3
 8001014:	f003 fd88 	bl	8004b28 <HAL_UART_Init>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d001      	beq.n	8001020 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800101c:	f000 f8ae 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001020:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8001022:	2100      	movs	r1, #0
 8001024:	0018      	movs	r0, r3
 8001026:	f004 fc8b 	bl	8005940 <HAL_UARTEx_SetTxFifoThreshold>
 800102a:	1e03      	subs	r3, r0, #0
 800102c:	d001      	beq.n	8001032 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800102e:	f000 f8a5 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8001034:	2100      	movs	r1, #0
 8001036:	0018      	movs	r0, r3
 8001038:	f004 fcc2 	bl	80059c0 <HAL_UARTEx_SetRxFifoThreshold>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d001      	beq.n	8001044 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001040:	f000 f89c 	bl	800117c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <MX_USART2_UART_Init+0x94>)
 8001046:	0018      	movs	r0, r3
 8001048:	f004 fc40 	bl	80058cc <HAL_UARTEx_DisableFifoMode>
 800104c:	1e03      	subs	r3, r0, #0
 800104e:	d001      	beq.n	8001054 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001050:	f000 f894 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	2000018c 	.word	0x2000018c
 8001060:	40004400 	.word	0x40004400

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b089      	sub	sp, #36	@ 0x24
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	240c      	movs	r4, #12
 800106c:	193b      	adds	r3, r7, r4
 800106e:	0018      	movs	r0, r3
 8001070:	2314      	movs	r3, #20
 8001072:	001a      	movs	r2, r3
 8001074:	2100      	movs	r1, #0
 8001076:	f004 fd63 	bl	8005b40 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4b3d      	ldr	r3, [pc, #244]	@ (8001170 <MX_GPIO_Init+0x10c>)
 800107c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800107e:	4b3c      	ldr	r3, [pc, #240]	@ (8001170 <MX_GPIO_Init+0x10c>)
 8001080:	2104      	movs	r1, #4
 8001082:	430a      	orrs	r2, r1
 8001084:	635a      	str	r2, [r3, #52]	@ 0x34
 8001086:	4b3a      	ldr	r3, [pc, #232]	@ (8001170 <MX_GPIO_Init+0x10c>)
 8001088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800108a:	2204      	movs	r2, #4
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <MX_GPIO_Init+0x10c>)
 8001094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001096:	4b36      	ldr	r3, [pc, #216]	@ (8001170 <MX_GPIO_Init+0x10c>)
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	635a      	str	r2, [r3, #52]	@ 0x34
 800109e:	4b34      	ldr	r3, [pc, #208]	@ (8001170 <MX_GPIO_Init+0x10c>)
 80010a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a2:	2201      	movs	r2, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b31      	ldr	r3, [pc, #196]	@ (8001170 <MX_GPIO_Init+0x10c>)
 80010ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010ae:	4b30      	ldr	r3, [pc, #192]	@ (8001170 <MX_GPIO_Init+0x10c>)
 80010b0:	2102      	movs	r1, #2
 80010b2:	430a      	orrs	r2, r1
 80010b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <MX_GPIO_Init+0x10c>)
 80010b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ba:	2202      	movs	r2, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_ONB_GPIO_Port, LED_1_ONB_Pin, GPIO_PIN_RESET);
 80010c2:	23a0      	movs	r3, #160	@ 0xa0
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	2200      	movs	r2, #0
 80010c8:	2120      	movs	r1, #32
 80010ca:	0018      	movs	r0, r3
 80010cc:	f001 fae7 	bl	800269e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 80010d0:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <MX_GPIO_Init+0x110>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	2103      	movs	r1, #3
 80010d6:	0018      	movs	r0, r3
 80010d8:	f001 fae1 	bl	800269e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONB_BUTTON_Pin */
  GPIO_InitStruct.Pin = ONB_BUTTON_Pin;
 80010dc:	193b      	adds	r3, r7, r4
 80010de:	2280      	movs	r2, #128	@ 0x80
 80010e0:	0192      	lsls	r2, r2, #6
 80010e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	2201      	movs	r2, #1
 80010ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ONB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010f0:	193b      	adds	r3, r7, r4
 80010f2:	4a21      	ldr	r2, [pc, #132]	@ (8001178 <MX_GPIO_Init+0x114>)
 80010f4:	0019      	movs	r1, r3
 80010f6:	0010      	movs	r0, r2
 80010f8:	f001 f950 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = EXT_BUTTON_1_Pin;
 80010fc:	193b      	adds	r3, r7, r4
 80010fe:	2202      	movs	r2, #2
 8001100:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001102:	193b      	adds	r3, r7, r4
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001108:	193b      	adds	r3, r7, r4
 800110a:	2202      	movs	r2, #2
 800110c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EXT_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 800110e:	193a      	adds	r2, r7, r4
 8001110:	23a0      	movs	r3, #160	@ 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f001 f940 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_ONB_Pin */
  GPIO_InitStruct.Pin = LED_1_ONB_Pin;
 800111c:	193b      	adds	r3, r7, r4
 800111e:	2220      	movs	r2, #32
 8001120:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2201      	movs	r2, #1
 8001126:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	193b      	adds	r3, r7, r4
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_ONB_GPIO_Port, &GPIO_InitStruct);
 8001134:	193a      	adds	r2, r7, r4
 8001136:	23a0      	movs	r3, #160	@ 0xa0
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f001 f92d 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 8001142:	0021      	movs	r1, r4
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2203      	movs	r2, #3
 8001148:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2201      	movs	r2, #1
 800114e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	187b      	adds	r3, r7, r1
 800115e:	4a05      	ldr	r2, [pc, #20]	@ (8001174 <MX_GPIO_Init+0x110>)
 8001160:	0019      	movs	r1, r3
 8001162:	0010      	movs	r0, r2
 8001164:	f001 f91a 	bl	800239c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b009      	add	sp, #36	@ 0x24
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	50000400 	.word	0x50000400
 8001178:	50000800 	.word	0x50000800

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	46c0      	nop			@ (mov r8, r8)
 8001186:	e7fd      	b.n	8001184 <Error_Handler+0x8>

08001188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_MspInit+0x44>)
 8001190:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_MspInit+0x44>)
 8001194:	2101      	movs	r1, #1
 8001196:	430a      	orrs	r2, r1
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_MspInit+0x44>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	2201      	movs	r2, #1
 80011a0:	4013      	ands	r3, r2
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_MspInit+0x44>)
 80011a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <HAL_MspInit+0x44>)
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0549      	lsls	r1, r1, #21
 80011b0:	430a      	orrs	r2, r1
 80011b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_MspInit+0x44>)
 80011b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	055b      	lsls	r3, r3, #21
 80011bc:	4013      	ands	r3, r2
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b08b      	sub	sp, #44	@ 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	2414      	movs	r4, #20
 80011da:	193b      	adds	r3, r7, r4
 80011dc:	0018      	movs	r0, r3
 80011de:	2314      	movs	r3, #20
 80011e0:	001a      	movs	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	f004 fcac 	bl	8005b40 <memset>
  if(hadc->Instance==ADC1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <HAL_ADC_MspInit+0x80>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d129      	bne.n	8001246 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_ADC_MspInit+0x84>)
 80011f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011f6:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <HAL_ADC_MspInit+0x84>)
 80011f8:	2180      	movs	r1, #128	@ 0x80
 80011fa:	0349      	lsls	r1, r1, #13
 80011fc:	430a      	orrs	r2, r1
 80011fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <HAL_ADC_MspInit+0x84>)
 8001202:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001204:	2380      	movs	r3, #128	@ 0x80
 8001206:	035b      	lsls	r3, r3, #13
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <HAL_ADC_MspInit+0x84>)
 8001210:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <HAL_ADC_MspInit+0x84>)
 8001214:	2101      	movs	r1, #1
 8001216:	430a      	orrs	r2, r1
 8001218:	635a      	str	r2, [r3, #52]	@ 0x34
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <HAL_ADC_MspInit+0x84>)
 800121c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121e:	2201      	movs	r2, #1
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001226:	193b      	adds	r3, r7, r4
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122c:	193b      	adds	r3, r7, r4
 800122e:	2203      	movs	r2, #3
 8001230:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	193b      	adds	r3, r7, r4
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	193a      	adds	r2, r7, r4
 800123a:	23a0      	movs	r3, #160	@ 0xa0
 800123c:	05db      	lsls	r3, r3, #23
 800123e:	0011      	movs	r1, r2
 8001240:	0018      	movs	r0, r3
 8001242:	f001 f8ab 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b00b      	add	sp, #44	@ 0x2c
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	40012400 	.word	0x40012400
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b097      	sub	sp, #92	@ 0x5c
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	2344      	movs	r3, #68	@ 0x44
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	0018      	movs	r0, r3
 8001266:	2314      	movs	r3, #20
 8001268:	001a      	movs	r2, r3
 800126a:	2100      	movs	r1, #0
 800126c:	f004 fc68 	bl	8005b40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	2410      	movs	r4, #16
 8001272:	193b      	adds	r3, r7, r4
 8001274:	0018      	movs	r0, r3
 8001276:	2334      	movs	r3, #52	@ 0x34
 8001278:	001a      	movs	r2, r3
 800127a:	2100      	movs	r1, #0
 800127c:	f004 fc60 	bl	8005b40 <memset>
  if(hi2c->Instance==I2C1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a22      	ldr	r2, [pc, #136]	@ (8001310 <HAL_I2C_MspInit+0xb8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d13d      	bne.n	8001306 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2220      	movs	r2, #32
 800128e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001290:	193b      	adds	r3, r7, r4
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001296:	193b      	adds	r3, r7, r4
 8001298:	0018      	movs	r0, r3
 800129a:	f002 fbcb 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	1e03      	subs	r3, r0, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012a2:	f7ff ff6b 	bl	800117c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <HAL_I2C_MspInit+0xbc>)
 80012a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <HAL_I2C_MspInit+0xbc>)
 80012ac:	2102      	movs	r1, #2
 80012ae:	430a      	orrs	r2, r1
 80012b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012b2:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <HAL_I2C_MspInit+0xbc>)
 80012b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b6:	2202      	movs	r2, #2
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012be:	2144      	movs	r1, #68	@ 0x44
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	22c0      	movs	r2, #192	@ 0xc0
 80012c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2212      	movs	r2, #18
 80012ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2206      	movs	r2, #6
 80012dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001318 <HAL_I2C_MspInit+0xc0>)
 80012e2:	0019      	movs	r1, r3
 80012e4:	0010      	movs	r0, r2
 80012e6:	f001 f859 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_I2C_MspInit+0xbc>)
 80012ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_I2C_MspInit+0xbc>)
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	0389      	lsls	r1, r1, #14
 80012f4:	430a      	orrs	r2, r1
 80012f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_I2C_MspInit+0xbc>)
 80012fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	039b      	lsls	r3, r3, #14
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b017      	add	sp, #92	@ 0x5c
 800130c:	bd90      	pop	{r4, r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	40005400 	.word	0x40005400
 8001314:	40021000 	.word	0x40021000
 8001318:	50000400 	.word	0x50000400

0800131c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b091      	sub	sp, #68	@ 0x44
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	240c      	movs	r4, #12
 8001326:	193b      	adds	r3, r7, r4
 8001328:	0018      	movs	r0, r3
 800132a:	2334      	movs	r3, #52	@ 0x34
 800132c:	001a      	movs	r2, r3
 800132e:	2100      	movs	r1, #0
 8001330:	f004 fc06 	bl	8005b40 <memset>
  if(htim_pwm->Instance==TIM1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a11      	ldr	r2, [pc, #68]	@ (8001380 <HAL_TIM_PWM_MspInit+0x64>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d11c      	bne.n	8001378 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800133e:	193b      	adds	r3, r7, r4
 8001340:	2280      	movs	r2, #128	@ 0x80
 8001342:	0392      	lsls	r2, r2, #14
 8001344:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001346:	193b      	adds	r3, r7, r4
 8001348:	2200      	movs	r2, #0
 800134a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134c:	193b      	adds	r3, r7, r4
 800134e:	0018      	movs	r0, r3
 8001350:	f002 fb70 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d001      	beq.n	800135c <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001358:	f7ff ff10 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <HAL_TIM_PWM_MspInit+0x68>)
 800135e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <HAL_TIM_PWM_MspInit+0x68>)
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	0109      	lsls	r1, r1, #4
 8001366:	430a      	orrs	r2, r1
 8001368:	641a      	str	r2, [r3, #64]	@ 0x40
 800136a:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_TIM_PWM_MspInit+0x68>)
 800136c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4013      	ands	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001378:	46c0      	nop			@ (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b011      	add	sp, #68	@ 0x44
 800137e:	bd90      	pop	{r4, r7, pc}
 8001380:	40012c00 	.word	0x40012c00
 8001384:	40021000 	.word	0x40021000

08001388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	240c      	movs	r4, #12
 8001392:	193b      	adds	r3, r7, r4
 8001394:	0018      	movs	r0, r3
 8001396:	2314      	movs	r3, #20
 8001398:	001a      	movs	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	f004 fbd0 	bl	8005b40 <memset>
  if(htim->Instance==TIM1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <HAL_TIM_MspPostInit+0x74>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d123      	bne.n	80013f2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_TIM_MspPostInit+0x78>)
 80013ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ae:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <HAL_TIM_MspPostInit+0x78>)
 80013b0:	2101      	movs	r1, #1
 80013b2:	430a      	orrs	r2, r1
 80013b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <HAL_TIM_MspPostInit+0x78>)
 80013b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ba:	2201      	movs	r2, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013c2:	193b      	adds	r3, r7, r4
 80013c4:	2280      	movs	r2, #128	@ 0x80
 80013c6:	0052      	lsls	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	0021      	movs	r1, r4
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2202      	movs	r2, #2
 80013d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	2202      	movs	r2, #2
 80013e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	187a      	adds	r2, r7, r1
 80013e6:	23a0      	movs	r3, #160	@ 0xa0
 80013e8:	05db      	lsls	r3, r3, #23
 80013ea:	0011      	movs	r1, r2
 80013ec:	0018      	movs	r0, r3
 80013ee:	f000 ffd5 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b009      	add	sp, #36	@ 0x24
 80013f8:	bd90      	pop	{r4, r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	40012c00 	.word	0x40012c00
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b097      	sub	sp, #92	@ 0x5c
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	2344      	movs	r3, #68	@ 0x44
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	0018      	movs	r0, r3
 8001412:	2314      	movs	r3, #20
 8001414:	001a      	movs	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	f004 fb92 	bl	8005b40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141c:	2410      	movs	r4, #16
 800141e:	193b      	adds	r3, r7, r4
 8001420:	0018      	movs	r0, r3
 8001422:	2334      	movs	r3, #52	@ 0x34
 8001424:	001a      	movs	r2, r3
 8001426:	2100      	movs	r1, #0
 8001428:	f004 fb8a 	bl	8005b40 <memset>
  if(huart->Instance==USART2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a22      	ldr	r2, [pc, #136]	@ (80014bc <HAL_UART_MspInit+0xb8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d13e      	bne.n	80014b4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001436:	193b      	adds	r3, r7, r4
 8001438:	2202      	movs	r2, #2
 800143a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800143c:	193b      	adds	r3, r7, r4
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001442:	193b      	adds	r3, r7, r4
 8001444:	0018      	movs	r0, r3
 8001446:	f002 faf5 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 800144a:	1e03      	subs	r3, r0, #0
 800144c:	d001      	beq.n	8001452 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800144e:	f7ff fe95 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001452:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <HAL_UART_MspInit+0xbc>)
 8001454:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001456:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <HAL_UART_MspInit+0xbc>)
 8001458:	2180      	movs	r1, #128	@ 0x80
 800145a:	0289      	lsls	r1, r1, #10
 800145c:	430a      	orrs	r2, r1
 800145e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <HAL_UART_MspInit+0xbc>)
 8001462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	029b      	lsls	r3, r3, #10
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <HAL_UART_MspInit+0xbc>)
 8001470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <HAL_UART_MspInit+0xbc>)
 8001474:	2101      	movs	r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	@ 0x34
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HAL_UART_MspInit+0xbc>)
 800147c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147e:	2201      	movs	r2, #1
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001486:	2144      	movs	r1, #68	@ 0x44
 8001488:	187b      	adds	r3, r7, r1
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	187b      	adds	r3, r7, r1
 8001490:	2202      	movs	r2, #2
 8001492:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2201      	movs	r2, #1
 80014a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	187a      	adds	r2, r7, r1
 80014a8:	23a0      	movs	r3, #160	@ 0xa0
 80014aa:	05db      	lsls	r3, r3, #23
 80014ac:	0011      	movs	r1, r2
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 ff74 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014b4:	46c0      	nop			@ (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b017      	add	sp, #92	@ 0x5c
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	40004400 	.word	0x40004400
 80014c0:	40021000 	.word	0x40021000

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	46c0      	nop			@ (mov r8, r8)
 80014ca:	e7fd      	b.n	80014c8 <NMI_Handler+0x4>

080014cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d0:	46c0      	nop			@ (mov r8, r8)
 80014d2:	e7fd      	b.n	80014d0 <HardFault_Handler+0x4>

080014d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014d8:	46c0      	nop			@ (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f000 f8d4 	bl	8001698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	46c0      	nop			@ (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	18d3      	adds	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f004 fb12 	bl	8005b50 <__errno>
 800152c:	0003      	movs	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	2301      	movs	r3, #1
 8001534:	425b      	negs	r3, r3
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	18d2      	adds	r2, r2, r3
 8001546:	4b05      	ldr	r3, [pc, #20]	@ (800155c <_sbrk+0x64>)
 8001548:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b006      	add	sp, #24
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20009000 	.word	0x20009000
 8001558:	00000400 	.word	0x00000400
 800155c:	200002b0 	.word	0x200002b0
 8001560:	20000400 	.word	0x20000400

08001564 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	46c0      	nop			@ (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001570:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001572:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001574:	f7ff fff6 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <LoopForever+0x6>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	@ (80015b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <LoopForever+0xe>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	@ (80015bc <LoopForever+0x16>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800159e:	f004 fadd 	bl	8005b5c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015a2:	f7ff faf1 	bl	8000b88 <main>

080015a6 <LoopForever>:

LoopForever:
  b LoopForever
 80015a6:	e7fe      	b.n	80015a6 <LoopForever>
  ldr   r0, =_estack
 80015a8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80015b4:	080065d0 	.word	0x080065d0
  ldr r2, =_sbss
 80015b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80015bc:	20000400 	.word	0x20000400

080015c0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC1_COMP_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <HAL_Init+0x3c>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <HAL_Init+0x3c>)
 80015d6:	2180      	movs	r1, #128	@ 0x80
 80015d8:	0049      	lsls	r1, r1, #1
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015de:	2003      	movs	r0, #3
 80015e0:	f000 f810 	bl	8001604 <HAL_InitTick>
 80015e4:	1e03      	subs	r3, r0, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80015e8:	1dfb      	adds	r3, r7, #7
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e001      	b.n	80015f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fdca 	bl	8001188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	781b      	ldrb	r3, [r3, #0]
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40022000 	.word	0x40022000

08001604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800160c:	230f      	movs	r3, #15
 800160e:	18fb      	adds	r3, r7, r3
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <HAL_InitTick+0x88>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d02b      	beq.n	8001674 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800161c:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <HAL_InitTick+0x8c>)
 800161e:	681c      	ldr	r4, [r3, #0]
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <HAL_InitTick+0x88>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	0019      	movs	r1, r3
 8001626:	23fa      	movs	r3, #250	@ 0xfa
 8001628:	0098      	lsls	r0, r3, #2
 800162a:	f7fe fd7d 	bl	8000128 <__udivsi3>
 800162e:	0003      	movs	r3, r0
 8001630:	0019      	movs	r1, r3
 8001632:	0020      	movs	r0, r4
 8001634:	f7fe fd78 	bl	8000128 <__udivsi3>
 8001638:	0003      	movs	r3, r0
 800163a:	0018      	movs	r0, r3
 800163c:	f000 fea1 	bl	8002382 <HAL_SYSTICK_Config>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d112      	bne.n	800166a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d80a      	bhi.n	8001660 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	2301      	movs	r3, #1
 800164e:	425b      	negs	r3, r3
 8001650:	2200      	movs	r2, #0
 8001652:	0018      	movs	r0, r3
 8001654:	f000 fe80 	bl	8002358 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_InitTick+0x90>)
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e00d      	b.n	800167c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001660:	230f      	movs	r3, #15
 8001662:	18fb      	adds	r3, r7, r3
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e008      	b.n	800167c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800166a:	230f      	movs	r3, #15
 800166c:	18fb      	adds	r3, r7, r3
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	e003      	b.n	800167c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001674:	230f      	movs	r3, #15
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800167c:	230f      	movs	r3, #15
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	781b      	ldrb	r3, [r3, #0]
}
 8001682:	0018      	movs	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	b005      	add	sp, #20
 8001688:	bd90      	pop	{r4, r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	20000018 	.word	0x20000018
 8001690:	20000010 	.word	0x20000010
 8001694:	20000014 	.word	0x20000014

08001698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_IncTick+0x1c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	001a      	movs	r2, r3
 80016a2:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <HAL_IncTick+0x20>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	18d2      	adds	r2, r2, r3
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_IncTick+0x20>)
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	46c0      	nop			@ (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	20000018 	.word	0x20000018
 80016b8:	200002b4 	.word	0x200002b4

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b02      	ldr	r3, [pc, #8]	@ (80016cc <HAL_GetTick+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	200002b4 	.word	0x200002b4

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff fff0 	bl	80016bc <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	3301      	adds	r3, #1
 80016e8:	d005      	beq.n	80016f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <HAL_Delay+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	001a      	movs	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	189b      	adds	r3, r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	f7ff ffe0 	bl	80016bc <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8f7      	bhi.n	80016f8 <HAL_Delay+0x28>
  {
  }
}
 8001708:	46c0      	nop			@ (mov r8, r8)
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b004      	add	sp, #16
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	20000018 	.word	0x20000018

08001718 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a05      	ldr	r2, [pc, #20]	@ (800173c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001728:	401a      	ands	r2, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	fe3fffff 	.word	0xfe3fffff

08001740 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	23e0      	movs	r3, #224	@ 0xe0
 800174e:	045b      	lsls	r3, r3, #17
 8001750:	4013      	ands	r3, r2
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}

0800175a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	2104      	movs	r1, #4
 800176e:	400a      	ands	r2, r1
 8001770:	2107      	movs	r1, #7
 8001772:	4091      	lsls	r1, r2
 8001774:	000a      	movs	r2, r1
 8001776:	43d2      	mvns	r2, r2
 8001778:	401a      	ands	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2104      	movs	r1, #4
 800177e:	400b      	ands	r3, r1
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4099      	lsls	r1, r3
 8001784:	000b      	movs	r3, r1
 8001786:	431a      	orrs	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b004      	add	sp, #16
 8001792:	bd80      	pop	{r7, pc}

08001794 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	2104      	movs	r1, #4
 80017a6:	400a      	ands	r2, r1
 80017a8:	2107      	movs	r1, #7
 80017aa:	4091      	lsls	r1, r2
 80017ac:	000a      	movs	r2, r1
 80017ae:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2104      	movs	r1, #4
 80017b4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017b6:	40da      	lsrs	r2, r3
 80017b8:	0013      	movs	r3, r2
}
 80017ba:	0018      	movs	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	b002      	add	sp, #8
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	211f      	movs	r1, #31
 80017d6:	400a      	ands	r2, r1
 80017d8:	210f      	movs	r1, #15
 80017da:	4091      	lsls	r1, r2
 80017dc:	000a      	movs	r2, r1
 80017de:	43d2      	mvns	r2, r2
 80017e0:	401a      	ands	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	0e9b      	lsrs	r3, r3, #26
 80017e6:	210f      	movs	r1, #15
 80017e8:	4019      	ands	r1, r3
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	201f      	movs	r0, #31
 80017ee:	4003      	ands	r3, r0
 80017f0:	4099      	lsls	r1, r3
 80017f2:	000b      	movs	r3, r1
 80017f4:	431a      	orrs	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bd80      	pop	{r7, pc}

08001802 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	035b      	lsls	r3, r3, #13
 8001814:	0b5b      	lsrs	r3, r3, #13
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800181c:	46c0      	nop			@ (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b002      	add	sp, #8
 8001822:	bd80      	pop	{r7, pc}

08001824 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	0352      	lsls	r2, r2, #13
 8001836:	0b52      	lsrs	r2, r2, #13
 8001838:	43d2      	mvns	r2, r2
 800183a:	401a      	ands	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001840:	46c0      	nop			@ (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}

08001848 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	0212      	lsls	r2, r2, #8
 800185c:	43d2      	mvns	r2, r2
 800185e:	401a      	ands	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	400b      	ands	r3, r1
 8001868:	4904      	ldr	r1, [pc, #16]	@ (800187c <LL_ADC_SetChannelSamplingTime+0x34>)
 800186a:	400b      	ands	r3, r1
 800186c:	431a      	orrs	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	07ffff00 	.word	0x07ffff00

08001880 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800188e:	4013      	ands	r3, r2
 8001890:	2280      	movs	r2, #128	@ 0x80
 8001892:	0552      	lsls	r2, r2, #21
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	6fffffe8 	.word	0x6fffffe8

080018a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	055b      	lsls	r3, r3, #21
 80018b8:	401a      	ands	r2, r3
 80018ba:	2380      	movs	r3, #128	@ 0x80
 80018bc:	055b      	lsls	r3, r3, #21
 80018be:	429a      	cmp	r2, r3
 80018c0:	d101      	bne.n	80018c6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b002      	add	sp, #8
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <LL_ADC_Enable+0x20>)
 80018de:	4013      	ands	r3, r2
 80018e0:	2201      	movs	r2, #1
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018e8:	46c0      	nop			@ (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	7fffffe8 	.word	0x7fffffe8

080018f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2201      	movs	r2, #1
 8001902:	4013      	ands	r3, r2
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <LL_ADC_IsEnabled+0x18>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <LL_ADC_IsEnabled+0x1a>
 800190c:	2300      	movs	r3, #0
}
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <LL_ADC_REG_StartConversion+0x20>)
 8001926:	4013      	ands	r3, r2
 8001928:	2204      	movs	r2, #4
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001930:	46c0      	nop			@ (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}
 8001938:	7fffffe8 	.word	0x7fffffe8

0800193c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2204      	movs	r2, #4
 800194a:	4013      	ands	r3, r2
 800194c:	2b04      	cmp	r3, #4
 800194e:	d101      	bne.n	8001954 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001954:	2300      	movs	r3, #0
}
 8001956:	0018      	movs	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	b002      	add	sp, #8
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001968:	231f      	movs	r3, #31
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001970:	2300      	movs	r3, #0
 8001972:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e17f      	b.n	8001c86 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10a      	bne.n	80019a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff fc1d 	bl	80011d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2254      	movs	r2, #84	@ 0x54
 80019a0:	2100      	movs	r1, #0
 80019a2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff ff7d 	bl	80018a8 <LL_ADC_IsInternalRegulatorEnabled>
 80019ae:	1e03      	subs	r3, r0, #0
 80019b0:	d115      	bne.n	80019de <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7ff ff62 	bl	8001880 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019bc:	4bb4      	ldr	r3, [pc, #720]	@ (8001c90 <HAL_ADC_Init+0x330>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	49b4      	ldr	r1, [pc, #720]	@ (8001c94 <HAL_ADC_Init+0x334>)
 80019c2:	0018      	movs	r0, r3
 80019c4:	f7fe fbb0 	bl	8000128 <__udivsi3>
 80019c8:	0003      	movs	r3, r0
 80019ca:	3301      	adds	r3, #1
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019d0:	e002      	b.n	80019d8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f9      	bne.n	80019d2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff ff60 	bl	80018a8 <LL_ADC_IsInternalRegulatorEnabled>
 80019e8:	1e03      	subs	r3, r0, #0
 80019ea:	d10f      	bne.n	8001a0c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	2210      	movs	r2, #16
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019fc:	2201      	movs	r2, #1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a04:	231f      	movs	r3, #31
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff ff93 	bl	800193c <LL_ADC_REG_IsConversionOngoing>
 8001a16:	0003      	movs	r3, r0
 8001a18:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	2210      	movs	r2, #16
 8001a20:	4013      	ands	r3, r2
 8001a22:	d000      	beq.n	8001a26 <HAL_ADC_Init+0xc6>
 8001a24:	e122      	b.n	8001c6c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d000      	beq.n	8001a2e <HAL_ADC_Init+0xce>
 8001a2c:	e11e      	b.n	8001c6c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	4a99      	ldr	r2, [pc, #612]	@ (8001c98 <HAL_ADC_Init+0x338>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	2202      	movs	r2, #2
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7ff ff56 	bl	80018f4 <LL_ADC_IsEnabled>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d000      	beq.n	8001a4e <HAL_ADC_Init+0xee>
 8001a4c:	e0ad      	b.n	8001baa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7e1b      	ldrb	r3, [r3, #24]
 8001a56:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a58:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	7e5b      	ldrb	r3, [r3, #25]
 8001a5e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a60:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7e9b      	ldrb	r3, [r3, #26]
 8001a66:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a68:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_ADC_Init+0x118>
 8001a72:	2380      	movs	r3, #128	@ 0x80
 8001a74:	015b      	lsls	r3, r3, #5
 8001a76:	e000      	b.n	8001a7a <HAL_ADC_Init+0x11a>
 8001a78:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a7a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a80:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	da04      	bge.n	8001a94 <HAL_ADC_Init+0x134>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	e001      	b.n	8001a98 <HAL_ADC_Init+0x138>
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001a98:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	212c      	movs	r1, #44	@ 0x2c
 8001a9e:	5c5b      	ldrb	r3, [r3, r1]
 8001aa0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001aa2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2220      	movs	r2, #32
 8001aae:	5c9b      	ldrb	r3, [r3, r2]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d115      	bne.n	8001ae0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7e9b      	ldrb	r3, [r3, #26]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2280      	movs	r2, #128	@ 0x80
 8001ac0:	0252      	lsls	r2, r2, #9
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	2220      	movs	r2, #32
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad8:	2201      	movs	r2, #1
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00a      	beq.n	8001afe <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aec:	23e0      	movs	r3, #224	@ 0xe0
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001af6:	4313      	orrs	r3, r2
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4a65      	ldr	r2, [pc, #404]	@ (8001c9c <HAL_ADC_Init+0x33c>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	0019      	movs	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0f9b      	lsrs	r3, r3, #30
 8001b1a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b20:	4313      	orrs	r3, r2
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	223c      	movs	r2, #60	@ 0x3c
 8001b2c:	5c9b      	ldrb	r3, [r3, r2]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d111      	bne.n	8001b56 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	0f9b      	lsrs	r3, r3, #30
 8001b38:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b3e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001b44:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001b4a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	2201      	movs	r2, #1
 8001b52:	4313      	orrs	r3, r2
 8001b54:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ca0 <HAL_ADC_Init+0x340>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	23c0      	movs	r3, #192	@ 0xc0
 8001b72:	061b      	lsls	r3, r3, #24
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d018      	beq.n	8001baa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	05db      	lsls	r3, r3, #23
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d012      	beq.n	8001baa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b88:	2380      	movs	r3, #128	@ 0x80
 8001b8a:	061b      	lsls	r3, r3, #24
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d00c      	beq.n	8001baa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001b90:	4b44      	ldr	r3, [pc, #272]	@ (8001ca4 <HAL_ADC_Init+0x344>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a44      	ldr	r2, [pc, #272]	@ (8001ca8 <HAL_ADC_Init+0x348>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	23f0      	movs	r3, #240	@ 0xf0
 8001ba0:	039b      	lsls	r3, r3, #14
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca4 <HAL_ADC_Init+0x344>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb2:	001a      	movs	r2, r3
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	f7ff fdd0 	bl	800175a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc2:	493a      	ldr	r1, [pc, #232]	@ (8001cac <HAL_ADC_Init+0x34c>)
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	f7ff fdc8 	bl	800175a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2110      	movs	r1, #16
 8001bde:	4249      	negs	r1, r1
 8001be0:	430a      	orrs	r2, r1
 8001be2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001be4:	e018      	b.n	8001c18 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	039b      	lsls	r3, r3, #14
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d112      	bne.n	8001c18 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	221c      	movs	r2, #28
 8001c02:	4013      	ands	r3, r2
 8001c04:	2210      	movs	r2, #16
 8001c06:	4252      	negs	r2, r2
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	0011      	movs	r1, r2
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7ff fdb8 	bl	8001794 <LL_ADC_GetSamplingTimeCommonChannels>
 8001c24:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d10b      	bne.n	8001c46 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c38:	2203      	movs	r2, #3
 8001c3a:	4393      	bics	r3, r2
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c44:	e01c      	b.n	8001c80 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4a:	2212      	movs	r2, #18
 8001c4c:	4393      	bics	r3, r2
 8001c4e:	2210      	movs	r2, #16
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001c62:	231f      	movs	r3, #31
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c6a:	e009      	b.n	8001c80 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c70:	2210      	movs	r2, #16
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c78:	231f      	movs	r3, #31
 8001c7a:	18fb      	adds	r3, r7, r3
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001c80:	231f      	movs	r3, #31
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	781b      	ldrb	r3, [r3, #0]
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b008      	add	sp, #32
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	20000010 	.word	0x20000010
 8001c94:	00030d40 	.word	0x00030d40
 8001c98:	fffffefd 	.word	0xfffffefd
 8001c9c:	ffde0201 	.word	0xffde0201
 8001ca0:	1ffffc02 	.word	0x1ffffc02
 8001ca4:	40012708 	.word	0x40012708
 8001ca8:	ffc3ffff 	.word	0xffc3ffff
 8001cac:	07ffff04 	.word	0x07ffff04

08001cb0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff fe3d 	bl	800193c <LL_ADC_REG_IsConversionOngoing>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d135      	bne.n	8001d32 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2254      	movs	r2, #84	@ 0x54
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_Start+0x24>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e035      	b.n	8001d40 <HAL_ADC_Start+0x90>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2254      	movs	r2, #84	@ 0x54
 8001cd8:	2101      	movs	r1, #1
 8001cda:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cdc:	250f      	movs	r5, #15
 8001cde:	197c      	adds	r4, r7, r5
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f000 fa20 	bl	8002128 <ADC_Enable>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cec:	197b      	adds	r3, r7, r5
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d119      	bne.n	8001d28 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf8:	4a13      	ldr	r2, [pc, #76]	@ (8001d48 <HAL_ADC_Start+0x98>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2280      	movs	r2, #128	@ 0x80
 8001cfe:	0052      	lsls	r2, r2, #1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	221c      	movs	r2, #28
 8001d12:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2254      	movs	r2, #84	@ 0x54
 8001d18:	2100      	movs	r1, #0
 8001d1a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff fdf9 	bl	8001918 <LL_ADC_REG_StartConversion>
 8001d26:	e008      	b.n	8001d3a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2254      	movs	r2, #84	@ 0x54
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	5499      	strb	r1, [r3, r2]
 8001d30:	e003      	b.n	8001d3a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d32:	230f      	movs	r3, #15
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2202      	movs	r2, #2
 8001d38:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001d3a:	230f      	movs	r3, #15
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	781b      	ldrb	r3, [r3, #0]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b004      	add	sp, #16
 8001d46:	bdb0      	pop	{r4, r5, r7, pc}
 8001d48:	fffff0fe 	.word	0xfffff0fe

08001d4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6e:	2317      	movs	r3, #23
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2254      	movs	r2, #84	@ 0x54
 8001d7e:	5c9b      	ldrb	r3, [r3, r2]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x24>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e1c0      	b.n	800210a <HAL_ADC_ConfigChannel+0x3a6>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2254      	movs	r2, #84	@ 0x54
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7ff fdd1 	bl	800193c <LL_ADC_REG_IsConversionOngoing>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d000      	beq.n	8001da0 <HAL_ADC_ConfigChannel+0x3c>
 8001d9e:	e1a3      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d100      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x46>
 8001da8:	e143      	b.n	8002032 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	2380      	movs	r3, #128	@ 0x80
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d004      	beq.n	8001dc0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dba:	4ac1      	ldr	r2, [pc, #772]	@ (80020c0 <HAL_ADC_ConfigChannel+0x35c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0019      	movs	r1, r3
 8001dca:	0010      	movs	r0, r2
 8001dcc:	f7ff fd19 	bl	8001802 <LL_ADC_REG_SetSequencerChAdd>
 8001dd0:	e0c9      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	211f      	movs	r1, #31
 8001ddc:	400b      	ands	r3, r1
 8001dde:	210f      	movs	r1, #15
 8001de0:	4099      	lsls	r1, r3
 8001de2:	000b      	movs	r3, r1
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4013      	ands	r3, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	035b      	lsls	r3, r3, #13
 8001df0:	0b5b      	lsrs	r3, r3, #13
 8001df2:	d105      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x9c>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0e9b      	lsrs	r3, r3, #26
 8001dfa:	221f      	movs	r2, #31
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	e098      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	d000      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0xa8>
 8001e0a:	e091      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x1cc>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2202      	movs	r2, #2
 8001e12:	4013      	ands	r3, r2
 8001e14:	d000      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0xb4>
 8001e16:	e089      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x1c8>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d000      	beq.n	8001e24 <HAL_ADC_ConfigChannel+0xc0>
 8001e22:	e081      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1c4>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d000      	beq.n	8001e30 <HAL_ADC_ConfigChannel+0xcc>
 8001e2e:	e079      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x1c0>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2210      	movs	r2, #16
 8001e36:	4013      	ands	r3, r2
 8001e38:	d000      	beq.n	8001e3c <HAL_ADC_ConfigChannel+0xd8>
 8001e3a:	e071      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x1bc>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2220      	movs	r2, #32
 8001e42:	4013      	ands	r3, r2
 8001e44:	d000      	beq.n	8001e48 <HAL_ADC_ConfigChannel+0xe4>
 8001e46:	e069      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x1b8>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2240      	movs	r2, #64	@ 0x40
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d000      	beq.n	8001e54 <HAL_ADC_ConfigChannel+0xf0>
 8001e52:	e061      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x1b4>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2280      	movs	r2, #128	@ 0x80
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d000      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0xfc>
 8001e5e:	e059      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x1b0>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d151      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1ac>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d149      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1a8>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4013      	ands	r3, r2
 8001e82:	d141      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1a4>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d139      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1a0>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d131      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x19c>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	019b      	lsls	r3, r3, #6
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d129      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x198>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	01db      	lsls	r3, r3, #7
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d121      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x194>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d119      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x190>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	@ 0x80
 8001ec6:	025b      	lsls	r3, r3, #9
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d111      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x18c>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d109      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x188>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	02db      	lsls	r3, r3, #11
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d001      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0x184>
 8001ee4:	2312      	movs	r3, #18
 8001ee6:	e024      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e022      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001eec:	2311      	movs	r3, #17
 8001eee:	e020      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	e01e      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef4:	230f      	movs	r3, #15
 8001ef6:	e01c      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef8:	230e      	movs	r3, #14
 8001efa:	e01a      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001efc:	230d      	movs	r3, #13
 8001efe:	e018      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f00:	230c      	movs	r3, #12
 8001f02:	e016      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f04:	230b      	movs	r3, #11
 8001f06:	e014      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f08:	230a      	movs	r3, #10
 8001f0a:	e012      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f0c:	2309      	movs	r3, #9
 8001f0e:	e010      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f10:	2308      	movs	r3, #8
 8001f12:	e00e      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f14:	2307      	movs	r3, #7
 8001f16:	e00c      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f18:	2306      	movs	r3, #6
 8001f1a:	e00a      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	e008      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f20:	2304      	movs	r3, #4
 8001f22:	e006      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f24:	2303      	movs	r3, #3
 8001f26:	e004      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1ce>
 8001f30:	2300      	movs	r3, #0
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	6852      	ldr	r2, [r2, #4]
 8001f36:	201f      	movs	r0, #31
 8001f38:	4002      	ands	r2, r0
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	000a      	movs	r2, r1
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d808      	bhi.n	8001f66 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	001a      	movs	r2, r3
 8001f62:	f7ff fc2e 	bl	80017c2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6819      	ldr	r1, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	001a      	movs	r2, r3
 8001f74:	f7ff fc68 	bl	8001848 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db00      	blt.n	8001f82 <HAL_ADC_ConfigChannel+0x21e>
 8001f80:	e0bc      	b.n	80020fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f82:	4b50      	ldr	r3, [pc, #320]	@ (80020c4 <HAL_ADC_ConfigChannel+0x360>)
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7ff fbdb 	bl	8001740 <LL_ADC_GetCommonPathInternalCh>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a4d      	ldr	r2, [pc, #308]	@ (80020c8 <HAL_ADC_ConfigChannel+0x364>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d122      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	2380      	movs	r3, #128	@ 0x80
 8001f9c:	041b      	lsls	r3, r3, #16
 8001f9e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fa0:	d11d      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2280      	movs	r2, #128	@ 0x80
 8001fa6:	0412      	lsls	r2, r2, #16
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	4a46      	ldr	r2, [pc, #280]	@ (80020c4 <HAL_ADC_ConfigChannel+0x360>)
 8001fac:	0019      	movs	r1, r3
 8001fae:	0010      	movs	r0, r2
 8001fb0:	f7ff fbb2 	bl	8001718 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb4:	4b45      	ldr	r3, [pc, #276]	@ (80020cc <HAL_ADC_ConfigChannel+0x368>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4945      	ldr	r1, [pc, #276]	@ (80020d0 <HAL_ADC_ConfigChannel+0x36c>)
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f7fe f8b4 	bl	8000128 <__udivsi3>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	189b      	adds	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fce:	e002      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f9      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fdc:	e08e      	b.n	80020fc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	@ (80020d4 <HAL_ADC_ConfigChannel+0x370>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d10e      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	2380      	movs	r3, #128	@ 0x80
 8001fec:	045b      	lsls	r3, r3, #17
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d109      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2280      	movs	r2, #128	@ 0x80
 8001ff6:	0452      	lsls	r2, r2, #17
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	4a32      	ldr	r2, [pc, #200]	@ (80020c4 <HAL_ADC_ConfigChannel+0x360>)
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	0010      	movs	r0, r2
 8002000:	f7ff fb8a 	bl	8001718 <LL_ADC_SetCommonPathInternalCh>
 8002004:	e07a      	b.n	80020fc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a33      	ldr	r2, [pc, #204]	@ (80020d8 <HAL_ADC_ConfigChannel+0x374>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d000      	beq.n	8002012 <HAL_ADC_ConfigChannel+0x2ae>
 8002010:	e074      	b.n	80020fc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	2380      	movs	r3, #128	@ 0x80
 8002016:	03db      	lsls	r3, r3, #15
 8002018:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800201a:	d000      	beq.n	800201e <HAL_ADC_ConfigChannel+0x2ba>
 800201c:	e06e      	b.n	80020fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2280      	movs	r2, #128	@ 0x80
 8002022:	03d2      	lsls	r2, r2, #15
 8002024:	4313      	orrs	r3, r2
 8002026:	4a27      	ldr	r2, [pc, #156]	@ (80020c4 <HAL_ADC_ConfigChannel+0x360>)
 8002028:	0019      	movs	r1, r3
 800202a:	0010      	movs	r0, r2
 800202c:	f7ff fb74 	bl	8001718 <LL_ADC_SetCommonPathInternalCh>
 8002030:	e064      	b.n	80020fc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	061b      	lsls	r3, r3, #24
 800203a:	429a      	cmp	r2, r3
 800203c:	d004      	beq.n	8002048 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002042:	4a1f      	ldr	r2, [pc, #124]	@ (80020c0 <HAL_ADC_ConfigChannel+0x35c>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d107      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	0019      	movs	r1, r3
 8002052:	0010      	movs	r0, r2
 8002054:	f7ff fbe6 	bl	8001824 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	da4d      	bge.n	80020fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002060:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <HAL_ADC_ConfigChannel+0x360>)
 8002062:	0018      	movs	r0, r3
 8002064:	f7ff fb6c 	bl	8001740 <LL_ADC_GetCommonPathInternalCh>
 8002068:	0003      	movs	r3, r0
 800206a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a15      	ldr	r2, [pc, #84]	@ (80020c8 <HAL_ADC_ConfigChannel+0x364>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d108      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4a18      	ldr	r2, [pc, #96]	@ (80020dc <HAL_ADC_ConfigChannel+0x378>)
 800207a:	4013      	ands	r3, r2
 800207c:	4a11      	ldr	r2, [pc, #68]	@ (80020c4 <HAL_ADC_ConfigChannel+0x360>)
 800207e:	0019      	movs	r1, r3
 8002080:	0010      	movs	r0, r2
 8002082:	f7ff fb49 	bl	8001718 <LL_ADC_SetCommonPathInternalCh>
 8002086:	e039      	b.n	80020fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <HAL_ADC_ConfigChannel+0x370>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d108      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <HAL_ADC_ConfigChannel+0x37c>)
 8002096:	4013      	ands	r3, r2
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_ADC_ConfigChannel+0x360>)
 800209a:	0019      	movs	r1, r3
 800209c:	0010      	movs	r0, r2
 800209e:	f7ff fb3b 	bl	8001718 <LL_ADC_SetCommonPathInternalCh>
 80020a2:	e02b      	b.n	80020fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0b      	ldr	r2, [pc, #44]	@ (80020d8 <HAL_ADC_ConfigChannel+0x374>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d126      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4a0c      	ldr	r2, [pc, #48]	@ (80020e4 <HAL_ADC_ConfigChannel+0x380>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	4a03      	ldr	r2, [pc, #12]	@ (80020c4 <HAL_ADC_ConfigChannel+0x360>)
 80020b6:	0019      	movs	r1, r3
 80020b8:	0010      	movs	r0, r2
 80020ba:	f7ff fb2d 	bl	8001718 <LL_ADC_SetCommonPathInternalCh>
 80020be:	e01d      	b.n	80020fc <HAL_ADC_ConfigChannel+0x398>
 80020c0:	80000004 	.word	0x80000004
 80020c4:	40012708 	.word	0x40012708
 80020c8:	b0001000 	.word	0xb0001000
 80020cc:	20000010 	.word	0x20000010
 80020d0:	00030d40 	.word	0x00030d40
 80020d4:	b8004000 	.word	0xb8004000
 80020d8:	b4002000 	.word	0xb4002000
 80020dc:	ff7fffff 	.word	0xff7fffff
 80020e0:	feffffff 	.word	0xfeffffff
 80020e4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ec:	2220      	movs	r2, #32
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020f4:	2317      	movs	r3, #23
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2254      	movs	r2, #84	@ 0x54
 8002100:	2100      	movs	r1, #0
 8002102:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002104:	2317      	movs	r3, #23
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	781b      	ldrb	r3, [r3, #0]
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	b006      	add	sp, #24
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			@ (mov r8, r8)

08002114 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(const ADC_HandleTypeDef *hadc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}

08002128 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff fbdb 	bl	80018f4 <LL_ADC_IsEnabled>
 800213e:	1e03      	subs	r3, r0, #0
 8002140:	d000      	beq.n	8002144 <ADC_Enable+0x1c>
 8002142:	e069      	b.n	8002218 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	4a36      	ldr	r2, [pc, #216]	@ (8002224 <ADC_Enable+0xfc>)
 800214c:	4013      	ands	r3, r2
 800214e:	d00d      	beq.n	800216c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002154:	2210      	movs	r2, #16
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002160:	2201      	movs	r2, #1
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e056      	b.n	800221a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0018      	movs	r0, r3
 8002172:	f7ff fbad 	bl	80018d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002176:	4b2c      	ldr	r3, [pc, #176]	@ (8002228 <ADC_Enable+0x100>)
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff fae1 	bl	8001740 <LL_ADC_GetCommonPathInternalCh>
 800217e:	0002      	movs	r2, r0
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	041b      	lsls	r3, r3, #16
 8002184:	4013      	ands	r3, r2
 8002186:	d00f      	beq.n	80021a8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002188:	4b28      	ldr	r3, [pc, #160]	@ (800222c <ADC_Enable+0x104>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4928      	ldr	r1, [pc, #160]	@ (8002230 <ADC_Enable+0x108>)
 800218e:	0018      	movs	r0, r3
 8002190:	f7fd ffca 	bl	8000128 <__udivsi3>
 8002194:	0003      	movs	r3, r0
 8002196:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002198:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800219a:	e002      	b.n	80021a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	3b01      	subs	r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f9      	bne.n	800219c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7e5b      	ldrb	r3, [r3, #25]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d033      	beq.n	8002218 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80021b0:	f7ff fa84 	bl	80016bc <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021b8:	e027      	b.n	800220a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	0018      	movs	r0, r3
 80021c0:	f7ff fb98 	bl	80018f4 <LL_ADC_IsEnabled>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d104      	bne.n	80021d2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7ff fb7f 	bl	80018d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021d2:	f7ff fa73 	bl	80016bc <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d914      	bls.n	800220a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d00d      	beq.n	800220a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	2210      	movs	r2, #16
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fe:	2201      	movs	r2, #1
 8002200:	431a      	orrs	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e007      	b.n	800221a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	4013      	ands	r3, r2
 8002214:	2b01      	cmp	r3, #1
 8002216:	d1d0      	bne.n	80021ba <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	80000017 	.word	0x80000017
 8002228:	40012708 	.word	0x40012708
 800222c:	20000010 	.word	0x20000010
 8002230:	00030d40 	.word	0x00030d40

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	0002      	movs	r2, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b7f      	cmp	r3, #127	@ 0x7f
 8002248:	d828      	bhi.n	800229c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800224a:	4a2f      	ldr	r2, [pc, #188]	@ (8002308 <__NVIC_SetPriority+0xd4>)
 800224c:	1dfb      	adds	r3, r7, #7
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b25b      	sxtb	r3, r3
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	33c0      	adds	r3, #192	@ 0xc0
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	589b      	ldr	r3, [r3, r2]
 800225a:	1dfa      	adds	r2, r7, #7
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	0011      	movs	r1, r2
 8002260:	2203      	movs	r2, #3
 8002262:	400a      	ands	r2, r1
 8002264:	00d2      	lsls	r2, r2, #3
 8002266:	21ff      	movs	r1, #255	@ 0xff
 8002268:	4091      	lsls	r1, r2
 800226a:	000a      	movs	r2, r1
 800226c:	43d2      	mvns	r2, r2
 800226e:	401a      	ands	r2, r3
 8002270:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	019b      	lsls	r3, r3, #6
 8002276:	22ff      	movs	r2, #255	@ 0xff
 8002278:	401a      	ands	r2, r3
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	0018      	movs	r0, r3
 8002280:	2303      	movs	r3, #3
 8002282:	4003      	ands	r3, r0
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002288:	481f      	ldr	r0, [pc, #124]	@ (8002308 <__NVIC_SetPriority+0xd4>)
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b25b      	sxtb	r3, r3
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	430a      	orrs	r2, r1
 8002294:	33c0      	adds	r3, #192	@ 0xc0
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800229a:	e031      	b.n	8002300 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800229c:	4a1b      	ldr	r2, [pc, #108]	@ (800230c <__NVIC_SetPriority+0xd8>)
 800229e:	1dfb      	adds	r3, r7, #7
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	0019      	movs	r1, r3
 80022a4:	230f      	movs	r3, #15
 80022a6:	400b      	ands	r3, r1
 80022a8:	3b08      	subs	r3, #8
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3306      	adds	r3, #6
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	18d3      	adds	r3, r2, r3
 80022b2:	3304      	adds	r3, #4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	1dfa      	adds	r2, r7, #7
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	0011      	movs	r1, r2
 80022bc:	2203      	movs	r2, #3
 80022be:	400a      	ands	r2, r1
 80022c0:	00d2      	lsls	r2, r2, #3
 80022c2:	21ff      	movs	r1, #255	@ 0xff
 80022c4:	4091      	lsls	r1, r2
 80022c6:	000a      	movs	r2, r1
 80022c8:	43d2      	mvns	r2, r2
 80022ca:	401a      	ands	r2, r3
 80022cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	019b      	lsls	r3, r3, #6
 80022d2:	22ff      	movs	r2, #255	@ 0xff
 80022d4:	401a      	ands	r2, r3
 80022d6:	1dfb      	adds	r3, r7, #7
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	0018      	movs	r0, r3
 80022dc:	2303      	movs	r3, #3
 80022de:	4003      	ands	r3, r0
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022e4:	4809      	ldr	r0, [pc, #36]	@ (800230c <__NVIC_SetPriority+0xd8>)
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	001c      	movs	r4, r3
 80022ec:	230f      	movs	r3, #15
 80022ee:	4023      	ands	r3, r4
 80022f0:	3b08      	subs	r3, #8
 80022f2:	089b      	lsrs	r3, r3, #2
 80022f4:	430a      	orrs	r2, r1
 80022f6:	3306      	adds	r3, #6
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	18c3      	adds	r3, r0, r3
 80022fc:	3304      	adds	r3, #4
 80022fe:	601a      	str	r2, [r3, #0]
}
 8002300:	46c0      	nop			@ (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b003      	add	sp, #12
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1e5a      	subs	r2, r3, #1
 800231c:	2380      	movs	r3, #128	@ 0x80
 800231e:	045b      	lsls	r3, r3, #17
 8002320:	429a      	cmp	r2, r3
 8002322:	d301      	bcc.n	8002328 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002324:	2301      	movs	r3, #1
 8002326:	e010      	b.n	800234a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002328:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <SysTick_Config+0x44>)
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	3a01      	subs	r2, #1
 800232e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002330:	2301      	movs	r3, #1
 8002332:	425b      	negs	r3, r3
 8002334:	2103      	movs	r1, #3
 8002336:	0018      	movs	r0, r3
 8002338:	f7ff ff7c 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <SysTick_Config+0x44>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <SysTick_Config+0x44>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	b002      	add	sp, #8
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	210f      	movs	r1, #15
 8002364:	187b      	adds	r3, r7, r1
 8002366:	1c02      	adds	r2, r0, #0
 8002368:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	187b      	adds	r3, r7, r1
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b25b      	sxtb	r3, r3
 8002372:	0011      	movs	r1, r2
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	b004      	add	sp, #16
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff ffbf 	bl	8002310 <SysTick_Config>
 8002392:	0003      	movs	r3, r0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023aa:	e147      	b.n	800263c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4091      	lsls	r1, r2
 80023b6:	000a      	movs	r2, r1
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d100      	bne.n	80023c4 <HAL_GPIO_Init+0x28>
 80023c2:	e138      	b.n	8002636 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2203      	movs	r2, #3
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d005      	beq.n	80023dc <HAL_GPIO_Init+0x40>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2203      	movs	r2, #3
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d130      	bne.n	800243e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	409a      	lsls	r2, r3
 80023ea:	0013      	movs	r3, r2
 80023ec:	43da      	mvns	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	409a      	lsls	r2, r3
 80023fe:	0013      	movs	r3, r2
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002412:	2201      	movs	r2, #1
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
 8002418:	0013      	movs	r3, r2
 800241a:	43da      	mvns	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	2201      	movs	r2, #1
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2203      	movs	r2, #3
 8002444:	4013      	ands	r3, r2
 8002446:	2b03      	cmp	r3, #3
 8002448:	d017      	beq.n	800247a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	409a      	lsls	r2, r3
 8002458:	0013      	movs	r3, r2
 800245a:	43da      	mvns	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2203      	movs	r2, #3
 8002480:	4013      	ands	r3, r2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d123      	bne.n	80024ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	58d3      	ldr	r3, [r2, r3]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2207      	movs	r2, #7
 8002498:	4013      	ands	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2107      	movs	r1, #7
 80024b2:	400b      	ands	r3, r1
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	409a      	lsls	r2, r3
 80024b8:	0013      	movs	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	6939      	ldr	r1, [r7, #16]
 80024cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	43da      	mvns	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2203      	movs	r2, #3
 80024ec:	401a      	ands	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	409a      	lsls	r2, r3
 80024f4:	0013      	movs	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	23c0      	movs	r3, #192	@ 0xc0
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	4013      	ands	r3, r2
 800250c:	d100      	bne.n	8002510 <HAL_GPIO_Init+0x174>
 800250e:	e092      	b.n	8002636 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002510:	4a50      	ldr	r2, [pc, #320]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3318      	adds	r3, #24
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	589b      	ldr	r3, [r3, r2]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2203      	movs	r2, #3
 8002522:	4013      	ands	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	220f      	movs	r2, #15
 8002528:	409a      	lsls	r2, r3
 800252a:	0013      	movs	r3, r2
 800252c:	43da      	mvns	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	23a0      	movs	r3, #160	@ 0xa0
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	429a      	cmp	r2, r3
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x1ca>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a45      	ldr	r2, [pc, #276]	@ (8002658 <HAL_GPIO_Init+0x2bc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x1c6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a44      	ldr	r2, [pc, #272]	@ (800265c <HAL_GPIO_Init+0x2c0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x1c2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a43      	ldr	r2, [pc, #268]	@ (8002660 <HAL_GPIO_Init+0x2c4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x1be>
 8002556:	2303      	movs	r3, #3
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x1cc>
 800255a:	2305      	movs	r3, #5
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x1cc>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x1cc>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x1cc>
 8002566:	2300      	movs	r3, #0
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	2103      	movs	r1, #3
 800256c:	400a      	ands	r2, r1
 800256e:	00d2      	lsls	r2, r2, #3
 8002570:	4093      	lsls	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002578:	4936      	ldr	r1, [pc, #216]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3318      	adds	r3, #24
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002586:	4b33      	ldr	r3, [pc, #204]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43da      	mvns	r2, r3
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	035b      	lsls	r3, r3, #13
 800259e:	4013      	ands	r3, r2
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80025b0:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	039b      	lsls	r3, r3, #14
 80025c8:	4013      	ands	r3, r2
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025da:	4a1e      	ldr	r2, [pc, #120]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 80025dc:	2384      	movs	r3, #132	@ 0x84
 80025de:	58d3      	ldr	r3, [r2, r3]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43da      	mvns	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	2380      	movs	r3, #128	@ 0x80
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	4013      	ands	r3, r2
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002600:	4914      	ldr	r1, [pc, #80]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 8002602:	2284      	movs	r2, #132	@ 0x84
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002608:	4a12      	ldr	r2, [pc, #72]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	58d3      	ldr	r3, [r2, r3]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43da      	mvns	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	025b      	lsls	r3, r3, #9
 8002622:	4013      	ands	r3, r2
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800262e:	4909      	ldr	r1, [pc, #36]	@ (8002654 <HAL_GPIO_Init+0x2b8>)
 8002630:	2280      	movs	r2, #128	@ 0x80
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	40da      	lsrs	r2, r3
 8002644:	1e13      	subs	r3, r2, #0
 8002646:	d000      	beq.n	800264a <HAL_GPIO_Init+0x2ae>
 8002648:	e6b0      	b.n	80023ac <HAL_GPIO_Init+0x10>
  }
}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	46c0      	nop			@ (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b006      	add	sp, #24
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021800 	.word	0x40021800
 8002658:	50000400 	.word	0x50000400
 800265c:	50000800 	.word	0x50000800
 8002660:	50000c00 	.word	0x50000c00

08002664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	000a      	movs	r2, r1
 800266e:	1cbb      	adds	r3, r7, #2
 8002670:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	1cba      	adds	r2, r7, #2
 8002678:	8812      	ldrh	r2, [r2, #0]
 800267a:	4013      	ands	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800267e:	230f      	movs	r3, #15
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e003      	b.n	8002690 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002688:	230f      	movs	r3, #15
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002690:	230f      	movs	r3, #15
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	781b      	ldrb	r3, [r3, #0]
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	0008      	movs	r0, r1
 80026a8:	0011      	movs	r1, r2
 80026aa:	1cbb      	adds	r3, r7, #2
 80026ac:	1c02      	adds	r2, r0, #0
 80026ae:	801a      	strh	r2, [r3, #0]
 80026b0:	1c7b      	adds	r3, r7, #1
 80026b2:	1c0a      	adds	r2, r1, #0
 80026b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b6:	1c7b      	adds	r3, r7, #1
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026be:	1cbb      	adds	r3, r7, #2
 80026c0:	881a      	ldrh	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026c6:	e003      	b.n	80026d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026c8:	1cbb      	adds	r3, r7, #2
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026d0:	46c0      	nop			@ (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e08f      	b.n	800280a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2241      	movs	r2, #65	@ 0x41
 80026ee:	5c9b      	ldrb	r3, [r3, r2]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2240      	movs	r2, #64	@ 0x40
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	0018      	movs	r0, r3
 8002702:	f7fe fda9 	bl	8001258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2241      	movs	r2, #65	@ 0x41
 800270a:	2124      	movs	r1, #36	@ 0x24
 800270c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2101      	movs	r1, #1
 800271a:	438a      	bics	r2, r1
 800271c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	493b      	ldr	r1, [pc, #236]	@ (8002814 <HAL_I2C_Init+0x13c>)
 8002728:	400a      	ands	r2, r1
 800272a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4938      	ldr	r1, [pc, #224]	@ (8002818 <HAL_I2C_Init+0x140>)
 8002738:	400a      	ands	r2, r1
 800273a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d108      	bne.n	8002756 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2180      	movs	r1, #128	@ 0x80
 800274e:	0209      	lsls	r1, r1, #8
 8002750:	430a      	orrs	r2, r1
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	e007      	b.n	8002766 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2184      	movs	r1, #132	@ 0x84
 8002760:	0209      	lsls	r1, r1, #8
 8002762:	430a      	orrs	r2, r1
 8002764:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d109      	bne.n	8002782 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2180      	movs	r1, #128	@ 0x80
 800277a:	0109      	lsls	r1, r1, #4
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	e007      	b.n	8002792 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4923      	ldr	r1, [pc, #140]	@ (800281c <HAL_I2C_Init+0x144>)
 800278e:	400a      	ands	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4920      	ldr	r1, [pc, #128]	@ (8002820 <HAL_I2C_Init+0x148>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	491a      	ldr	r1, [pc, #104]	@ (8002818 <HAL_I2C_Init+0x140>)
 80027ae:	400a      	ands	r2, r1
 80027b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69d9      	ldr	r1, [r3, #28]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1a      	ldr	r2, [r3, #32]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2101      	movs	r1, #1
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2241      	movs	r2, #65	@ 0x41
 80027f6:	2120      	movs	r1, #32
 80027f8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2242      	movs	r2, #66	@ 0x42
 8002804:	2100      	movs	r1, #0
 8002806:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	f0ffffff 	.word	0xf0ffffff
 8002818:	ffff7fff 	.word	0xffff7fff
 800281c:	fffff7ff 	.word	0xfffff7ff
 8002820:	02008000 	.word	0x02008000

08002824 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b089      	sub	sp, #36	@ 0x24
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	0008      	movs	r0, r1
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	0019      	movs	r1, r3
 8002832:	230a      	movs	r3, #10
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	1c02      	adds	r2, r0, #0
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	2308      	movs	r3, #8
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	1c0a      	adds	r2, r1, #0
 8002840:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2241      	movs	r2, #65	@ 0x41
 8002846:	5c9b      	ldrb	r3, [r3, r2]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b20      	cmp	r3, #32
 800284c:	d000      	beq.n	8002850 <HAL_I2C_Master_Transmit+0x2c>
 800284e:	e10a      	b.n	8002a66 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2240      	movs	r2, #64	@ 0x40
 8002854:	5c9b      	ldrb	r3, [r3, r2]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_I2C_Master_Transmit+0x3a>
 800285a:	2302      	movs	r3, #2
 800285c:	e104      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x244>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2240      	movs	r2, #64	@ 0x40
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002866:	f7fe ff29 	bl	80016bc <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	0219      	lsls	r1, r3, #8
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2319      	movs	r3, #25
 800287a:	2201      	movs	r2, #1
 800287c:	f000 f91e 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002880:	1e03      	subs	r3, r0, #0
 8002882:	d001      	beq.n	8002888 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0ef      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2241      	movs	r2, #65	@ 0x41
 800288c:	2121      	movs	r1, #33	@ 0x21
 800288e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2242      	movs	r2, #66	@ 0x42
 8002894:	2110      	movs	r1, #16
 8002896:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2208      	movs	r2, #8
 80028a8:	18ba      	adds	r2, r7, r2
 80028aa:	8812      	ldrh	r2, [r2, #0]
 80028ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2bff      	cmp	r3, #255	@ 0xff
 80028bc:	d906      	bls.n	80028cc <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	22ff      	movs	r2, #255	@ 0xff
 80028c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	045b      	lsls	r3, r3, #17
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e007      	b.n	80028dc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	049b      	lsls	r3, r3, #18
 80028da:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d027      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002918:	b2db      	uxtb	r3, r3
 800291a:	3301      	adds	r3, #1
 800291c:	b2da      	uxtb	r2, r3
 800291e:	697c      	ldr	r4, [r7, #20]
 8002920:	230a      	movs	r3, #10
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	8819      	ldrh	r1, [r3, #0]
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	4b51      	ldr	r3, [pc, #324]	@ (8002a70 <HAL_I2C_Master_Transmit+0x24c>)
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	0023      	movs	r3, r4
 800292e:	f000 fa9f 	bl	8002e70 <I2C_TransferConfig>
 8002932:	e06f      	b.n	8002a14 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	b2da      	uxtb	r2, r3
 800293a:	697c      	ldr	r4, [r7, #20]
 800293c:	230a      	movs	r3, #10
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	8819      	ldrh	r1, [r3, #0]
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <HAL_I2C_Master_Transmit+0x24c>)
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	0023      	movs	r3, r4
 800294a:	f000 fa91 	bl	8002e70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800294e:	e061      	b.n	8002a14 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	0018      	movs	r0, r3
 8002958:	f000 f908 	bl	8002b6c <I2C_WaitOnTXISFlagUntilTimeout>
 800295c:	1e03      	subs	r3, r0, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e081      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03a      	beq.n	8002a14 <HAL_I2C_Master_Transmit+0x1f0>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d136      	bne.n	8002a14 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	0013      	movs	r3, r2
 80029b0:	2200      	movs	r2, #0
 80029b2:	2180      	movs	r1, #128	@ 0x80
 80029b4:	f000 f882 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e053      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2bff      	cmp	r3, #255	@ 0xff
 80029c8:	d911      	bls.n	80029ee <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	22ff      	movs	r2, #255	@ 0xff
 80029ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	2380      	movs	r3, #128	@ 0x80
 80029d8:	045c      	lsls	r4, r3, #17
 80029da:	230a      	movs	r3, #10
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	8819      	ldrh	r1, [r3, #0]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	2300      	movs	r3, #0
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	0023      	movs	r3, r4
 80029e8:	f000 fa42 	bl	8002e70 <I2C_TransferConfig>
 80029ec:	e012      	b.n	8002a14 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	2380      	movs	r3, #128	@ 0x80
 8002a00:	049c      	lsls	r4, r3, #18
 8002a02:	230a      	movs	r3, #10
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	8819      	ldrh	r1, [r3, #0]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	0023      	movs	r3, r4
 8002a10:	f000 fa2e 	bl	8002e70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d198      	bne.n	8002950 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 f8e7 	bl	8002bf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e01a      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2220      	movs	r2, #32
 8002a38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	490b      	ldr	r1, [pc, #44]	@ (8002a74 <HAL_I2C_Master_Transmit+0x250>)
 8002a46:	400a      	ands	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2241      	movs	r2, #65	@ 0x41
 8002a4e:	2120      	movs	r1, #32
 8002a50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2242      	movs	r2, #66	@ 0x42
 8002a56:	2100      	movs	r1, #0
 8002a58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2240      	movs	r2, #64	@ 0x40
 8002a5e:	2100      	movs	r1, #0
 8002a60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b007      	add	sp, #28
 8002a6e:	bd90      	pop	{r4, r7, pc}
 8002a70:	80002000 	.word	0x80002000
 8002a74:	fe00e800 	.word	0xfe00e800

08002a78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2202      	movs	r2, #2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d103      	bne.n	8002a96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d007      	beq.n	8002ab4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699a      	ldr	r2, [r3, #24]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	619a      	str	r2, [r3, #24]
  }
}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	1dfb      	adds	r3, r7, #7
 8002aca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002acc:	e03a      	b.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 f8d3 	bl	8002c80 <I2C_IsErrorOccurred>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d001      	beq.n	8002ae2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e040      	b.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	d02d      	beq.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae8:	f7fe fde8 	bl	80016bc <HAL_GetTick>
 8002aec:	0002      	movs	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d302      	bcc.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x42>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d122      	bne.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	4013      	ands	r3, r2
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	425a      	negs	r2, r3
 8002b0e:	4153      	adcs	r3, r2
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	001a      	movs	r2, r3
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d113      	bne.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	2220      	movs	r2, #32
 8002b22:	431a      	orrs	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2241      	movs	r2, #65	@ 0x41
 8002b2c:	2120      	movs	r1, #32
 8002b2e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2242      	movs	r2, #66	@ 0x42
 8002b34:	2100      	movs	r1, #0
 8002b36:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2240      	movs	r2, #64	@ 0x40
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e00f      	b.n	8002b64 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	425a      	negs	r2, r3
 8002b54:	4153      	adcs	r3, r2
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	001a      	movs	r2, r3
 8002b5a:	1dfb      	adds	r3, r7, #7
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d0b5      	beq.n	8002ace <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b78:	e032      	b.n	8002be0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f87d 	bl	8002c80 <I2C_IsErrorOccurred>
 8002b86:	1e03      	subs	r3, r0, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e030      	b.n	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3301      	adds	r3, #1
 8002b92:	d025      	beq.n	8002be0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b94:	f7fe fd92 	bl	80016bc <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d302      	bcc.n	8002baa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d11a      	bne.n	8002be0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d013      	beq.n	8002be0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2241      	movs	r2, #65	@ 0x41
 8002bc8:	2120      	movs	r1, #32
 8002bca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2242      	movs	r2, #66	@ 0x42
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2240      	movs	r2, #64	@ 0x40
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e007      	b.n	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d1c5      	bne.n	8002b7a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b004      	add	sp, #16
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c04:	e02f      	b.n	8002c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 f837 	bl	8002c80 <I2C_IsErrorOccurred>
 8002c12:	1e03      	subs	r3, r0, #0
 8002c14:	d001      	beq.n	8002c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e02d      	b.n	8002c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1a:	f7fe fd4f 	bl	80016bc <HAL_GetTick>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d11a      	bne.n	8002c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2220      	movs	r2, #32
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d013      	beq.n	8002c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c42:	2220      	movs	r2, #32
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2241      	movs	r2, #65	@ 0x41
 8002c4e:	2120      	movs	r1, #32
 8002c50:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2242      	movs	r2, #66	@ 0x42
 8002c56:	2100      	movs	r1, #0
 8002c58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2240      	movs	r2, #64	@ 0x40
 8002c5e:	2100      	movs	r1, #0
 8002c60:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e007      	b.n	8002c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d1c8      	bne.n	8002c06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	0018      	movs	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b004      	add	sp, #16
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	@ 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2327      	movs	r3, #39	@ 0x27
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d100      	bne.n	8002cae <I2C_IsErrorOccurred+0x2e>
 8002cac:	e079      	b.n	8002da2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cb6:	e057      	b.n	8002d68 <I2C_IsErrorOccurred+0xe8>
 8002cb8:	2227      	movs	r2, #39	@ 0x27
 8002cba:	18bb      	adds	r3, r7, r2
 8002cbc:	18ba      	adds	r2, r7, r2
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	d04f      	beq.n	8002d68 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cc8:	f7fe fcf8 	bl	80016bc <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d302      	bcc.n	8002cde <I2C_IsErrorOccurred+0x5e>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d144      	bne.n	8002d68 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	2380      	movs	r3, #128	@ 0x80
 8002ce6:	01db      	lsls	r3, r3, #7
 8002ce8:	4013      	ands	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cec:	2013      	movs	r0, #19
 8002cee:	183b      	adds	r3, r7, r0
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	2142      	movs	r1, #66	@ 0x42
 8002cf4:	5c52      	ldrb	r2, [r2, r1]
 8002cf6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	2380      	movs	r3, #128	@ 0x80
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	401a      	ands	r2, r3
 8002d04:	2380      	movs	r3, #128	@ 0x80
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d126      	bne.n	8002d5a <I2C_IsErrorOccurred+0xda>
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	01db      	lsls	r3, r3, #7
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d021      	beq.n	8002d5a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002d16:	183b      	adds	r3, r7, r0
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d01d      	beq.n	8002d5a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2180      	movs	r1, #128	@ 0x80
 8002d2a:	01c9      	lsls	r1, r1, #7
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d30:	f7fe fcc4 	bl	80016bc <HAL_GetTick>
 8002d34:	0003      	movs	r3, r0
 8002d36:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d38:	e00f      	b.n	8002d5a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d3a:	f7fe fcbf 	bl	80016bc <HAL_GetTick>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b19      	cmp	r3, #25
 8002d46:	d908      	bls.n	8002d5a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d50:	2327      	movs	r3, #39	@ 0x27
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]

              break;
 8002d58:	e006      	b.n	8002d68 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2220      	movs	r2, #32
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d1e8      	bne.n	8002d3a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d004      	beq.n	8002d80 <I2C_IsErrorOccurred+0x100>
 8002d76:	2327      	movs	r3, #39	@ 0x27
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d09b      	beq.n	8002cb8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d80:	2327      	movs	r3, #39	@ 0x27
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	2204      	movs	r2, #4
 8002d96:	4313      	orrs	r3, r2
 8002d98:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d9a:	2327      	movs	r3, #39	@ 0x27
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	2380      	movs	r3, #128	@ 0x80
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4013      	ands	r3, r2
 8002db2:	d00c      	beq.n	8002dce <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	2201      	movs	r2, #1
 8002db8:	4313      	orrs	r3, r2
 8002dba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2280      	movs	r2, #128	@ 0x80
 8002dc2:	0052      	lsls	r2, r2, #1
 8002dc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dc6:	2327      	movs	r3, #39	@ 0x27
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d00c      	beq.n	8002df2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	2208      	movs	r2, #8
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	00d2      	lsls	r2, r2, #3
 8002de8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dea:	2327      	movs	r3, #39	@ 0x27
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2201      	movs	r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	2380      	movs	r3, #128	@ 0x80
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d00c      	beq.n	8002e16 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4313      	orrs	r3, r2
 8002e02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2280      	movs	r2, #128	@ 0x80
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e0e:	2327      	movs	r3, #39	@ 0x27
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002e16:	2327      	movs	r3, #39	@ 0x27
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01d      	beq.n	8002e5c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff fe28 	bl	8002a78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	490e      	ldr	r1, [pc, #56]	@ (8002e6c <I2C_IsErrorOccurred+0x1ec>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2241      	movs	r2, #65	@ 0x41
 8002e48:	2120      	movs	r1, #32
 8002e4a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2242      	movs	r2, #66	@ 0x42
 8002e50:	2100      	movs	r1, #0
 8002e52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2240      	movs	r2, #64	@ 0x40
 8002e58:	2100      	movs	r1, #0
 8002e5a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002e5c:	2327      	movs	r3, #39	@ 0x27
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	781b      	ldrb	r3, [r3, #0]
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b00a      	add	sp, #40	@ 0x28
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	fe00e800 	.word	0xfe00e800

08002e70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	0008      	movs	r0, r1
 8002e7a:	0011      	movs	r1, r2
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	240a      	movs	r4, #10
 8002e80:	193b      	adds	r3, r7, r4
 8002e82:	1c02      	adds	r2, r0, #0
 8002e84:	801a      	strh	r2, [r3, #0]
 8002e86:	2009      	movs	r0, #9
 8002e88:	183b      	adds	r3, r7, r0
 8002e8a:	1c0a      	adds	r2, r1, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e8e:	193b      	adds	r3, r7, r4
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	059b      	lsls	r3, r3, #22
 8002e94:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e96:	183b      	adds	r3, r7, r0
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	0419      	lsls	r1, r3, #16
 8002e9c:	23ff      	movs	r3, #255	@ 0xff
 8002e9e:	041b      	lsls	r3, r3, #16
 8002ea0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ea2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	085b      	lsrs	r3, r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eba:	0d51      	lsrs	r1, r2, #21
 8002ebc:	2280      	movs	r2, #128	@ 0x80
 8002ebe:	00d2      	lsls	r2, r2, #3
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	4907      	ldr	r1, [pc, #28]	@ (8002ee0 <I2C_TransferConfig+0x70>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	43d2      	mvns	r2, r2
 8002ec8:	401a      	ands	r2, r3
 8002eca:	0011      	movs	r1, r2
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b007      	add	sp, #28
 8002edc:	bd90      	pop	{r4, r7, pc}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	03ff63ff 	.word	0x03ff63ff

08002ee4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2241      	movs	r2, #65	@ 0x41
 8002ef2:	5c9b      	ldrb	r3, [r3, r2]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d138      	bne.n	8002f6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2240      	movs	r2, #64	@ 0x40
 8002efe:	5c9b      	ldrb	r3, [r3, r2]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e032      	b.n	8002f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2240      	movs	r2, #64	@ 0x40
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2241      	movs	r2, #65	@ 0x41
 8002f14:	2124      	movs	r1, #36	@ 0x24
 8002f16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2101      	movs	r1, #1
 8002f24:	438a      	bics	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4911      	ldr	r1, [pc, #68]	@ (8002f78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f34:	400a      	ands	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2101      	movs	r1, #1
 8002f54:	430a      	orrs	r2, r1
 8002f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2241      	movs	r2, #65	@ 0x41
 8002f5c:	2120      	movs	r1, #32
 8002f5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2240      	movs	r2, #64	@ 0x40
 8002f64:	2100      	movs	r1, #0
 8002f66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e000      	b.n	8002f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
  }
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b002      	add	sp, #8
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	ffffefff 	.word	0xffffefff

08002f7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2241      	movs	r2, #65	@ 0x41
 8002f8a:	5c9b      	ldrb	r3, [r3, r2]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d139      	bne.n	8003006 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2240      	movs	r2, #64	@ 0x40
 8002f96:	5c9b      	ldrb	r3, [r3, r2]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e033      	b.n	8003008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2240      	movs	r2, #64	@ 0x40
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2241      	movs	r2, #65	@ 0x41
 8002fac:	2124      	movs	r1, #36	@ 0x24
 8002fae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2101      	movs	r1, #1
 8002fbc:	438a      	bics	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4a11      	ldr	r2, [pc, #68]	@ (8003010 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2101      	movs	r1, #1
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2241      	movs	r2, #65	@ 0x41
 8002ff6:	2120      	movs	r1, #32
 8002ff8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2240      	movs	r2, #64	@ 0x40
 8002ffe:	2100      	movs	r1, #0
 8003000:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b004      	add	sp, #16
 800300e:	bd80      	pop	{r7, pc}
 8003010:	fffff0ff 	.word	0xfffff0ff

08003014 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800301c:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a19      	ldr	r2, [pc, #100]	@ (8003088 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	4b17      	ldr	r3, [pc, #92]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d11f      	bne.n	8003078 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	0013      	movs	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	189b      	adds	r3, r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4912      	ldr	r1, [pc, #72]	@ (8003090 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003046:	0018      	movs	r0, r3
 8003048:	f7fd f86e 	bl	8000128 <__udivsi3>
 800304c:	0003      	movs	r3, r0
 800304e:	3301      	adds	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003052:	e008      	b.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3b01      	subs	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e001      	b.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e009      	b.n	800307a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003066:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	401a      	ands	r2, r3
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	429a      	cmp	r2, r3
 8003076:	d0ed      	beq.n	8003054 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	b004      	add	sp, #16
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	40007000 	.word	0x40007000
 8003088:	fffff9ff 	.word	0xfffff9ff
 800308c:	20000010 	.word	0x20000010
 8003090:	000f4240 	.word	0x000f4240

08003094 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003098:	4b03      	ldr	r3, [pc, #12]	@ (80030a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	23e0      	movs	r3, #224	@ 0xe0
 800309e:	01db      	lsls	r3, r3, #7
 80030a0:	4013      	ands	r3, r2
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000

080030ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e2fe      	b.n	80036bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2201      	movs	r2, #1
 80030c4:	4013      	ands	r3, r2
 80030c6:	d100      	bne.n	80030ca <HAL_RCC_OscConfig+0x1e>
 80030c8:	e07c      	b.n	80031c4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ca:	4bc3      	ldr	r3, [pc, #780]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2238      	movs	r2, #56	@ 0x38
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d4:	4bc0      	ldr	r3, [pc, #768]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2203      	movs	r2, #3
 80030da:	4013      	ands	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d102      	bne.n	80030ea <HAL_RCC_OscConfig+0x3e>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d002      	beq.n	80030f0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d10b      	bne.n	8003108 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	4bb9      	ldr	r3, [pc, #740]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	2380      	movs	r3, #128	@ 0x80
 80030f6:	029b      	lsls	r3, r3, #10
 80030f8:	4013      	ands	r3, r2
 80030fa:	d062      	beq.n	80031c2 <HAL_RCC_OscConfig+0x116>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d15e      	bne.n	80031c2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e2d9      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	2380      	movs	r3, #128	@ 0x80
 800310e:	025b      	lsls	r3, r3, #9
 8003110:	429a      	cmp	r2, r3
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x78>
 8003114:	4bb0      	ldr	r3, [pc, #704]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4baf      	ldr	r3, [pc, #700]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800311a:	2180      	movs	r1, #128	@ 0x80
 800311c:	0249      	lsls	r1, r1, #9
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e020      	b.n	8003166 <HAL_RCC_OscConfig+0xba>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	23a0      	movs	r3, #160	@ 0xa0
 800312a:	02db      	lsls	r3, r3, #11
 800312c:	429a      	cmp	r2, r3
 800312e:	d10e      	bne.n	800314e <HAL_RCC_OscConfig+0xa2>
 8003130:	4ba9      	ldr	r3, [pc, #676]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4ba8      	ldr	r3, [pc, #672]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003136:	2180      	movs	r1, #128	@ 0x80
 8003138:	02c9      	lsls	r1, r1, #11
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	4ba6      	ldr	r3, [pc, #664]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4ba5      	ldr	r3, [pc, #660]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003144:	2180      	movs	r1, #128	@ 0x80
 8003146:	0249      	lsls	r1, r1, #9
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0xba>
 800314e:	4ba2      	ldr	r3, [pc, #648]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4ba1      	ldr	r3, [pc, #644]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003154:	49a1      	ldr	r1, [pc, #644]	@ (80033dc <HAL_RCC_OscConfig+0x330>)
 8003156:	400a      	ands	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	4b9f      	ldr	r3, [pc, #636]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b9e      	ldr	r3, [pc, #632]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003160:	499f      	ldr	r1, [pc, #636]	@ (80033e0 <HAL_RCC_OscConfig+0x334>)
 8003162:	400a      	ands	r2, r1
 8003164:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d014      	beq.n	8003198 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fe faa5 	bl	80016bc <HAL_GetTick>
 8003172:	0003      	movs	r3, r0
 8003174:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003178:	f7fe faa0 	bl	80016bc <HAL_GetTick>
 800317c:	0002      	movs	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	@ 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e298      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318a:	4b93      	ldr	r3, [pc, #588]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	029b      	lsls	r3, r3, #10
 8003192:	4013      	ands	r3, r2
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0xcc>
 8003196:	e015      	b.n	80031c4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe fa90 	bl	80016bc <HAL_GetTick>
 800319c:	0003      	movs	r3, r0
 800319e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a2:	f7fe fa8b 	bl	80016bc <HAL_GetTick>
 80031a6:	0002      	movs	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b64      	cmp	r3, #100	@ 0x64
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e283      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031b4:	4b88      	ldr	r3, [pc, #544]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	2380      	movs	r3, #128	@ 0x80
 80031ba:	029b      	lsls	r3, r3, #10
 80031bc:	4013      	ands	r3, r2
 80031be:	d1f0      	bne.n	80031a2 <HAL_RCC_OscConfig+0xf6>
 80031c0:	e000      	b.n	80031c4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2202      	movs	r2, #2
 80031ca:	4013      	ands	r3, r2
 80031cc:	d100      	bne.n	80031d0 <HAL_RCC_OscConfig+0x124>
 80031ce:	e099      	b.n	8003304 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d0:	4b81      	ldr	r3, [pc, #516]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2238      	movs	r2, #56	@ 0x38
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031da:	4b7f      	ldr	r3, [pc, #508]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2203      	movs	r2, #3
 80031e0:	4013      	ands	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d102      	bne.n	80031f0 <HAL_RCC_OscConfig+0x144>
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d002      	beq.n	80031f6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d135      	bne.n	8003262 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f6:	4b78      	ldr	r3, [pc, #480]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	2380      	movs	r3, #128	@ 0x80
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4013      	ands	r3, r2
 8003200:	d005      	beq.n	800320e <HAL_RCC_OscConfig+0x162>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e256      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320e:	4b72      	ldr	r3, [pc, #456]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4a74      	ldr	r2, [pc, #464]	@ (80033e4 <HAL_RCC_OscConfig+0x338>)
 8003214:	4013      	ands	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	021a      	lsls	r2, r3, #8
 800321e:	4b6e      	ldr	r3, [pc, #440]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d112      	bne.n	8003250 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800322a:	4b6b      	ldr	r3, [pc, #428]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6e      	ldr	r2, [pc, #440]	@ (80033e8 <HAL_RCC_OscConfig+0x33c>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	4b67      	ldr	r3, [pc, #412]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800323e:	4b66      	ldr	r3, [pc, #408]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0adb      	lsrs	r3, r3, #11
 8003244:	2207      	movs	r2, #7
 8003246:	4013      	ands	r3, r2
 8003248:	4a68      	ldr	r2, [pc, #416]	@ (80033ec <HAL_RCC_OscConfig+0x340>)
 800324a:	40da      	lsrs	r2, r3
 800324c:	4b68      	ldr	r3, [pc, #416]	@ (80033f0 <HAL_RCC_OscConfig+0x344>)
 800324e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003250:	4b68      	ldr	r3, [pc, #416]	@ (80033f4 <HAL_RCC_OscConfig+0x348>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0018      	movs	r0, r3
 8003256:	f7fe f9d5 	bl	8001604 <HAL_InitTick>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d051      	beq.n	8003302 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e22c      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d030      	beq.n	80032cc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800326a:	4b5b      	ldr	r3, [pc, #364]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a5e      	ldr	r2, [pc, #376]	@ (80033e8 <HAL_RCC_OscConfig+0x33c>)
 8003270:	4013      	ands	r3, r2
 8003272:	0019      	movs	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	4b57      	ldr	r3, [pc, #348]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800327a:	430a      	orrs	r2, r1
 800327c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800327e:	4b56      	ldr	r3, [pc, #344]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b55      	ldr	r3, [pc, #340]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003284:	2180      	movs	r1, #128	@ 0x80
 8003286:	0049      	lsls	r1, r1, #1
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fa16 	bl	80016bc <HAL_GetTick>
 8003290:	0003      	movs	r3, r0
 8003292:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003296:	f7fe fa11 	bl	80016bc <HAL_GetTick>
 800329a:	0002      	movs	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e209      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a8:	4b4b      	ldr	r3, [pc, #300]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4013      	ands	r3, r2
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b48      	ldr	r3, [pc, #288]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a4a      	ldr	r2, [pc, #296]	@ (80033e4 <HAL_RCC_OscConfig+0x338>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	0019      	movs	r1, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	021a      	lsls	r2, r3, #8
 80032c4:	4b44      	ldr	r3, [pc, #272]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	e01b      	b.n	8003304 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80032cc:	4b42      	ldr	r3, [pc, #264]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b41      	ldr	r3, [pc, #260]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80032d2:	4949      	ldr	r1, [pc, #292]	@ (80033f8 <HAL_RCC_OscConfig+0x34c>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7fe f9f0 	bl	80016bc <HAL_GetTick>
 80032dc:	0003      	movs	r3, r0
 80032de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e2:	f7fe f9eb 	bl	80016bc <HAL_GetTick>
 80032e6:	0002      	movs	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1e3      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032f4:	4b38      	ldr	r3, [pc, #224]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2380      	movs	r3, #128	@ 0x80
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4013      	ands	r3, r2
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x236>
 8003300:	e000      	b.n	8003304 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003302:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2208      	movs	r2, #8
 800330a:	4013      	ands	r3, r2
 800330c:	d047      	beq.n	800339e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800330e:	4b32      	ldr	r3, [pc, #200]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2238      	movs	r2, #56	@ 0x38
 8003314:	4013      	ands	r3, r2
 8003316:	2b18      	cmp	r3, #24
 8003318:	d10a      	bne.n	8003330 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800331a:	4b2f      	ldr	r3, [pc, #188]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800331c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331e:	2202      	movs	r2, #2
 8003320:	4013      	ands	r3, r2
 8003322:	d03c      	beq.n	800339e <HAL_RCC_OscConfig+0x2f2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d138      	bne.n	800339e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e1c5      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d019      	beq.n	800336c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003338:	4b27      	ldr	r3, [pc, #156]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800333a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800333c:	4b26      	ldr	r3, [pc, #152]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800333e:	2101      	movs	r1, #1
 8003340:	430a      	orrs	r2, r1
 8003342:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe f9ba 	bl	80016bc <HAL_GetTick>
 8003348:	0003      	movs	r3, r0
 800334a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334e:	f7fe f9b5 	bl	80016bc <HAL_GetTick>
 8003352:	0002      	movs	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1ad      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003360:	4b1d      	ldr	r3, [pc, #116]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003364:	2202      	movs	r2, #2
 8003366:	4013      	ands	r3, r2
 8003368:	d0f1      	beq.n	800334e <HAL_RCC_OscConfig+0x2a2>
 800336a:	e018      	b.n	800339e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800336c:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 800336e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003370:	4b19      	ldr	r3, [pc, #100]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003372:	2101      	movs	r1, #1
 8003374:	438a      	bics	r2, r1
 8003376:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe f9a0 	bl	80016bc <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003382:	f7fe f99b 	bl	80016bc <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e193      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003394:	4b10      	ldr	r3, [pc, #64]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 8003396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003398:	2202      	movs	r2, #2
 800339a:	4013      	ands	r3, r2
 800339c:	d1f1      	bne.n	8003382 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2204      	movs	r2, #4
 80033a4:	4013      	ands	r3, r2
 80033a6:	d100      	bne.n	80033aa <HAL_RCC_OscConfig+0x2fe>
 80033a8:	e0c6      	b.n	8003538 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	231f      	movs	r3, #31
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80033b2:	4b09      	ldr	r3, [pc, #36]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2238      	movs	r2, #56	@ 0x38
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d11e      	bne.n	80033fc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80033be:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <HAL_RCC_OscConfig+0x32c>)
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	2202      	movs	r2, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	d100      	bne.n	80033ca <HAL_RCC_OscConfig+0x31e>
 80033c8:	e0b6      	b.n	8003538 <HAL_RCC_OscConfig+0x48c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d000      	beq.n	80033d4 <HAL_RCC_OscConfig+0x328>
 80033d2:	e0b1      	b.n	8003538 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e171      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
 80033d8:	40021000 	.word	0x40021000
 80033dc:	fffeffff 	.word	0xfffeffff
 80033e0:	fffbffff 	.word	0xfffbffff
 80033e4:	ffff80ff 	.word	0xffff80ff
 80033e8:	ffffc7ff 	.word	0xffffc7ff
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	20000010 	.word	0x20000010
 80033f4:	20000014 	.word	0x20000014
 80033f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033fc:	4bb1      	ldr	r3, [pc, #708]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80033fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003400:	2380      	movs	r3, #128	@ 0x80
 8003402:	055b      	lsls	r3, r3, #21
 8003404:	4013      	ands	r3, r2
 8003406:	d101      	bne.n	800340c <HAL_RCC_OscConfig+0x360>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x362>
 800340c:	2300      	movs	r3, #0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d011      	beq.n	8003436 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	4bac      	ldr	r3, [pc, #688]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003416:	4bab      	ldr	r3, [pc, #684]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003418:	2180      	movs	r1, #128	@ 0x80
 800341a:	0549      	lsls	r1, r1, #21
 800341c:	430a      	orrs	r2, r1
 800341e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003420:	4ba8      	ldr	r3, [pc, #672]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003422:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	055b      	lsls	r3, r3, #21
 8003428:	4013      	ands	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800342e:	231f      	movs	r3, #31
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003436:	4ba4      	ldr	r3, [pc, #656]	@ (80036c8 <HAL_RCC_OscConfig+0x61c>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4013      	ands	r3, r2
 8003440:	d11a      	bne.n	8003478 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003442:	4ba1      	ldr	r3, [pc, #644]	@ (80036c8 <HAL_RCC_OscConfig+0x61c>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4ba0      	ldr	r3, [pc, #640]	@ (80036c8 <HAL_RCC_OscConfig+0x61c>)
 8003448:	2180      	movs	r1, #128	@ 0x80
 800344a:	0049      	lsls	r1, r1, #1
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003450:	f7fe f934 	bl	80016bc <HAL_GetTick>
 8003454:	0003      	movs	r3, r0
 8003456:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345a:	f7fe f92f 	bl	80016bc <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e127      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346c:	4b96      	ldr	r3, [pc, #600]	@ (80036c8 <HAL_RCC_OscConfig+0x61c>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	2380      	movs	r3, #128	@ 0x80
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4013      	ands	r3, r2
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x3e2>
 8003480:	4b90      	ldr	r3, [pc, #576]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003482:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003484:	4b8f      	ldr	r3, [pc, #572]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003486:	2101      	movs	r1, #1
 8003488:	430a      	orrs	r2, r1
 800348a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800348c:	e01c      	b.n	80034c8 <HAL_RCC_OscConfig+0x41c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b05      	cmp	r3, #5
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x404>
 8003496:	4b8b      	ldr	r3, [pc, #556]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003498:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800349a:	4b8a      	ldr	r3, [pc, #552]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 800349c:	2104      	movs	r1, #4
 800349e:	430a      	orrs	r2, r1
 80034a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034a2:	4b88      	ldr	r3, [pc, #544]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80034a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034a6:	4b87      	ldr	r3, [pc, #540]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80034a8:	2101      	movs	r1, #1
 80034aa:	430a      	orrs	r2, r1
 80034ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_OscConfig+0x41c>
 80034b0:	4b84      	ldr	r3, [pc, #528]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80034b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034b4:	4b83      	ldr	r3, [pc, #524]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80034b6:	2101      	movs	r1, #1
 80034b8:	438a      	bics	r2, r1
 80034ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034bc:	4b81      	ldr	r3, [pc, #516]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80034be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034c0:	4b80      	ldr	r3, [pc, #512]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80034c2:	2104      	movs	r1, #4
 80034c4:	438a      	bics	r2, r1
 80034c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d014      	beq.n	80034fa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe f8f4 	bl	80016bc <HAL_GetTick>
 80034d4:	0003      	movs	r3, r0
 80034d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d8:	e009      	b.n	80034ee <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034da:	f7fe f8ef 	bl	80016bc <HAL_GetTick>
 80034de:	0002      	movs	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	4a79      	ldr	r2, [pc, #484]	@ (80036cc <HAL_RCC_OscConfig+0x620>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0e6      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ee:	4b75      	ldr	r3, [pc, #468]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	2202      	movs	r2, #2
 80034f4:	4013      	ands	r3, r2
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_OscConfig+0x42e>
 80034f8:	e013      	b.n	8003522 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fa:	f7fe f8df 	bl	80016bc <HAL_GetTick>
 80034fe:	0003      	movs	r3, r0
 8003500:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003502:	e009      	b.n	8003518 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fe f8da 	bl	80016bc <HAL_GetTick>
 8003508:	0002      	movs	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4a6f      	ldr	r2, [pc, #444]	@ (80036cc <HAL_RCC_OscConfig+0x620>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e0d1      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003518:	4b6a      	ldr	r3, [pc, #424]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 800351a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351c:	2202      	movs	r2, #2
 800351e:	4013      	ands	r3, r2
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003522:	231f      	movs	r3, #31
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4b65      	ldr	r3, [pc, #404]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 800352e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003530:	4b64      	ldr	r3, [pc, #400]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003532:	4967      	ldr	r1, [pc, #412]	@ (80036d0 <HAL_RCC_OscConfig+0x624>)
 8003534:	400a      	ands	r2, r1
 8003536:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d100      	bne.n	8003542 <HAL_RCC_OscConfig+0x496>
 8003540:	e0bb      	b.n	80036ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003542:	4b60      	ldr	r3, [pc, #384]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2238      	movs	r2, #56	@ 0x38
 8003548:	4013      	ands	r3, r2
 800354a:	2b10      	cmp	r3, #16
 800354c:	d100      	bne.n	8003550 <HAL_RCC_OscConfig+0x4a4>
 800354e:	e07b      	b.n	8003648 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	2b02      	cmp	r3, #2
 8003556:	d156      	bne.n	8003606 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003558:	4b5a      	ldr	r3, [pc, #360]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b59      	ldr	r3, [pc, #356]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 800355e:	495d      	ldr	r1, [pc, #372]	@ (80036d4 <HAL_RCC_OscConfig+0x628>)
 8003560:	400a      	ands	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe f8aa 	bl	80016bc <HAL_GetTick>
 8003568:	0003      	movs	r3, r0
 800356a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356e:	f7fe f8a5 	bl	80016bc <HAL_GetTick>
 8003572:	0002      	movs	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e09d      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003580:	4b50      	ldr	r3, [pc, #320]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	049b      	lsls	r3, r3, #18
 8003588:	4013      	ands	r3, r2
 800358a:	d1f0      	bne.n	800356e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800358c:	4b4d      	ldr	r3, [pc, #308]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a51      	ldr	r2, [pc, #324]	@ (80036d8 <HAL_RCC_OscConfig+0x62c>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1a      	ldr	r2, [r3, #32]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b8:	431a      	orrs	r2, r3
 80035ba:	4b42      	ldr	r3, [pc, #264]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80035bc:	430a      	orrs	r2, r1
 80035be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c0:	4b40      	ldr	r3, [pc, #256]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b3f      	ldr	r3, [pc, #252]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80035c6:	2180      	movs	r1, #128	@ 0x80
 80035c8:	0449      	lsls	r1, r1, #17
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80035ce:	4b3d      	ldr	r3, [pc, #244]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	4b3c      	ldr	r3, [pc, #240]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80035d4:	2180      	movs	r1, #128	@ 0x80
 80035d6:	0549      	lsls	r1, r1, #21
 80035d8:	430a      	orrs	r2, r1
 80035da:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe f86e 	bl	80016bc <HAL_GetTick>
 80035e0:	0003      	movs	r3, r0
 80035e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe f869 	bl	80016bc <HAL_GetTick>
 80035ea:	0002      	movs	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e061      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f8:	4b32      	ldr	r3, [pc, #200]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2380      	movs	r3, #128	@ 0x80
 80035fe:	049b      	lsls	r3, r3, #18
 8003600:	4013      	ands	r3, r2
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x53a>
 8003604:	e059      	b.n	80036ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003606:	4b2f      	ldr	r3, [pc, #188]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4b2e      	ldr	r3, [pc, #184]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 800360c:	4931      	ldr	r1, [pc, #196]	@ (80036d4 <HAL_RCC_OscConfig+0x628>)
 800360e:	400a      	ands	r2, r1
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fe f853 	bl	80016bc <HAL_GetTick>
 8003616:	0003      	movs	r3, r0
 8003618:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361c:	f7fe f84e 	bl	80016bc <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e046      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800362e:	4b25      	ldr	r3, [pc, #148]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	2380      	movs	r3, #128	@ 0x80
 8003634:	049b      	lsls	r3, r3, #18
 8003636:	4013      	ands	r3, r2
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800363a:	4b22      	ldr	r3, [pc, #136]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003640:	4926      	ldr	r1, [pc, #152]	@ (80036dc <HAL_RCC_OscConfig+0x630>)
 8003642:	400a      	ands	r2, r1
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	e038      	b.n	80036ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e033      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003654:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <HAL_RCC_OscConfig+0x618>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2203      	movs	r2, #3
 800365e:	401a      	ands	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	429a      	cmp	r2, r3
 8003666:	d126      	bne.n	80036b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2270      	movs	r2, #112	@ 0x70
 800366c:	401a      	ands	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d11f      	bne.n	80036b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	23fe      	movs	r3, #254	@ 0xfe
 800367a:	01db      	lsls	r3, r3, #7
 800367c:	401a      	ands	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003682:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d116      	bne.n	80036b6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	23f8      	movs	r3, #248	@ 0xf8
 800368c:	039b      	lsls	r3, r3, #14
 800368e:	401a      	ands	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d10e      	bne.n	80036b6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	23e0      	movs	r3, #224	@ 0xe0
 800369c:	051b      	lsls	r3, r3, #20
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	0f5b      	lsrs	r3, r3, #29
 80036ac:	075a      	lsls	r2, r3, #29
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b008      	add	sp, #32
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40007000 	.word	0x40007000
 80036cc:	00001388 	.word	0x00001388
 80036d0:	efffffff 	.word	0xefffffff
 80036d4:	feffffff 	.word	0xfeffffff
 80036d8:	11c1808c 	.word	0x11c1808c
 80036dc:	eefefffc 	.word	0xeefefffc

080036e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0e9      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f4:	4b76      	ldr	r3, [pc, #472]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2207      	movs	r2, #7
 80036fa:	4013      	ands	r3, r2
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d91e      	bls.n	8003740 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b73      	ldr	r3, [pc, #460]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2207      	movs	r2, #7
 8003708:	4393      	bics	r3, r2
 800370a:	0019      	movs	r1, r3
 800370c:	4b70      	ldr	r3, [pc, #448]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003714:	f7fd ffd2 	bl	80016bc <HAL_GetTick>
 8003718:	0003      	movs	r3, r0
 800371a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800371c:	e009      	b.n	8003732 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371e:	f7fd ffcd 	bl	80016bc <HAL_GetTick>
 8003722:	0002      	movs	r2, r0
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	4a6a      	ldr	r2, [pc, #424]	@ (80038d4 <HAL_RCC_ClockConfig+0x1f4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0ca      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003732:	4b67      	ldr	r3, [pc, #412]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2207      	movs	r2, #7
 8003738:	4013      	ands	r3, r2
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d1ee      	bne.n	800371e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2202      	movs	r2, #2
 8003746:	4013      	ands	r3, r2
 8003748:	d015      	beq.n	8003776 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2204      	movs	r2, #4
 8003750:	4013      	ands	r3, r2
 8003752:	d006      	beq.n	8003762 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003754:	4b60      	ldr	r3, [pc, #384]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	4b5f      	ldr	r3, [pc, #380]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 800375a:	21e0      	movs	r1, #224	@ 0xe0
 800375c:	01c9      	lsls	r1, r1, #7
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003762:	4b5d      	ldr	r3, [pc, #372]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	4a5d      	ldr	r2, [pc, #372]	@ (80038dc <HAL_RCC_ClockConfig+0x1fc>)
 8003768:	4013      	ands	r3, r2
 800376a:	0019      	movs	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	4b59      	ldr	r3, [pc, #356]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	4013      	ands	r3, r2
 800377e:	d057      	beq.n	8003830 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d107      	bne.n	8003798 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003788:	4b53      	ldr	r3, [pc, #332]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	2380      	movs	r3, #128	@ 0x80
 800378e:	029b      	lsls	r3, r3, #10
 8003790:	4013      	ands	r3, r2
 8003792:	d12b      	bne.n	80037ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e097      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d107      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a0:	4b4d      	ldr	r3, [pc, #308]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	049b      	lsls	r3, r3, #18
 80037a8:	4013      	ands	r3, r2
 80037aa:	d11f      	bne.n	80037ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e08b      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b8:	4b47      	ldr	r3, [pc, #284]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	2380      	movs	r3, #128	@ 0x80
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4013      	ands	r3, r2
 80037c2:	d113      	bne.n	80037ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e07f      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d106      	bne.n	80037de <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d0:	4b41      	ldr	r3, [pc, #260]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 80037d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d4:	2202      	movs	r2, #2
 80037d6:	4013      	ands	r3, r2
 80037d8:	d108      	bne.n	80037ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e074      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037de:	4b3e      	ldr	r3, [pc, #248]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	2202      	movs	r2, #2
 80037e4:	4013      	ands	r3, r2
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e06d      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037ec:	4b3a      	ldr	r3, [pc, #232]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2207      	movs	r2, #7
 80037f2:	4393      	bics	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	4b37      	ldr	r3, [pc, #220]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003800:	f7fd ff5c 	bl	80016bc <HAL_GetTick>
 8003804:	0003      	movs	r3, r0
 8003806:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003808:	e009      	b.n	800381e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380a:	f7fd ff57 	bl	80016bc <HAL_GetTick>
 800380e:	0002      	movs	r2, r0
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	4a2f      	ldr	r2, [pc, #188]	@ (80038d4 <HAL_RCC_ClockConfig+0x1f4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e054      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	4b2e      	ldr	r3, [pc, #184]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2238      	movs	r2, #56	@ 0x38
 8003824:	401a      	ands	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	429a      	cmp	r2, r3
 800382e:	d1ec      	bne.n	800380a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003830:	4b27      	ldr	r3, [pc, #156]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2207      	movs	r2, #7
 8003836:	4013      	ands	r3, r2
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d21e      	bcs.n	800387c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b24      	ldr	r3, [pc, #144]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2207      	movs	r2, #7
 8003844:	4393      	bics	r3, r2
 8003846:	0019      	movs	r1, r3
 8003848:	4b21      	ldr	r3, [pc, #132]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003850:	f7fd ff34 	bl	80016bc <HAL_GetTick>
 8003854:	0003      	movs	r3, r0
 8003856:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003858:	e009      	b.n	800386e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385a:	f7fd ff2f 	bl	80016bc <HAL_GetTick>
 800385e:	0002      	movs	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <HAL_RCC_ClockConfig+0x1f4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e02c      	b.n	80038c8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800386e:	4b18      	ldr	r3, [pc, #96]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2207      	movs	r2, #7
 8003874:	4013      	ands	r3, r2
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d1ee      	bne.n	800385a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2204      	movs	r2, #4
 8003882:	4013      	ands	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003886:	4b14      	ldr	r3, [pc, #80]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4a15      	ldr	r2, [pc, #84]	@ (80038e0 <HAL_RCC_ClockConfig+0x200>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 8003896:	430a      	orrs	r2, r1
 8003898:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800389a:	f000 f829 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 800389e:	0001      	movs	r1, r0
 80038a0:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	0a1b      	lsrs	r3, r3, #8
 80038a6:	220f      	movs	r2, #15
 80038a8:	401a      	ands	r2, r3
 80038aa:	4b0e      	ldr	r3, [pc, #56]	@ (80038e4 <HAL_RCC_ClockConfig+0x204>)
 80038ac:	0092      	lsls	r2, r2, #2
 80038ae:	58d3      	ldr	r3, [r2, r3]
 80038b0:	221f      	movs	r2, #31
 80038b2:	4013      	ands	r3, r2
 80038b4:	000a      	movs	r2, r1
 80038b6:	40da      	lsrs	r2, r3
 80038b8:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <HAL_RCC_ClockConfig+0x208>)
 80038ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <HAL_RCC_ClockConfig+0x20c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7fd fe9f 	bl	8001604 <HAL_InitTick>
 80038c6:	0003      	movs	r3, r0
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b004      	add	sp, #16
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40022000 	.word	0x40022000
 80038d4:	00001388 	.word	0x00001388
 80038d8:	40021000 	.word	0x40021000
 80038dc:	fffff0ff 	.word	0xfffff0ff
 80038e0:	ffff8fff 	.word	0xffff8fff
 80038e4:	080064b0 	.word	0x080064b0
 80038e8:	20000010 	.word	0x20000010
 80038ec:	20000014 	.word	0x20000014

080038f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038f6:	4b3c      	ldr	r3, [pc, #240]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2238      	movs	r2, #56	@ 0x38
 80038fc:	4013      	ands	r3, r2
 80038fe:	d10f      	bne.n	8003920 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003900:	4b39      	ldr	r3, [pc, #228]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0adb      	lsrs	r3, r3, #11
 8003906:	2207      	movs	r2, #7
 8003908:	4013      	ands	r3, r2
 800390a:	2201      	movs	r2, #1
 800390c:	409a      	lsls	r2, r3
 800390e:	0013      	movs	r3, r2
 8003910:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	4835      	ldr	r0, [pc, #212]	@ (80039ec <HAL_RCC_GetSysClockFreq+0xfc>)
 8003916:	f7fc fc07 	bl	8000128 <__udivsi3>
 800391a:	0003      	movs	r3, r0
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	e05d      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003920:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2238      	movs	r2, #56	@ 0x38
 8003926:	4013      	ands	r3, r2
 8003928:	2b08      	cmp	r3, #8
 800392a:	d102      	bne.n	8003932 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800392c:	4b30      	ldr	r3, [pc, #192]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x100>)
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	e054      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003932:	4b2d      	ldr	r3, [pc, #180]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2238      	movs	r2, #56	@ 0x38
 8003938:	4013      	ands	r3, r2
 800393a:	2b10      	cmp	r3, #16
 800393c:	d138      	bne.n	80039b0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800393e:	4b2a      	ldr	r3, [pc, #168]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	2203      	movs	r2, #3
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003948:	4b27      	ldr	r3, [pc, #156]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	2207      	movs	r2, #7
 8003950:	4013      	ands	r3, r2
 8003952:	3301      	adds	r3, #1
 8003954:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d10d      	bne.n	8003978 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	4824      	ldr	r0, [pc, #144]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003960:	f7fc fbe2 	bl	8000128 <__udivsi3>
 8003964:	0003      	movs	r3, r0
 8003966:	0019      	movs	r1, r3
 8003968:	4b1f      	ldr	r3, [pc, #124]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	227f      	movs	r2, #127	@ 0x7f
 8003970:	4013      	ands	r3, r2
 8003972:	434b      	muls	r3, r1
 8003974:	617b      	str	r3, [r7, #20]
        break;
 8003976:	e00d      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	481c      	ldr	r0, [pc, #112]	@ (80039ec <HAL_RCC_GetSysClockFreq+0xfc>)
 800397c:	f7fc fbd4 	bl	8000128 <__udivsi3>
 8003980:	0003      	movs	r3, r0
 8003982:	0019      	movs	r1, r3
 8003984:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	227f      	movs	r2, #127	@ 0x7f
 800398c:	4013      	ands	r3, r2
 800398e:	434b      	muls	r3, r1
 8003990:	617b      	str	r3, [r7, #20]
        break;
 8003992:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003994:	4b14      	ldr	r3, [pc, #80]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	0f5b      	lsrs	r3, r3, #29
 800399a:	2207      	movs	r2, #7
 800399c:	4013      	ands	r3, r2
 800399e:	3301      	adds	r3, #1
 80039a0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	6978      	ldr	r0, [r7, #20]
 80039a6:	f7fc fbbf 	bl	8000128 <__udivsi3>
 80039aa:	0003      	movs	r3, r0
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	e015      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80039b0:	4b0d      	ldr	r3, [pc, #52]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2238      	movs	r2, #56	@ 0x38
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d103      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80039bc:	2380      	movs	r3, #128	@ 0x80
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80039c4:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2238      	movs	r2, #56	@ 0x38
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b18      	cmp	r3, #24
 80039ce:	d103      	bne.n	80039d8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80039d0:	23fa      	movs	r3, #250	@ 0xfa
 80039d2:	01db      	lsls	r3, r3, #7
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	e001      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039dc:	693b      	ldr	r3, [r7, #16]
}
 80039de:	0018      	movs	r0, r3
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b006      	add	sp, #24
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	40021000 	.word	0x40021000
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	007a1200 	.word	0x007a1200

080039f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f8:	4b02      	ldr	r3, [pc, #8]	@ (8003a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	20000010 	.word	0x20000010

08003a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a0c:	f7ff fff2 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a10:	0004      	movs	r4, r0
 8003a12:	f7ff fb3f 	bl	8003094 <LL_RCC_GetAPB1Prescaler>
 8003a16:	0003      	movs	r3, r0
 8003a18:	0b1a      	lsrs	r2, r3, #12
 8003a1a:	4b05      	ldr	r3, [pc, #20]	@ (8003a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a1c:	0092      	lsls	r2, r2, #2
 8003a1e:	58d3      	ldr	r3, [r2, r3]
 8003a20:	221f      	movs	r2, #31
 8003a22:	4013      	ands	r3, r2
 8003a24:	40dc      	lsrs	r4, r3
 8003a26:	0023      	movs	r3, r4
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	080064f0 	.word	0x080064f0

08003a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003a3c:	2313      	movs	r3, #19
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a44:	2312      	movs	r3, #18
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2380      	movs	r3, #128	@ 0x80
 8003a52:	029b      	lsls	r3, r3, #10
 8003a54:	4013      	ands	r3, r2
 8003a56:	d100      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a58:	e0a3      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5a:	2011      	movs	r0, #17
 8003a5c:	183b      	adds	r3, r7, r0
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a62:	4bc3      	ldr	r3, [pc, #780]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a66:	2380      	movs	r3, #128	@ 0x80
 8003a68:	055b      	lsls	r3, r3, #21
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d110      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	4bc0      	ldr	r3, [pc, #768]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a72:	4bbf      	ldr	r3, [pc, #764]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a74:	2180      	movs	r1, #128	@ 0x80
 8003a76:	0549      	lsls	r1, r1, #21
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a7c:	4bbc      	ldr	r3, [pc, #752]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	055b      	lsls	r3, r3, #21
 8003a84:	4013      	ands	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a90:	4bb8      	ldr	r3, [pc, #736]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4bb7      	ldr	r3, [pc, #732]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003a96:	2180      	movs	r1, #128	@ 0x80
 8003a98:	0049      	lsls	r1, r1, #1
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a9e:	f7fd fe0d 	bl	80016bc <HAL_GetTick>
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa8:	f7fd fe08 	bl	80016bc <HAL_GetTick>
 8003aac:	0002      	movs	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d904      	bls.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003ab6:	2313      	movs	r3, #19
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	2203      	movs	r2, #3
 8003abc:	701a      	strb	r2, [r3, #0]
        break;
 8003abe:	e005      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ac0:	4bac      	ldr	r3, [pc, #688]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d0ed      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003acc:	2313      	movs	r3, #19
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d154      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ad6:	4ba6      	ldr	r3, [pc, #664]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ad8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ada:	23c0      	movs	r3, #192	@ 0xc0
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4013      	ands	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d019      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d014      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003af2:	4b9f      	ldr	r3, [pc, #636]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af6:	4aa0      	ldr	r2, [pc, #640]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003afc:	4b9c      	ldr	r3, [pc, #624]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003afe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b00:	4b9b      	ldr	r3, [pc, #620]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b02:	2180      	movs	r1, #128	@ 0x80
 8003b04:	0249      	lsls	r1, r1, #9
 8003b06:	430a      	orrs	r2, r1
 8003b08:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b0a:	4b99      	ldr	r3, [pc, #612]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b0e:	4b98      	ldr	r3, [pc, #608]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b10:	499a      	ldr	r1, [pc, #616]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003b12:	400a      	ands	r2, r1
 8003b14:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b16:	4b96      	ldr	r3, [pc, #600]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4013      	ands	r3, r2
 8003b22:	d016      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fd fdca 	bl	80016bc <HAL_GetTick>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2c:	e00c      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2e:	f7fd fdc5 	bl	80016bc <HAL_GetTick>
 8003b32:	0002      	movs	r2, r0
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	4a91      	ldr	r2, [pc, #580]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d904      	bls.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003b3e:	2313      	movs	r3, #19
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	2203      	movs	r2, #3
 8003b44:	701a      	strb	r2, [r3, #0]
            break;
 8003b46:	e004      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b48:	4b89      	ldr	r3, [pc, #548]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d0ed      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003b52:	2313      	movs	r3, #19
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b5c:	4b84      	ldr	r3, [pc, #528]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b60:	4a85      	ldr	r2, [pc, #532]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b6a:	4b81      	ldr	r3, [pc, #516]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b70:	e00c      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b72:	2312      	movs	r3, #18
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2213      	movs	r2, #19
 8003b78:	18ba      	adds	r2, r7, r2
 8003b7a:	7812      	ldrb	r2, [r2, #0]
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	e005      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	2312      	movs	r3, #18
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	2213      	movs	r2, #19
 8003b86:	18ba      	adds	r2, r7, r2
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b8c:	2311      	movs	r3, #17
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d105      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b96:	4b76      	ldr	r3, [pc, #472]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b9a:	4b75      	ldr	r3, [pc, #468]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b9c:	4979      	ldr	r1, [pc, #484]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bac:	4b70      	ldr	r3, [pc, #448]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	4393      	bics	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	4b6d      	ldr	r3, [pc, #436]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bca:	4b69      	ldr	r3, [pc, #420]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	220c      	movs	r2, #12
 8003bd0:	4393      	bics	r3, r2
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	4b65      	ldr	r3, [pc, #404]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2210      	movs	r2, #16
 8003be4:	4013      	ands	r3, r2
 8003be6:	d009      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003be8:	4b61      	ldr	r3, [pc, #388]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bec:	4a66      	ldr	r2, [pc, #408]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	4b5e      	ldr	r3, [pc, #376]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2380      	movs	r3, #128	@ 0x80
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4013      	ands	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c08:	4b59      	ldr	r3, [pc, #356]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0c:	4a5f      	ldr	r2, [pc, #380]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	4b56      	ldr	r3, [pc, #344]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2380      	movs	r3, #128	@ 0x80
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4013      	ands	r3, r2
 8003c26:	d009      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c28:	4b51      	ldr	r3, [pc, #324]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	4a58      	ldr	r2, [pc, #352]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	0019      	movs	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69da      	ldr	r2, [r3, #28]
 8003c36:	4b4e      	ldr	r3, [pc, #312]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2220      	movs	r2, #32
 8003c42:	4013      	ands	r3, r2
 8003c44:	d009      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c46:	4b4a      	ldr	r3, [pc, #296]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4a:	4a52      	ldr	r2, [pc, #328]	@ (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	0019      	movs	r1, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691a      	ldr	r2, [r3, #16]
 8003c54:	4b46      	ldr	r3, [pc, #280]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c56:	430a      	orrs	r2, r1
 8003c58:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	01db      	lsls	r3, r3, #7
 8003c62:	4013      	ands	r3, r2
 8003c64:	d015      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c66:	4b42      	ldr	r3, [pc, #264]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	0899      	lsrs	r1, r3, #2
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	4b3f      	ldr	r3, [pc, #252]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c74:	430a      	orrs	r2, r1
 8003c76:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1a      	ldr	r2, [r3, #32]
 8003c7c:	2380      	movs	r3, #128	@ 0x80
 8003c7e:	05db      	lsls	r3, r3, #23
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d106      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c84:	4b3a      	ldr	r3, [pc, #232]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	4b39      	ldr	r3, [pc, #228]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c8a:	2180      	movs	r1, #128	@ 0x80
 8003c8c:	0249      	lsls	r1, r1, #9
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	2380      	movs	r3, #128	@ 0x80
 8003c98:	031b      	lsls	r3, r3, #12
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c9e:	4b34      	ldr	r3, [pc, #208]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca2:	2240      	movs	r2, #64	@ 0x40
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cac:	4b30      	ldr	r3, [pc, #192]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	2380      	movs	r3, #128	@ 0x80
 8003cb8:	039b      	lsls	r3, r3, #14
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d016      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc2:	4a35      	ldr	r2, [pc, #212]	@ (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ccc:	4b28      	ldr	r3, [pc, #160]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cd6:	2380      	movs	r3, #128	@ 0x80
 8003cd8:	03db      	lsls	r3, r3, #15
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d106      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003cde:	4b24      	ldr	r3, [pc, #144]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	4b23      	ldr	r3, [pc, #140]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ce4:	2180      	movs	r1, #128	@ 0x80
 8003ce6:	0449      	lsls	r1, r1, #17
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	2380      	movs	r3, #128	@ 0x80
 8003cf2:	03db      	lsls	r3, r3, #15
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d016      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	4a27      	ldr	r2, [pc, #156]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	0019      	movs	r1, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d06:	4b1a      	ldr	r3, [pc, #104]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d10:	2380      	movs	r3, #128	@ 0x80
 8003d12:	045b      	lsls	r3, r3, #17
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d106      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003d18:	4b15      	ldr	r3, [pc, #84]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	4b14      	ldr	r3, [pc, #80]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d1e:	2180      	movs	r1, #128	@ 0x80
 8003d20:	0449      	lsls	r1, r1, #17
 8003d22:	430a      	orrs	r2, r1
 8003d24:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	2380      	movs	r3, #128	@ 0x80
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d016      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003d32:	4b0f      	ldr	r3, [pc, #60]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	4a1a      	ldr	r2, [pc, #104]	@ (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	4b0b      	ldr	r3, [pc, #44]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d42:	430a      	orrs	r2, r1
 8003d44:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	2380      	movs	r3, #128	@ 0x80
 8003d4c:	01db      	lsls	r3, r3, #7
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d106      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003d52:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d58:	2180      	movs	r1, #128	@ 0x80
 8003d5a:	0249      	lsls	r1, r1, #9
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003d60:	2312      	movs	r3, #18
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	781b      	ldrb	r3, [r3, #0]
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b006      	add	sp, #24
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	40021000 	.word	0x40021000
 8003d74:	40007000 	.word	0x40007000
 8003d78:	fffffcff 	.word	0xfffffcff
 8003d7c:	fffeffff 	.word	0xfffeffff
 8003d80:	00001388 	.word	0x00001388
 8003d84:	efffffff 	.word	0xefffffff
 8003d88:	fffff3ff 	.word	0xfffff3ff
 8003d8c:	fff3ffff 	.word	0xfff3ffff
 8003d90:	ffcfffff 	.word	0xffcfffff
 8003d94:	ffffcfff 	.word	0xffffcfff
 8003d98:	ffbfffff 	.word	0xffbfffff
 8003d9c:	feffffff 	.word	0xfeffffff
 8003da0:	ffff3fff 	.word	0xffff3fff

08003da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e04a      	b.n	8003e4c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	223d      	movs	r2, #61	@ 0x3d
 8003dba:	5c9b      	ldrb	r3, [r3, r2]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d107      	bne.n	8003dd2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	223c      	movs	r2, #60	@ 0x3c
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7fd faa5 	bl	800131c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	223d      	movs	r2, #61	@ 0x3d
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3304      	adds	r3, #4
 8003de2:	0019      	movs	r1, r3
 8003de4:	0010      	movs	r0, r2
 8003de6:	f000 fa1f 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2248      	movs	r2, #72	@ 0x48
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	223e      	movs	r2, #62	@ 0x3e
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	223f      	movs	r2, #63	@ 0x3f
 8003dfe:	2101      	movs	r1, #1
 8003e00:	5499      	strb	r1, [r3, r2]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2240      	movs	r2, #64	@ 0x40
 8003e06:	2101      	movs	r1, #1
 8003e08:	5499      	strb	r1, [r3, r2]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2241      	movs	r2, #65	@ 0x41
 8003e0e:	2101      	movs	r1, #1
 8003e10:	5499      	strb	r1, [r3, r2]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2242      	movs	r2, #66	@ 0x42
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2243      	movs	r2, #67	@ 0x43
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2244      	movs	r2, #68	@ 0x44
 8003e26:	2101      	movs	r1, #1
 8003e28:	5499      	strb	r1, [r3, r2]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2245      	movs	r2, #69	@ 0x45
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2246      	movs	r2, #70	@ 0x46
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2247      	movs	r2, #71	@ 0x47
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	223d      	movs	r2, #61	@ 0x3d
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b002      	add	sp, #8
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d108      	bne.n	8003e76 <HAL_TIM_PWM_Start+0x22>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	223e      	movs	r2, #62	@ 0x3e
 8003e68:	5c9b      	ldrb	r3, [r3, r2]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	1e5a      	subs	r2, r3, #1
 8003e70:	4193      	sbcs	r3, r2
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	e037      	b.n	8003ee6 <HAL_TIM_PWM_Start+0x92>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d108      	bne.n	8003e8e <HAL_TIM_PWM_Start+0x3a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	223f      	movs	r2, #63	@ 0x3f
 8003e80:	5c9b      	ldrb	r3, [r3, r2]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	1e5a      	subs	r2, r3, #1
 8003e88:	4193      	sbcs	r3, r2
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	e02b      	b.n	8003ee6 <HAL_TIM_PWM_Start+0x92>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d108      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0x52>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2240      	movs	r2, #64	@ 0x40
 8003e98:	5c9b      	ldrb	r3, [r3, r2]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	1e5a      	subs	r2, r3, #1
 8003ea0:	4193      	sbcs	r3, r2
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	e01f      	b.n	8003ee6 <HAL_TIM_PWM_Start+0x92>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b0c      	cmp	r3, #12
 8003eaa:	d108      	bne.n	8003ebe <HAL_TIM_PWM_Start+0x6a>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2241      	movs	r2, #65	@ 0x41
 8003eb0:	5c9b      	ldrb	r3, [r3, r2]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	1e5a      	subs	r2, r3, #1
 8003eb8:	4193      	sbcs	r3, r2
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	e013      	b.n	8003ee6 <HAL_TIM_PWM_Start+0x92>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d108      	bne.n	8003ed6 <HAL_TIM_PWM_Start+0x82>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2242      	movs	r2, #66	@ 0x42
 8003ec8:	5c9b      	ldrb	r3, [r3, r2]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	1e5a      	subs	r2, r3, #1
 8003ed0:	4193      	sbcs	r3, r2
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	e007      	b.n	8003ee6 <HAL_TIM_PWM_Start+0x92>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2243      	movs	r2, #67	@ 0x43
 8003eda:	5c9b      	ldrb	r3, [r3, r2]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	1e5a      	subs	r2, r3, #1
 8003ee2:	4193      	sbcs	r3, r2
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e08b      	b.n	8004006 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <HAL_TIM_PWM_Start+0xaa>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	223e      	movs	r2, #62	@ 0x3e
 8003ef8:	2102      	movs	r1, #2
 8003efa:	5499      	strb	r1, [r3, r2]
 8003efc:	e023      	b.n	8003f46 <HAL_TIM_PWM_Start+0xf2>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d104      	bne.n	8003f0e <HAL_TIM_PWM_Start+0xba>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	223f      	movs	r2, #63	@ 0x3f
 8003f08:	2102      	movs	r1, #2
 8003f0a:	5499      	strb	r1, [r3, r2]
 8003f0c:	e01b      	b.n	8003f46 <HAL_TIM_PWM_Start+0xf2>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d104      	bne.n	8003f1e <HAL_TIM_PWM_Start+0xca>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2240      	movs	r2, #64	@ 0x40
 8003f18:	2102      	movs	r1, #2
 8003f1a:	5499      	strb	r1, [r3, r2]
 8003f1c:	e013      	b.n	8003f46 <HAL_TIM_PWM_Start+0xf2>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	d104      	bne.n	8003f2e <HAL_TIM_PWM_Start+0xda>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2241      	movs	r2, #65	@ 0x41
 8003f28:	2102      	movs	r1, #2
 8003f2a:	5499      	strb	r1, [r3, r2]
 8003f2c:	e00b      	b.n	8003f46 <HAL_TIM_PWM_Start+0xf2>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d104      	bne.n	8003f3e <HAL_TIM_PWM_Start+0xea>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2242      	movs	r2, #66	@ 0x42
 8003f38:	2102      	movs	r1, #2
 8003f3a:	5499      	strb	r1, [r3, r2]
 8003f3c:	e003      	b.n	8003f46 <HAL_TIM_PWM_Start+0xf2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2243      	movs	r2, #67	@ 0x43
 8003f42:	2102      	movs	r1, #2
 8003f44:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 fcbc 	bl	80048cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2d      	ldr	r2, [pc, #180]	@ (8004010 <HAL_TIM_PWM_Start+0x1bc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00e      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x128>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2c      	ldr	r2, [pc, #176]	@ (8004014 <HAL_TIM_PWM_Start+0x1c0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d009      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x128>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004018 <HAL_TIM_PWM_Start+0x1c4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <HAL_TIM_PWM_Start+0x128>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a29      	ldr	r2, [pc, #164]	@ (800401c <HAL_TIM_PWM_Start+0x1c8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIM_PWM_Start+0x12c>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <HAL_TIM_PWM_Start+0x12e>
 8003f80:	2300      	movs	r3, #0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2180      	movs	r1, #128	@ 0x80
 8003f92:	0209      	lsls	r1, r1, #8
 8003f94:	430a      	orrs	r2, r1
 8003f96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004010 <HAL_TIM_PWM_Start+0x1bc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00f      	beq.n	8003fc2 <HAL_TIM_PWM_Start+0x16e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	@ 0x80
 8003fa8:	05db      	lsls	r3, r3, #23
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d009      	beq.n	8003fc2 <HAL_TIM_PWM_Start+0x16e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8004020 <HAL_TIM_PWM_Start+0x1cc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d004      	beq.n	8003fc2 <HAL_TIM_PWM_Start+0x16e>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <HAL_TIM_PWM_Start+0x1c0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d116      	bne.n	8003ff0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a16      	ldr	r2, [pc, #88]	@ (8004024 <HAL_TIM_PWM_Start+0x1d0>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b06      	cmp	r3, #6
 8003fd2:	d016      	beq.n	8004002 <HAL_TIM_PWM_Start+0x1ae>
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	025b      	lsls	r3, r3, #9
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d011      	beq.n	8004002 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2101      	movs	r1, #1
 8003fea:	430a      	orrs	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fee:	e008      	b.n	8004002 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e000      	b.n	8004004 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004002:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b004      	add	sp, #16
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			@ (mov r8, r8)
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40014000 	.word	0x40014000
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800
 8004020:	40000400 	.word	0x40000400
 8004024:	00010007 	.word	0x00010007

08004028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004034:	2317      	movs	r3, #23
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	223c      	movs	r2, #60	@ 0x3c
 8004040:	5c9b      	ldrb	r3, [r3, r2]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004046:	2302      	movs	r3, #2
 8004048:	e0e5      	b.n	8004216 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	223c      	movs	r2, #60	@ 0x3c
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b14      	cmp	r3, #20
 8004056:	d900      	bls.n	800405a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004058:	e0d1      	b.n	80041fe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	009a      	lsls	r2, r3, #2
 800405e:	4b70      	ldr	r3, [pc, #448]	@ (8004220 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004060:	18d3      	adds	r3, r2, r3
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	0011      	movs	r1, r2
 800406e:	0018      	movs	r0, r3
 8004070:	f000 f968 	bl	8004344 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2108      	movs	r1, #8
 8004080:	430a      	orrs	r2, r1
 8004082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2104      	movs	r1, #4
 8004090:	438a      	bics	r2, r1
 8004092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6999      	ldr	r1, [r3, #24]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	619a      	str	r2, [r3, #24]
      break;
 80040a6:	e0af      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	0011      	movs	r1, r2
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 f9d1 	bl	8004458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2180      	movs	r1, #128	@ 0x80
 80040c2:	0109      	lsls	r1, r1, #4
 80040c4:	430a      	orrs	r2, r1
 80040c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4954      	ldr	r1, [pc, #336]	@ (8004224 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80040d4:	400a      	ands	r2, r1
 80040d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6999      	ldr	r1, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	021a      	lsls	r2, r3, #8
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	619a      	str	r2, [r3, #24]
      break;
 80040ec:	e08c      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	0011      	movs	r1, r2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 fa32 	bl	8004560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2108      	movs	r1, #8
 8004108:	430a      	orrs	r2, r1
 800410a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69da      	ldr	r2, [r3, #28]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2104      	movs	r1, #4
 8004118:	438a      	bics	r2, r1
 800411a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69d9      	ldr	r1, [r3, #28]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	61da      	str	r2, [r3, #28]
      break;
 800412e:	e06b      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	0011      	movs	r1, r2
 8004138:	0018      	movs	r0, r3
 800413a:	f000 fa99 	bl	8004670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2180      	movs	r1, #128	@ 0x80
 800414a:	0109      	lsls	r1, r1, #4
 800414c:	430a      	orrs	r2, r1
 800414e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4932      	ldr	r1, [pc, #200]	@ (8004224 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800415c:	400a      	ands	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69d9      	ldr	r1, [r3, #28]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	61da      	str	r2, [r3, #28]
      break;
 8004174:	e048      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f000 fae0 	bl	8004744 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2108      	movs	r1, #8
 8004190:	430a      	orrs	r2, r1
 8004192:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2104      	movs	r1, #4
 80041a0:	438a      	bics	r2, r1
 80041a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80041b6:	e027      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	0011      	movs	r1, r2
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 fb1f 	bl	8004804 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2180      	movs	r1, #128	@ 0x80
 80041d2:	0109      	lsls	r1, r1, #4
 80041d4:	430a      	orrs	r2, r1
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4910      	ldr	r1, [pc, #64]	@ (8004224 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80041fc:	e004      	b.n	8004208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80041fe:	2317      	movs	r3, #23
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
      break;
 8004206:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	223c      	movs	r2, #60	@ 0x3c
 800420c:	2100      	movs	r1, #0
 800420e:	5499      	strb	r1, [r3, r2]

  return status;
 8004210:	2317      	movs	r3, #23
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	781b      	ldrb	r3, [r3, #0]
}
 8004216:	0018      	movs	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	b006      	add	sp, #24
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	08006510 	.word	0x08006510
 8004224:	fffffbff 	.word	0xfffffbff

08004228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a3b      	ldr	r2, [pc, #236]	@ (8004328 <TIM_Base_SetConfig+0x100>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d008      	beq.n	8004252 <TIM_Base_SetConfig+0x2a>
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	2380      	movs	r3, #128	@ 0x80
 8004244:	05db      	lsls	r3, r3, #23
 8004246:	429a      	cmp	r2, r3
 8004248:	d003      	beq.n	8004252 <TIM_Base_SetConfig+0x2a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a37      	ldr	r2, [pc, #220]	@ (800432c <TIM_Base_SetConfig+0x104>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d108      	bne.n	8004264 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2270      	movs	r2, #112	@ 0x70
 8004256:	4393      	bics	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a30      	ldr	r2, [pc, #192]	@ (8004328 <TIM_Base_SetConfig+0x100>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <TIM_Base_SetConfig+0x76>
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	2380      	movs	r3, #128	@ 0x80
 8004270:	05db      	lsls	r3, r3, #23
 8004272:	429a      	cmp	r2, r3
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0x76>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a2c      	ldr	r2, [pc, #176]	@ (800432c <TIM_Base_SetConfig+0x104>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0x76>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a2b      	ldr	r2, [pc, #172]	@ (8004330 <TIM_Base_SetConfig+0x108>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0x76>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2a      	ldr	r2, [pc, #168]	@ (8004334 <TIM_Base_SetConfig+0x10c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0x76>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a29      	ldr	r2, [pc, #164]	@ (8004338 <TIM_Base_SetConfig+0x110>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0x76>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a28      	ldr	r2, [pc, #160]	@ (800433c <TIM_Base_SetConfig+0x114>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a27      	ldr	r2, [pc, #156]	@ (8004340 <TIM_Base_SetConfig+0x118>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2280      	movs	r2, #128	@ 0x80
 80042b4:	4393      	bics	r3, r2
 80042b6:	001a      	movs	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a13      	ldr	r2, [pc, #76]	@ (8004328 <TIM_Base_SetConfig+0x100>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00b      	beq.n	80042f6 <TIM_Base_SetConfig+0xce>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a14      	ldr	r2, [pc, #80]	@ (8004334 <TIM_Base_SetConfig+0x10c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_Base_SetConfig+0xce>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a13      	ldr	r2, [pc, #76]	@ (8004338 <TIM_Base_SetConfig+0x110>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_Base_SetConfig+0xce>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a12      	ldr	r2, [pc, #72]	@ (800433c <TIM_Base_SetConfig+0x114>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d103      	bne.n	80042fe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2201      	movs	r2, #1
 800430a:	4013      	ands	r3, r2
 800430c:	2b01      	cmp	r3, #1
 800430e:	d106      	bne.n	800431e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2201      	movs	r2, #1
 8004316:	4393      	bics	r3, r2
 8004318:	001a      	movs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	611a      	str	r2, [r3, #16]
  }
}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b004      	add	sp, #16
 8004324:	bd80      	pop	{r7, pc}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40000400 	.word	0x40000400
 8004330:	40002000 	.word	0x40002000
 8004334:	40014000 	.word	0x40014000
 8004338:	40014400 	.word	0x40014400
 800433c:	40014800 	.word	0x40014800
 8004340:	fffffcff 	.word	0xfffffcff

08004344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	2201      	movs	r2, #1
 800435a:	4393      	bics	r3, r2
 800435c:	001a      	movs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a32      	ldr	r2, [pc, #200]	@ (800443c <TIM_OC1_SetConfig+0xf8>)
 8004372:	4013      	ands	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2203      	movs	r2, #3
 800437a:	4393      	bics	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2202      	movs	r2, #2
 800438c:	4393      	bics	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a28      	ldr	r2, [pc, #160]	@ (8004440 <TIM_OC1_SetConfig+0xfc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_OC1_SetConfig+0x76>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a27      	ldr	r2, [pc, #156]	@ (8004444 <TIM_OC1_SetConfig+0x100>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_OC1_SetConfig+0x76>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a26      	ldr	r2, [pc, #152]	@ (8004448 <TIM_OC1_SetConfig+0x104>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_OC1_SetConfig+0x76>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a25      	ldr	r2, [pc, #148]	@ (800444c <TIM_OC1_SetConfig+0x108>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10c      	bne.n	80043d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2208      	movs	r2, #8
 80043be:	4393      	bics	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2204      	movs	r2, #4
 80043d0:	4393      	bics	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004440 <TIM_OC1_SetConfig+0xfc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00b      	beq.n	80043f4 <TIM_OC1_SetConfig+0xb0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a19      	ldr	r2, [pc, #100]	@ (8004444 <TIM_OC1_SetConfig+0x100>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d007      	beq.n	80043f4 <TIM_OC1_SetConfig+0xb0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a18      	ldr	r2, [pc, #96]	@ (8004448 <TIM_OC1_SetConfig+0x104>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_OC1_SetConfig+0xb0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a17      	ldr	r2, [pc, #92]	@ (800444c <TIM_OC1_SetConfig+0x108>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d111      	bne.n	8004418 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <TIM_OC1_SetConfig+0x10c>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4a15      	ldr	r2, [pc, #84]	@ (8004454 <TIM_OC1_SetConfig+0x110>)
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	b006      	add	sp, #24
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	fffeff8f 	.word	0xfffeff8f
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40014000 	.word	0x40014000
 8004448:	40014400 	.word	0x40014400
 800444c:	40014800 	.word	0x40014800
 8004450:	fffffeff 	.word	0xfffffeff
 8004454:	fffffdff 	.word	0xfffffdff

08004458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	2210      	movs	r2, #16
 800446e:	4393      	bics	r3, r2
 8004470:	001a      	movs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a2e      	ldr	r2, [pc, #184]	@ (8004540 <TIM_OC2_SetConfig+0xe8>)
 8004486:	4013      	ands	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a2d      	ldr	r2, [pc, #180]	@ (8004544 <TIM_OC2_SetConfig+0xec>)
 800448e:	4013      	ands	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2220      	movs	r2, #32
 80044a2:	4393      	bics	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a24      	ldr	r2, [pc, #144]	@ (8004548 <TIM_OC2_SetConfig+0xf0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d10d      	bne.n	80044d6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2280      	movs	r2, #128	@ 0x80
 80044be:	4393      	bics	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2240      	movs	r2, #64	@ 0x40
 80044d2:	4393      	bics	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004548 <TIM_OC2_SetConfig+0xf0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00b      	beq.n	80044f6 <TIM_OC2_SetConfig+0x9e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a1a      	ldr	r2, [pc, #104]	@ (800454c <TIM_OC2_SetConfig+0xf4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <TIM_OC2_SetConfig+0x9e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a19      	ldr	r2, [pc, #100]	@ (8004550 <TIM_OC2_SetConfig+0xf8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_OC2_SetConfig+0x9e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a18      	ldr	r2, [pc, #96]	@ (8004554 <TIM_OC2_SetConfig+0xfc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d113      	bne.n	800451e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4a17      	ldr	r2, [pc, #92]	@ (8004558 <TIM_OC2_SetConfig+0x100>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4a16      	ldr	r2, [pc, #88]	@ (800455c <TIM_OC2_SetConfig+0x104>)
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	621a      	str	r2, [r3, #32]
}
 8004538:	46c0      	nop			@ (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	b006      	add	sp, #24
 800453e:	bd80      	pop	{r7, pc}
 8004540:	feff8fff 	.word	0xfeff8fff
 8004544:	fffffcff 	.word	0xfffffcff
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40014000 	.word	0x40014000
 8004550:	40014400 	.word	0x40014400
 8004554:	40014800 	.word	0x40014800
 8004558:	fffffbff 	.word	0xfffffbff
 800455c:	fffff7ff 	.word	0xfffff7ff

08004560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	4a33      	ldr	r2, [pc, #204]	@ (8004644 <TIM_OC3_SetConfig+0xe4>)
 8004576:	401a      	ands	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a2f      	ldr	r2, [pc, #188]	@ (8004648 <TIM_OC3_SetConfig+0xe8>)
 800458c:	4013      	ands	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2203      	movs	r2, #3
 8004594:	4393      	bics	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	4a29      	ldr	r2, [pc, #164]	@ (800464c <TIM_OC3_SetConfig+0xec>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a25      	ldr	r2, [pc, #148]	@ (8004650 <TIM_OC3_SetConfig+0xf0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d10d      	bne.n	80045da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4a24      	ldr	r2, [pc, #144]	@ (8004654 <TIM_OC3_SetConfig+0xf4>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4a20      	ldr	r2, [pc, #128]	@ (8004658 <TIM_OC3_SetConfig+0xf8>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004650 <TIM_OC3_SetConfig+0xf0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <TIM_OC3_SetConfig+0x9a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1d      	ldr	r2, [pc, #116]	@ (800465c <TIM_OC3_SetConfig+0xfc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d007      	beq.n	80045fa <TIM_OC3_SetConfig+0x9a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004660 <TIM_OC3_SetConfig+0x100>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_OC3_SetConfig+0x9a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004664 <TIM_OC3_SetConfig+0x104>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d113      	bne.n	8004622 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004668 <TIM_OC3_SetConfig+0x108>)
 80045fe:	4013      	ands	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4a19      	ldr	r2, [pc, #100]	@ (800466c <TIM_OC3_SetConfig+0x10c>)
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	621a      	str	r2, [r3, #32]
}
 800463c:	46c0      	nop			@ (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b006      	add	sp, #24
 8004642:	bd80      	pop	{r7, pc}
 8004644:	fffffeff 	.word	0xfffffeff
 8004648:	fffeff8f 	.word	0xfffeff8f
 800464c:	fffffdff 	.word	0xfffffdff
 8004650:	40012c00 	.word	0x40012c00
 8004654:	fffff7ff 	.word	0xfffff7ff
 8004658:	fffffbff 	.word	0xfffffbff
 800465c:	40014000 	.word	0x40014000
 8004660:	40014400 	.word	0x40014400
 8004664:	40014800 	.word	0x40014800
 8004668:	ffffefff 	.word	0xffffefff
 800466c:	ffffdfff 	.word	0xffffdfff

08004670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	4a26      	ldr	r2, [pc, #152]	@ (8004720 <TIM_OC4_SetConfig+0xb0>)
 8004686:	401a      	ands	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a22      	ldr	r2, [pc, #136]	@ (8004724 <TIM_OC4_SetConfig+0xb4>)
 800469c:	4013      	ands	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a21      	ldr	r2, [pc, #132]	@ (8004728 <TIM_OC4_SetConfig+0xb8>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4a1d      	ldr	r2, [pc, #116]	@ (800472c <TIM_OC4_SetConfig+0xbc>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	031b      	lsls	r3, r3, #12
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <TIM_OC4_SetConfig+0xc0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <TIM_OC4_SetConfig+0x78>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <TIM_OC4_SetConfig+0xc4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <TIM_OC4_SetConfig+0x78>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <TIM_OC4_SetConfig+0xc8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_OC4_SetConfig+0x78>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a16      	ldr	r2, [pc, #88]	@ (800473c <TIM_OC4_SetConfig+0xcc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d109      	bne.n	80046fc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4a15      	ldr	r2, [pc, #84]	@ (8004740 <TIM_OC4_SetConfig+0xd0>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	b006      	add	sp, #24
 800471c:	bd80      	pop	{r7, pc}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	ffffefff 	.word	0xffffefff
 8004724:	feff8fff 	.word	0xfeff8fff
 8004728:	fffffcff 	.word	0xfffffcff
 800472c:	ffffdfff 	.word	0xffffdfff
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800
 8004740:	ffffbfff 	.word	0xffffbfff

08004744 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	4a23      	ldr	r2, [pc, #140]	@ (80047e8 <TIM_OC5_SetConfig+0xa4>)
 800475a:	401a      	ands	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4a1f      	ldr	r2, [pc, #124]	@ (80047ec <TIM_OC5_SetConfig+0xa8>)
 8004770:	4013      	ands	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4a1b      	ldr	r2, [pc, #108]	@ (80047f0 <TIM_OC5_SetConfig+0xac>)
 8004782:	4013      	ands	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a17      	ldr	r2, [pc, #92]	@ (80047f4 <TIM_OC5_SetConfig+0xb0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_OC5_SetConfig+0x6e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a16      	ldr	r2, [pc, #88]	@ (80047f8 <TIM_OC5_SetConfig+0xb4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <TIM_OC5_SetConfig+0x6e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a15      	ldr	r2, [pc, #84]	@ (80047fc <TIM_OC5_SetConfig+0xb8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_OC5_SetConfig+0x6e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a14      	ldr	r2, [pc, #80]	@ (8004800 <TIM_OC5_SetConfig+0xbc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d109      	bne.n	80047c6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4a0c      	ldr	r2, [pc, #48]	@ (80047e8 <TIM_OC5_SetConfig+0xa4>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	621a      	str	r2, [r3, #32]
}
 80047e0:	46c0      	nop			@ (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b006      	add	sp, #24
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	fffeffff 	.word	0xfffeffff
 80047ec:	fffeff8f 	.word	0xfffeff8f
 80047f0:	fffdffff 	.word	0xfffdffff
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40014400 	.word	0x40014400
 8004800:	40014800 	.word	0x40014800

08004804 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	4a24      	ldr	r2, [pc, #144]	@ (80048ac <TIM_OC6_SetConfig+0xa8>)
 800481a:	401a      	ands	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a20      	ldr	r2, [pc, #128]	@ (80048b0 <TIM_OC6_SetConfig+0xac>)
 8004830:	4013      	ands	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4a1c      	ldr	r2, [pc, #112]	@ (80048b4 <TIM_OC6_SetConfig+0xb0>)
 8004844:	4013      	ands	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	051b      	lsls	r3, r3, #20
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <TIM_OC6_SetConfig+0xb4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00b      	beq.n	8004874 <TIM_OC6_SetConfig+0x70>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a17      	ldr	r2, [pc, #92]	@ (80048bc <TIM_OC6_SetConfig+0xb8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <TIM_OC6_SetConfig+0x70>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a16      	ldr	r2, [pc, #88]	@ (80048c0 <TIM_OC6_SetConfig+0xbc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_OC6_SetConfig+0x70>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a15      	ldr	r2, [pc, #84]	@ (80048c4 <TIM_OC6_SetConfig+0xc0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d109      	bne.n	8004888 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4a14      	ldr	r2, [pc, #80]	@ (80048c8 <TIM_OC6_SetConfig+0xc4>)
 8004878:	4013      	ands	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	029b      	lsls	r3, r3, #10
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	621a      	str	r2, [r3, #32]
}
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	46bd      	mov	sp, r7
 80048a6:	b006      	add	sp, #24
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	46c0      	nop			@ (mov r8, r8)
 80048ac:	ffefffff 	.word	0xffefffff
 80048b0:	feff8fff 	.word	0xfeff8fff
 80048b4:	ffdfffff 	.word	0xffdfffff
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800
 80048c8:	fffbffff 	.word	0xfffbffff

080048cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	221f      	movs	r2, #31
 80048dc:	4013      	ands	r3, r2
 80048de:	2201      	movs	r2, #1
 80048e0:	409a      	lsls	r2, r3
 80048e2:	0013      	movs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	43d2      	mvns	r2, r2
 80048ee:	401a      	ands	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	211f      	movs	r1, #31
 80048fc:	400b      	ands	r3, r1
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4099      	lsls	r1, r3
 8004902:	000b      	movs	r3, r1
 8004904:	431a      	orrs	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	46bd      	mov	sp, r7
 800490e:	b006      	add	sp, #24
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	223c      	movs	r2, #60	@ 0x3c
 8004922:	5c9b      	ldrb	r3, [r3, r2]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e055      	b.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	223c      	movs	r2, #60	@ 0x3c
 8004930:	2101      	movs	r1, #1
 8004932:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	223d      	movs	r2, #61	@ 0x3d
 8004938:	2102      	movs	r1, #2
 800493a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a23      	ldr	r2, [pc, #140]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d108      	bne.n	8004968 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4a22      	ldr	r2, [pc, #136]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800495a:	4013      	ands	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2270      	movs	r2, #112	@ 0x70
 800496c:	4393      	bics	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a16      	ldr	r2, [pc, #88]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00f      	beq.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	2380      	movs	r3, #128	@ 0x80
 8004992:	05db      	lsls	r3, r3, #23
 8004994:	429a      	cmp	r2, r3
 8004996:	d009      	beq.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a12      	ldr	r2, [pc, #72]	@ (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a11      	ldr	r2, [pc, #68]	@ (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d10c      	bne.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2280      	movs	r2, #128	@ 0x80
 80049b0:	4393      	bics	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	223d      	movs	r2, #61	@ 0x3d
 80049ca:	2101      	movs	r1, #1
 80049cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	223c      	movs	r2, #60	@ 0x3c
 80049d2:	2100      	movs	r1, #0
 80049d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	0018      	movs	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	b004      	add	sp, #16
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40012c00 	.word	0x40012c00
 80049e4:	ff0fffff 	.word	0xff0fffff
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40014000 	.word	0x40014000

080049f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	223c      	movs	r2, #60	@ 0x3c
 8004a02:	5c9b      	ldrb	r3, [r3, r2]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e06f      	b.n	8004aec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	223c      	movs	r2, #60	@ 0x3c
 8004a10:	2101      	movs	r1, #1
 8004a12:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	22ff      	movs	r2, #255	@ 0xff
 8004a18:	4393      	bics	r3, r2
 8004a1a:	001a      	movs	r2, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a33      	ldr	r2, [pc, #204]	@ (8004af4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004a28:	401a      	ands	r2, r3
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4a30      	ldr	r2, [pc, #192]	@ (8004af8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004a36:	401a      	ands	r2, r3
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a2e      	ldr	r2, [pc, #184]	@ (8004afc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004a44:	401a      	ands	r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4a2b      	ldr	r2, [pc, #172]	@ (8004b00 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004a52:	401a      	ands	r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a29      	ldr	r2, [pc, #164]	@ (8004b04 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004a60:	401a      	ands	r2, r3
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a26      	ldr	r2, [pc, #152]	@ (8004b08 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004a6e:	401a      	ands	r2, r3
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a24      	ldr	r2, [pc, #144]	@ (8004b0c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004a7c:	401a      	ands	r2, r3
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	041b      	lsls	r3, r3, #16
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a21      	ldr	r2, [pc, #132]	@ (8004b10 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004a8c:	401a      	ands	r2, r3
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b14 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d11c      	bne.n	8004ada <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004aa4:	401a      	ands	r2, r3
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aaa:	051b      	lsls	r3, r3, #20
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8004b1c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004ab4:	401a      	ands	r2, r3
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a17      	ldr	r2, [pc, #92]	@ (8004b20 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a15      	ldr	r2, [pc, #84]	@ (8004b24 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004ad0:	401a      	ands	r2, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	223c      	movs	r2, #60	@ 0x3c
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b004      	add	sp, #16
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	fffffcff 	.word	0xfffffcff
 8004af8:	fffffbff 	.word	0xfffffbff
 8004afc:	fffff7ff 	.word	0xfffff7ff
 8004b00:	ffffefff 	.word	0xffffefff
 8004b04:	ffffdfff 	.word	0xffffdfff
 8004b08:	ffffbfff 	.word	0xffffbfff
 8004b0c:	fff0ffff 	.word	0xfff0ffff
 8004b10:	efffffff 	.word	0xefffffff
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	ff0fffff 	.word	0xff0fffff
 8004b1c:	feffffff 	.word	0xfeffffff
 8004b20:	fdffffff 	.word	0xfdffffff
 8004b24:	dfffffff 	.word	0xdfffffff

08004b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e046      	b.n	8004bc8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2288      	movs	r2, #136	@ 0x88
 8004b3e:	589b      	ldr	r3, [r3, r2]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d107      	bne.n	8004b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2284      	movs	r2, #132	@ 0x84
 8004b48:	2100      	movs	r1, #0
 8004b4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7fc fc58 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2288      	movs	r2, #136	@ 0x88
 8004b58:	2124      	movs	r1, #36	@ 0x24
 8004b5a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2101      	movs	r1, #1
 8004b68:	438a      	bics	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	0018      	movs	r0, r3
 8004b78:	f000 fc74 	bl	8005464 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	0018      	movs	r0, r3
 8004b80:	f000 f9b2 	bl	8004ee8 <UART_SetConfig>
 8004b84:	0003      	movs	r3, r0
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e01c      	b.n	8004bc8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	490d      	ldr	r1, [pc, #52]	@ (8004bd0 <HAL_UART_Init+0xa8>)
 8004b9a:	400a      	ands	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	212a      	movs	r1, #42	@ 0x2a
 8004baa:	438a      	bics	r2, r1
 8004bac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2101      	movs	r1, #1
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f000 fd03 	bl	80055cc <UART_CheckIdleState>
 8004bc6:	0003      	movs	r3, r0
}
 8004bc8:	0018      	movs	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b002      	add	sp, #8
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	ffffb7ff 	.word	0xffffb7ff

08004bd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	@ 0x28
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	1dbb      	adds	r3, r7, #6
 8004be2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2288      	movs	r2, #136	@ 0x88
 8004be8:	589b      	ldr	r3, [r3, r2]
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d000      	beq.n	8004bf0 <HAL_UART_Transmit+0x1c>
 8004bee:	e090      	b.n	8004d12 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_UART_Transmit+0x2a>
 8004bf6:	1dbb      	adds	r3, r7, #6
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e088      	b.n	8004d14 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	015b      	lsls	r3, r3, #5
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d109      	bne.n	8004c22 <HAL_UART_Transmit+0x4e>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d105      	bne.n	8004c22 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d001      	beq.n	8004c22 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e078      	b.n	8004d14 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2290      	movs	r2, #144	@ 0x90
 8004c26:	2100      	movs	r1, #0
 8004c28:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2288      	movs	r2, #136	@ 0x88
 8004c2e:	2121      	movs	r1, #33	@ 0x21
 8004c30:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c32:	f7fc fd43 	bl	80016bc <HAL_GetTick>
 8004c36:	0003      	movs	r3, r0
 8004c38:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1dba      	adds	r2, r7, #6
 8004c3e:	2154      	movs	r1, #84	@ 0x54
 8004c40:	8812      	ldrh	r2, [r2, #0]
 8004c42:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1dba      	adds	r2, r7, #6
 8004c48:	2156      	movs	r1, #86	@ 0x56
 8004c4a:	8812      	ldrh	r2, [r2, #0]
 8004c4c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	2380      	movs	r3, #128	@ 0x80
 8004c54:	015b      	lsls	r3, r3, #5
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d108      	bne.n	8004c6c <HAL_UART_Transmit+0x98>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d104      	bne.n	8004c6c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	e003      	b.n	8004c74 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c74:	e030      	b.n	8004cd8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	0013      	movs	r3, r2
 8004c80:	2200      	movs	r2, #0
 8004c82:	2180      	movs	r1, #128	@ 0x80
 8004c84:	f000 fd4c 	bl	8005720 <UART_WaitOnFlagUntilTimeout>
 8004c88:	1e03      	subs	r3, r0, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2288      	movs	r2, #136	@ 0x88
 8004c90:	2120      	movs	r1, #32
 8004c92:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e03d      	b.n	8004d14 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	001a      	movs	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	05d2      	lsls	r2, r2, #23
 8004caa:	0dd2      	lsrs	r2, r2, #23
 8004cac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	e007      	b.n	8004cc6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	781a      	ldrb	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2256      	movs	r2, #86	@ 0x56
 8004cca:	5a9b      	ldrh	r3, [r3, r2]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b299      	uxth	r1, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2256      	movs	r2, #86	@ 0x56
 8004cd6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2256      	movs	r2, #86	@ 0x56
 8004cdc:	5a9b      	ldrh	r3, [r3, r2]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1c8      	bne.n	8004c76 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	0013      	movs	r3, r2
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2140      	movs	r1, #64	@ 0x40
 8004cf2:	f000 fd15 	bl	8005720 <UART_WaitOnFlagUntilTimeout>
 8004cf6:	1e03      	subs	r3, r0, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2288      	movs	r2, #136	@ 0x88
 8004cfe:	2120      	movs	r1, #32
 8004d00:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e006      	b.n	8004d14 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2288      	movs	r2, #136	@ 0x88
 8004d0a:	2120      	movs	r1, #32
 8004d0c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	0018      	movs	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b008      	add	sp, #32
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	@ 0x28
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	1dbb      	adds	r3, r7, #6
 8004d2a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	228c      	movs	r2, #140	@ 0x8c
 8004d30:	589b      	ldr	r3, [r3, r2]
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d000      	beq.n	8004d38 <HAL_UART_Receive+0x1c>
 8004d36:	e0d0      	b.n	8004eda <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_UART_Receive+0x2a>
 8004d3e:	1dbb      	adds	r3, r7, #6
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e0c8      	b.n	8004edc <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689a      	ldr	r2, [r3, #8]
 8004d4e:	2380      	movs	r3, #128	@ 0x80
 8004d50:	015b      	lsls	r3, r3, #5
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d109      	bne.n	8004d6a <HAL_UART_Receive+0x4e>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2201      	movs	r2, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	d001      	beq.n	8004d6a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e0b8      	b.n	8004edc <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2290      	movs	r2, #144	@ 0x90
 8004d6e:	2100      	movs	r1, #0
 8004d70:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	228c      	movs	r2, #140	@ 0x8c
 8004d76:	2122      	movs	r1, #34	@ 0x22
 8004d78:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d80:	f7fc fc9c 	bl	80016bc <HAL_GetTick>
 8004d84:	0003      	movs	r3, r0
 8004d86:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1dba      	adds	r2, r7, #6
 8004d8c:	215c      	movs	r1, #92	@ 0x5c
 8004d8e:	8812      	ldrh	r2, [r2, #0]
 8004d90:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1dba      	adds	r2, r7, #6
 8004d96:	215e      	movs	r1, #94	@ 0x5e
 8004d98:	8812      	ldrh	r2, [r2, #0]
 8004d9a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	2380      	movs	r3, #128	@ 0x80
 8004da2:	015b      	lsls	r3, r3, #5
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d10d      	bne.n	8004dc4 <HAL_UART_Receive+0xa8>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_UART_Receive+0x9e>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2260      	movs	r2, #96	@ 0x60
 8004db4:	494b      	ldr	r1, [pc, #300]	@ (8004ee4 <HAL_UART_Receive+0x1c8>)
 8004db6:	5299      	strh	r1, [r3, r2]
 8004db8:	e02e      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2260      	movs	r2, #96	@ 0x60
 8004dbe:	21ff      	movs	r1, #255	@ 0xff
 8004dc0:	5299      	strh	r1, [r3, r2]
 8004dc2:	e029      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10d      	bne.n	8004de8 <HAL_UART_Receive+0xcc>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <HAL_UART_Receive+0xc2>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2260      	movs	r2, #96	@ 0x60
 8004dd8:	21ff      	movs	r1, #255	@ 0xff
 8004dda:	5299      	strh	r1, [r3, r2]
 8004ddc:	e01c      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2260      	movs	r2, #96	@ 0x60
 8004de2:	217f      	movs	r1, #127	@ 0x7f
 8004de4:	5299      	strh	r1, [r3, r2]
 8004de6:	e017      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	055b      	lsls	r3, r3, #21
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d10d      	bne.n	8004e10 <HAL_UART_Receive+0xf4>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d104      	bne.n	8004e06 <HAL_UART_Receive+0xea>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2260      	movs	r2, #96	@ 0x60
 8004e00:	217f      	movs	r1, #127	@ 0x7f
 8004e02:	5299      	strh	r1, [r3, r2]
 8004e04:	e008      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2260      	movs	r2, #96	@ 0x60
 8004e0a:	213f      	movs	r1, #63	@ 0x3f
 8004e0c:	5299      	strh	r1, [r3, r2]
 8004e0e:	e003      	b.n	8004e18 <HAL_UART_Receive+0xfc>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2260      	movs	r2, #96	@ 0x60
 8004e14:	2100      	movs	r1, #0
 8004e16:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004e18:	2312      	movs	r3, #18
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	2160      	movs	r1, #96	@ 0x60
 8004e20:	5a52      	ldrh	r2, [r2, r1]
 8004e22:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	015b      	lsls	r3, r3, #5
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d108      	bne.n	8004e42 <HAL_UART_Receive+0x126>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	e003      	b.n	8004e4a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e4a:	e03a      	b.n	8004ec2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	0013      	movs	r3, r2
 8004e56:	2200      	movs	r2, #0
 8004e58:	2120      	movs	r1, #32
 8004e5a:	f000 fc61 	bl	8005720 <UART_WaitOnFlagUntilTimeout>
 8004e5e:	1e03      	subs	r3, r0, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	228c      	movs	r2, #140	@ 0x8c
 8004e66:	2120      	movs	r1, #32
 8004e68:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e036      	b.n	8004edc <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10e      	bne.n	8004e92 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2212      	movs	r2, #18
 8004e7e:	18ba      	adds	r2, r7, r2
 8004e80:	8812      	ldrh	r2, [r2, #0]
 8004e82:	4013      	ands	r3, r2
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e00e      	b.n	8004eb0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2212      	movs	r2, #18
 8004e9c:	18ba      	adds	r2, r7, r2
 8004e9e:	8812      	ldrh	r2, [r2, #0]
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3301      	adds	r3, #1
 8004eae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	225e      	movs	r2, #94	@ 0x5e
 8004eb4:	5a9b      	ldrh	r3, [r3, r2]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b299      	uxth	r1, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	225e      	movs	r2, #94	@ 0x5e
 8004ec0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	225e      	movs	r2, #94	@ 0x5e
 8004ec6:	5a9b      	ldrh	r3, [r3, r2]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1be      	bne.n	8004e4c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	228c      	movs	r2, #140	@ 0x8c
 8004ed2:	2120      	movs	r1, #32
 8004ed4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	e000      	b.n	8004edc <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
  }
}
 8004edc:	0018      	movs	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b008      	add	sp, #32
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	000001ff 	.word	0x000001ff

08004ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee8:	b5b0      	push	{r4, r5, r7, lr}
 8004eea:	b090      	sub	sp, #64	@ 0x40
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ef0:	231a      	movs	r3, #26
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	189b      	adds	r3, r3, r2
 8004ef6:	19db      	adds	r3, r3, r7
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4aaf      	ldr	r2, [pc, #700]	@ (80051d8 <UART_SetConfig+0x2f0>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	0019      	movs	r1, r3
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4aaa      	ldr	r2, [pc, #680]	@ (80051dc <UART_SetConfig+0x2f4>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	0018      	movs	r0, r3
 8004f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f38:	68d9      	ldr	r1, [r3, #12]
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	0003      	movs	r3, r0
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4aa4      	ldr	r2, [pc, #656]	@ (80051e0 <UART_SetConfig+0x2f8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4a9f      	ldr	r2, [pc, #636]	@ (80051e4 <UART_SetConfig+0x2fc>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	0019      	movs	r1, r3
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7a:	220f      	movs	r2, #15
 8004f7c:	4393      	bics	r3, r2
 8004f7e:	0018      	movs	r0, r3
 8004f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f82:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	0003      	movs	r3, r0
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a95      	ldr	r2, [pc, #596]	@ (80051e8 <UART_SetConfig+0x300>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d131      	bne.n	8004ffc <UART_SetConfig+0x114>
 8004f98:	4b94      	ldr	r3, [pc, #592]	@ (80051ec <UART_SetConfig+0x304>)
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b03      	cmp	r3, #3
 8004fa2:	d01d      	beq.n	8004fe0 <UART_SetConfig+0xf8>
 8004fa4:	d823      	bhi.n	8004fee <UART_SetConfig+0x106>
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d00c      	beq.n	8004fc4 <UART_SetConfig+0xdc>
 8004faa:	d820      	bhi.n	8004fee <UART_SetConfig+0x106>
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <UART_SetConfig+0xce>
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d00e      	beq.n	8004fd2 <UART_SetConfig+0xea>
 8004fb4:	e01b      	b.n	8004fee <UART_SetConfig+0x106>
 8004fb6:	231b      	movs	r3, #27
 8004fb8:	2220      	movs	r2, #32
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	19db      	adds	r3, r3, r7
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e0b4      	b.n	800512e <UART_SetConfig+0x246>
 8004fc4:	231b      	movs	r3, #27
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	189b      	adds	r3, r3, r2
 8004fca:	19db      	adds	r3, r3, r7
 8004fcc:	2202      	movs	r2, #2
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	e0ad      	b.n	800512e <UART_SetConfig+0x246>
 8004fd2:	231b      	movs	r3, #27
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	189b      	adds	r3, r3, r2
 8004fd8:	19db      	adds	r3, r3, r7
 8004fda:	2204      	movs	r2, #4
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e0a6      	b.n	800512e <UART_SetConfig+0x246>
 8004fe0:	231b      	movs	r3, #27
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	189b      	adds	r3, r3, r2
 8004fe6:	19db      	adds	r3, r3, r7
 8004fe8:	2208      	movs	r2, #8
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	e09f      	b.n	800512e <UART_SetConfig+0x246>
 8004fee:	231b      	movs	r3, #27
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	19db      	adds	r3, r3, r7
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e098      	b.n	800512e <UART_SetConfig+0x246>
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a7b      	ldr	r2, [pc, #492]	@ (80051f0 <UART_SetConfig+0x308>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d131      	bne.n	800506a <UART_SetConfig+0x182>
 8005006:	4b79      	ldr	r3, [pc, #484]	@ (80051ec <UART_SetConfig+0x304>)
 8005008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500a:	220c      	movs	r2, #12
 800500c:	4013      	ands	r3, r2
 800500e:	2b0c      	cmp	r3, #12
 8005010:	d01d      	beq.n	800504e <UART_SetConfig+0x166>
 8005012:	d823      	bhi.n	800505c <UART_SetConfig+0x174>
 8005014:	2b08      	cmp	r3, #8
 8005016:	d00c      	beq.n	8005032 <UART_SetConfig+0x14a>
 8005018:	d820      	bhi.n	800505c <UART_SetConfig+0x174>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <UART_SetConfig+0x13c>
 800501e:	2b04      	cmp	r3, #4
 8005020:	d00e      	beq.n	8005040 <UART_SetConfig+0x158>
 8005022:	e01b      	b.n	800505c <UART_SetConfig+0x174>
 8005024:	231b      	movs	r3, #27
 8005026:	2220      	movs	r2, #32
 8005028:	189b      	adds	r3, r3, r2
 800502a:	19db      	adds	r3, r3, r7
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e07d      	b.n	800512e <UART_SetConfig+0x246>
 8005032:	231b      	movs	r3, #27
 8005034:	2220      	movs	r2, #32
 8005036:	189b      	adds	r3, r3, r2
 8005038:	19db      	adds	r3, r3, r7
 800503a:	2202      	movs	r2, #2
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	e076      	b.n	800512e <UART_SetConfig+0x246>
 8005040:	231b      	movs	r3, #27
 8005042:	2220      	movs	r2, #32
 8005044:	189b      	adds	r3, r3, r2
 8005046:	19db      	adds	r3, r3, r7
 8005048:	2204      	movs	r2, #4
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	e06f      	b.n	800512e <UART_SetConfig+0x246>
 800504e:	231b      	movs	r3, #27
 8005050:	2220      	movs	r2, #32
 8005052:	189b      	adds	r3, r3, r2
 8005054:	19db      	adds	r3, r3, r7
 8005056:	2208      	movs	r2, #8
 8005058:	701a      	strb	r2, [r3, #0]
 800505a:	e068      	b.n	800512e <UART_SetConfig+0x246>
 800505c:	231b      	movs	r3, #27
 800505e:	2220      	movs	r2, #32
 8005060:	189b      	adds	r3, r3, r2
 8005062:	19db      	adds	r3, r3, r7
 8005064:	2210      	movs	r2, #16
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e061      	b.n	800512e <UART_SetConfig+0x246>
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a61      	ldr	r2, [pc, #388]	@ (80051f4 <UART_SetConfig+0x30c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d106      	bne.n	8005082 <UART_SetConfig+0x19a>
 8005074:	231b      	movs	r3, #27
 8005076:	2220      	movs	r2, #32
 8005078:	189b      	adds	r3, r3, r2
 800507a:	19db      	adds	r3, r3, r7
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e055      	b.n	800512e <UART_SetConfig+0x246>
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a5c      	ldr	r2, [pc, #368]	@ (80051f8 <UART_SetConfig+0x310>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d106      	bne.n	800509a <UART_SetConfig+0x1b2>
 800508c:	231b      	movs	r3, #27
 800508e:	2220      	movs	r2, #32
 8005090:	189b      	adds	r3, r3, r2
 8005092:	19db      	adds	r3, r3, r7
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e049      	b.n	800512e <UART_SetConfig+0x246>
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a50      	ldr	r2, [pc, #320]	@ (80051e0 <UART_SetConfig+0x2f8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d13e      	bne.n	8005122 <UART_SetConfig+0x23a>
 80050a4:	4b51      	ldr	r3, [pc, #324]	@ (80051ec <UART_SetConfig+0x304>)
 80050a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050a8:	23c0      	movs	r3, #192	@ 0xc0
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	4013      	ands	r3, r2
 80050ae:	22c0      	movs	r2, #192	@ 0xc0
 80050b0:	0112      	lsls	r2, r2, #4
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d027      	beq.n	8005106 <UART_SetConfig+0x21e>
 80050b6:	22c0      	movs	r2, #192	@ 0xc0
 80050b8:	0112      	lsls	r2, r2, #4
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d82a      	bhi.n	8005114 <UART_SetConfig+0x22c>
 80050be:	2280      	movs	r2, #128	@ 0x80
 80050c0:	0112      	lsls	r2, r2, #4
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d011      	beq.n	80050ea <UART_SetConfig+0x202>
 80050c6:	2280      	movs	r2, #128	@ 0x80
 80050c8:	0112      	lsls	r2, r2, #4
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d822      	bhi.n	8005114 <UART_SetConfig+0x22c>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d004      	beq.n	80050dc <UART_SetConfig+0x1f4>
 80050d2:	2280      	movs	r2, #128	@ 0x80
 80050d4:	00d2      	lsls	r2, r2, #3
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00e      	beq.n	80050f8 <UART_SetConfig+0x210>
 80050da:	e01b      	b.n	8005114 <UART_SetConfig+0x22c>
 80050dc:	231b      	movs	r3, #27
 80050de:	2220      	movs	r2, #32
 80050e0:	189b      	adds	r3, r3, r2
 80050e2:	19db      	adds	r3, r3, r7
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e021      	b.n	800512e <UART_SetConfig+0x246>
 80050ea:	231b      	movs	r3, #27
 80050ec:	2220      	movs	r2, #32
 80050ee:	189b      	adds	r3, r3, r2
 80050f0:	19db      	adds	r3, r3, r7
 80050f2:	2202      	movs	r2, #2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	e01a      	b.n	800512e <UART_SetConfig+0x246>
 80050f8:	231b      	movs	r3, #27
 80050fa:	2220      	movs	r2, #32
 80050fc:	189b      	adds	r3, r3, r2
 80050fe:	19db      	adds	r3, r3, r7
 8005100:	2204      	movs	r2, #4
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e013      	b.n	800512e <UART_SetConfig+0x246>
 8005106:	231b      	movs	r3, #27
 8005108:	2220      	movs	r2, #32
 800510a:	189b      	adds	r3, r3, r2
 800510c:	19db      	adds	r3, r3, r7
 800510e:	2208      	movs	r2, #8
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	e00c      	b.n	800512e <UART_SetConfig+0x246>
 8005114:	231b      	movs	r3, #27
 8005116:	2220      	movs	r2, #32
 8005118:	189b      	adds	r3, r3, r2
 800511a:	19db      	adds	r3, r3, r7
 800511c:	2210      	movs	r2, #16
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e005      	b.n	800512e <UART_SetConfig+0x246>
 8005122:	231b      	movs	r3, #27
 8005124:	2220      	movs	r2, #32
 8005126:	189b      	adds	r3, r3, r2
 8005128:	19db      	adds	r3, r3, r7
 800512a:	2210      	movs	r2, #16
 800512c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a2b      	ldr	r2, [pc, #172]	@ (80051e0 <UART_SetConfig+0x2f8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d000      	beq.n	800513a <UART_SetConfig+0x252>
 8005138:	e0a9      	b.n	800528e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800513a:	231b      	movs	r3, #27
 800513c:	2220      	movs	r2, #32
 800513e:	189b      	adds	r3, r3, r2
 8005140:	19db      	adds	r3, r3, r7
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d015      	beq.n	8005174 <UART_SetConfig+0x28c>
 8005148:	dc18      	bgt.n	800517c <UART_SetConfig+0x294>
 800514a:	2b04      	cmp	r3, #4
 800514c:	d00d      	beq.n	800516a <UART_SetConfig+0x282>
 800514e:	dc15      	bgt.n	800517c <UART_SetConfig+0x294>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <UART_SetConfig+0x272>
 8005154:	2b02      	cmp	r3, #2
 8005156:	d005      	beq.n	8005164 <UART_SetConfig+0x27c>
 8005158:	e010      	b.n	800517c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515a:	f7fe fc55 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 800515e:	0003      	movs	r3, r0
 8005160:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005162:	e014      	b.n	800518e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b25      	ldr	r3, [pc, #148]	@ (80051fc <UART_SetConfig+0x314>)
 8005166:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005168:	e011      	b.n	800518e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7fe fbc1 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 800516e:	0003      	movs	r3, r0
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005172:	e00c      	b.n	800518e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005174:	2380      	movs	r3, #128	@ 0x80
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800517a:	e008      	b.n	800518e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005180:	231a      	movs	r3, #26
 8005182:	2220      	movs	r2, #32
 8005184:	189b      	adds	r3, r3, r2
 8005186:	19db      	adds	r3, r3, r7
 8005188:	2201      	movs	r2, #1
 800518a:	701a      	strb	r2, [r3, #0]
        break;
 800518c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800518e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005190:	2b00      	cmp	r3, #0
 8005192:	d100      	bne.n	8005196 <UART_SetConfig+0x2ae>
 8005194:	e14b      	b.n	800542e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800519a:	4b19      	ldr	r3, [pc, #100]	@ (8005200 <UART_SetConfig+0x318>)
 800519c:	0052      	lsls	r2, r2, #1
 800519e:	5ad3      	ldrh	r3, [r2, r3]
 80051a0:	0019      	movs	r1, r3
 80051a2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80051a4:	f7fa ffc0 	bl	8000128 <__udivsi3>
 80051a8:	0003      	movs	r3, r0
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	0013      	movs	r3, r2
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d305      	bcc.n	80051c8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d91d      	bls.n	8005204 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80051c8:	231a      	movs	r3, #26
 80051ca:	2220      	movs	r2, #32
 80051cc:	189b      	adds	r3, r3, r2
 80051ce:	19db      	adds	r3, r3, r7
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	e12b      	b.n	800542e <UART_SetConfig+0x546>
 80051d6:	46c0      	nop			@ (mov r8, r8)
 80051d8:	cfff69f3 	.word	0xcfff69f3
 80051dc:	ffffcfff 	.word	0xffffcfff
 80051e0:	40008000 	.word	0x40008000
 80051e4:	11fff4ff 	.word	0x11fff4ff
 80051e8:	40013800 	.word	0x40013800
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40004400 	.word	0x40004400
 80051f4:	40004800 	.word	0x40004800
 80051f8:	40004c00 	.word	0x40004c00
 80051fc:	00f42400 	.word	0x00f42400
 8005200:	08006564 	.word	0x08006564
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	2300      	movs	r3, #0
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005210:	4b92      	ldr	r3, [pc, #584]	@ (800545c <UART_SetConfig+0x574>)
 8005212:	0052      	lsls	r2, r2, #1
 8005214:	5ad3      	ldrh	r3, [r2, r3]
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	69b8      	ldr	r0, [r7, #24]
 8005222:	69f9      	ldr	r1, [r7, #28]
 8005224:	f7fb f8f6 	bl	8000414 <__aeabi_uldivmod>
 8005228:	0002      	movs	r2, r0
 800522a:	000b      	movs	r3, r1
 800522c:	0e11      	lsrs	r1, r2, #24
 800522e:	021d      	lsls	r5, r3, #8
 8005230:	430d      	orrs	r5, r1
 8005232:	0214      	lsls	r4, r2, #8
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	68b8      	ldr	r0, [r7, #8]
 8005242:	68f9      	ldr	r1, [r7, #12]
 8005244:	1900      	adds	r0, r0, r4
 8005246:	4169      	adcs	r1, r5
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	607b      	str	r3, [r7, #4]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f7fb f8dd 	bl	8000414 <__aeabi_uldivmod>
 800525a:	0002      	movs	r2, r0
 800525c:	000b      	movs	r3, r1
 800525e:	0013      	movs	r3, r2
 8005260:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005264:	23c0      	movs	r3, #192	@ 0xc0
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	429a      	cmp	r2, r3
 800526a:	d309      	bcc.n	8005280 <UART_SetConfig+0x398>
 800526c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800526e:	2380      	movs	r3, #128	@ 0x80
 8005270:	035b      	lsls	r3, r3, #13
 8005272:	429a      	cmp	r2, r3
 8005274:	d204      	bcs.n	8005280 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800527c:	60da      	str	r2, [r3, #12]
 800527e:	e0d6      	b.n	800542e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005280:	231a      	movs	r3, #26
 8005282:	2220      	movs	r2, #32
 8005284:	189b      	adds	r3, r3, r2
 8005286:	19db      	adds	r3, r3, r7
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e0cf      	b.n	800542e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	69da      	ldr	r2, [r3, #28]
 8005292:	2380      	movs	r3, #128	@ 0x80
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	429a      	cmp	r2, r3
 8005298:	d000      	beq.n	800529c <UART_SetConfig+0x3b4>
 800529a:	e070      	b.n	800537e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800529c:	231b      	movs	r3, #27
 800529e:	2220      	movs	r2, #32
 80052a0:	189b      	adds	r3, r3, r2
 80052a2:	19db      	adds	r3, r3, r7
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d015      	beq.n	80052d6 <UART_SetConfig+0x3ee>
 80052aa:	dc18      	bgt.n	80052de <UART_SetConfig+0x3f6>
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d00d      	beq.n	80052cc <UART_SetConfig+0x3e4>
 80052b0:	dc15      	bgt.n	80052de <UART_SetConfig+0x3f6>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <UART_SetConfig+0x3d4>
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d005      	beq.n	80052c6 <UART_SetConfig+0x3de>
 80052ba:	e010      	b.n	80052de <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052bc:	f7fe fba4 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 80052c0:	0003      	movs	r3, r0
 80052c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052c4:	e014      	b.n	80052f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c6:	4b66      	ldr	r3, [pc, #408]	@ (8005460 <UART_SetConfig+0x578>)
 80052c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052ca:	e011      	b.n	80052f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052cc:	f7fe fb10 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80052d0:	0003      	movs	r3, r0
 80052d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052d4:	e00c      	b.n	80052f0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d6:	2380      	movs	r3, #128	@ 0x80
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052dc:	e008      	b.n	80052f0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80052e2:	231a      	movs	r3, #26
 80052e4:	2220      	movs	r2, #32
 80052e6:	189b      	adds	r3, r3, r2
 80052e8:	19db      	adds	r3, r3, r7
 80052ea:	2201      	movs	r2, #1
 80052ec:	701a      	strb	r2, [r3, #0]
        break;
 80052ee:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d100      	bne.n	80052f8 <UART_SetConfig+0x410>
 80052f6:	e09a      	b.n	800542e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052fc:	4b57      	ldr	r3, [pc, #348]	@ (800545c <UART_SetConfig+0x574>)
 80052fe:	0052      	lsls	r2, r2, #1
 8005300:	5ad3      	ldrh	r3, [r2, r3]
 8005302:	0019      	movs	r1, r3
 8005304:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005306:	f7fa ff0f 	bl	8000128 <__udivsi3>
 800530a:	0003      	movs	r3, r0
 800530c:	005a      	lsls	r2, r3, #1
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	18d2      	adds	r2, r2, r3
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	0019      	movs	r1, r3
 800531c:	0010      	movs	r0, r2
 800531e:	f7fa ff03 	bl	8000128 <__udivsi3>
 8005322:	0003      	movs	r3, r0
 8005324:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	2b0f      	cmp	r3, #15
 800532a:	d921      	bls.n	8005370 <UART_SetConfig+0x488>
 800532c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800532e:	2380      	movs	r3, #128	@ 0x80
 8005330:	025b      	lsls	r3, r3, #9
 8005332:	429a      	cmp	r2, r3
 8005334:	d21c      	bcs.n	8005370 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	b29a      	uxth	r2, r3
 800533a:	200e      	movs	r0, #14
 800533c:	2420      	movs	r4, #32
 800533e:	1903      	adds	r3, r0, r4
 8005340:	19db      	adds	r3, r3, r7
 8005342:	210f      	movs	r1, #15
 8005344:	438a      	bics	r2, r1
 8005346:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	b29b      	uxth	r3, r3
 800534e:	2207      	movs	r2, #7
 8005350:	4013      	ands	r3, r2
 8005352:	b299      	uxth	r1, r3
 8005354:	1903      	adds	r3, r0, r4
 8005356:	19db      	adds	r3, r3, r7
 8005358:	1902      	adds	r2, r0, r4
 800535a:	19d2      	adds	r2, r2, r7
 800535c:	8812      	ldrh	r2, [r2, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	1902      	adds	r2, r0, r4
 8005368:	19d2      	adds	r2, r2, r7
 800536a:	8812      	ldrh	r2, [r2, #0]
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	e05e      	b.n	800542e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005370:	231a      	movs	r3, #26
 8005372:	2220      	movs	r2, #32
 8005374:	189b      	adds	r3, r3, r2
 8005376:	19db      	adds	r3, r3, r7
 8005378:	2201      	movs	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	e057      	b.n	800542e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800537e:	231b      	movs	r3, #27
 8005380:	2220      	movs	r2, #32
 8005382:	189b      	adds	r3, r3, r2
 8005384:	19db      	adds	r3, r3, r7
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d015      	beq.n	80053b8 <UART_SetConfig+0x4d0>
 800538c:	dc18      	bgt.n	80053c0 <UART_SetConfig+0x4d8>
 800538e:	2b04      	cmp	r3, #4
 8005390:	d00d      	beq.n	80053ae <UART_SetConfig+0x4c6>
 8005392:	dc15      	bgt.n	80053c0 <UART_SetConfig+0x4d8>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <UART_SetConfig+0x4b6>
 8005398:	2b02      	cmp	r3, #2
 800539a:	d005      	beq.n	80053a8 <UART_SetConfig+0x4c0>
 800539c:	e010      	b.n	80053c0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539e:	f7fe fb33 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 80053a2:	0003      	movs	r3, r0
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053a6:	e014      	b.n	80053d2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005460 <UART_SetConfig+0x578>)
 80053aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053ac:	e011      	b.n	80053d2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ae:	f7fe fa9f 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80053b2:	0003      	movs	r3, r0
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053b6:	e00c      	b.n	80053d2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80053be:	e008      	b.n	80053d2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80053c4:	231a      	movs	r3, #26
 80053c6:	2220      	movs	r2, #32
 80053c8:	189b      	adds	r3, r3, r2
 80053ca:	19db      	adds	r3, r3, r7
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
        break;
 80053d0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d02a      	beq.n	800542e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053dc:	4b1f      	ldr	r3, [pc, #124]	@ (800545c <UART_SetConfig+0x574>)
 80053de:	0052      	lsls	r2, r2, #1
 80053e0:	5ad3      	ldrh	r3, [r2, r3]
 80053e2:	0019      	movs	r1, r3
 80053e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80053e6:	f7fa fe9f 	bl	8000128 <__udivsi3>
 80053ea:	0003      	movs	r3, r0
 80053ec:	001a      	movs	r2, r3
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	18d2      	adds	r2, r2, r3
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	0019      	movs	r1, r3
 80053fc:	0010      	movs	r0, r2
 80053fe:	f7fa fe93 	bl	8000128 <__udivsi3>
 8005402:	0003      	movs	r3, r0
 8005404:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	2b0f      	cmp	r3, #15
 800540a:	d90a      	bls.n	8005422 <UART_SetConfig+0x53a>
 800540c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	025b      	lsls	r3, r3, #9
 8005412:	429a      	cmp	r2, r3
 8005414:	d205      	bcs.n	8005422 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	b29a      	uxth	r2, r3
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60da      	str	r2, [r3, #12]
 8005420:	e005      	b.n	800542e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005422:	231a      	movs	r3, #26
 8005424:	2220      	movs	r2, #32
 8005426:	189b      	adds	r3, r3, r2
 8005428:	19db      	adds	r3, r3, r7
 800542a:	2201      	movs	r2, #1
 800542c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	226a      	movs	r2, #106	@ 0x6a
 8005432:	2101      	movs	r1, #1
 8005434:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	2268      	movs	r2, #104	@ 0x68
 800543a:	2101      	movs	r1, #1
 800543c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	2200      	movs	r2, #0
 8005442:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005446:	2200      	movs	r2, #0
 8005448:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800544a:	231a      	movs	r3, #26
 800544c:	2220      	movs	r2, #32
 800544e:	189b      	adds	r3, r3, r2
 8005450:	19db      	adds	r3, r3, r7
 8005452:	781b      	ldrb	r3, [r3, #0]
}
 8005454:	0018      	movs	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	b010      	add	sp, #64	@ 0x40
 800545a:	bdb0      	pop	{r4, r5, r7, pc}
 800545c:	08006564 	.word	0x08006564
 8005460:	00f42400 	.word	0x00f42400

08005464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005470:	2208      	movs	r2, #8
 8005472:	4013      	ands	r3, r2
 8005474:	d00b      	beq.n	800548e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a4a      	ldr	r2, [pc, #296]	@ (80055a8 <UART_AdvFeatureConfig+0x144>)
 800547e:	4013      	ands	r3, r2
 8005480:	0019      	movs	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	2201      	movs	r2, #1
 8005494:	4013      	ands	r3, r2
 8005496:	d00b      	beq.n	80054b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4a43      	ldr	r2, [pc, #268]	@ (80055ac <UART_AdvFeatureConfig+0x148>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	0019      	movs	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b4:	2202      	movs	r2, #2
 80054b6:	4013      	ands	r3, r2
 80054b8:	d00b      	beq.n	80054d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a3b      	ldr	r2, [pc, #236]	@ (80055b0 <UART_AdvFeatureConfig+0x14c>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	0019      	movs	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d6:	2204      	movs	r2, #4
 80054d8:	4013      	ands	r3, r2
 80054da:	d00b      	beq.n	80054f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	4a34      	ldr	r2, [pc, #208]	@ (80055b4 <UART_AdvFeatureConfig+0x150>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	0019      	movs	r1, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f8:	2210      	movs	r2, #16
 80054fa:	4013      	ands	r3, r2
 80054fc:	d00b      	beq.n	8005516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4a2c      	ldr	r2, [pc, #176]	@ (80055b8 <UART_AdvFeatureConfig+0x154>)
 8005506:	4013      	ands	r3, r2
 8005508:	0019      	movs	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551a:	2220      	movs	r2, #32
 800551c:	4013      	ands	r3, r2
 800551e:	d00b      	beq.n	8005538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	4a25      	ldr	r2, [pc, #148]	@ (80055bc <UART_AdvFeatureConfig+0x158>)
 8005528:	4013      	ands	r3, r2
 800552a:	0019      	movs	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553c:	2240      	movs	r2, #64	@ 0x40
 800553e:	4013      	ands	r3, r2
 8005540:	d01d      	beq.n	800557e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	4a1d      	ldr	r2, [pc, #116]	@ (80055c0 <UART_AdvFeatureConfig+0x15c>)
 800554a:	4013      	ands	r3, r2
 800554c:	0019      	movs	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800555e:	2380      	movs	r3, #128	@ 0x80
 8005560:	035b      	lsls	r3, r3, #13
 8005562:	429a      	cmp	r2, r3
 8005564:	d10b      	bne.n	800557e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a15      	ldr	r2, [pc, #84]	@ (80055c4 <UART_AdvFeatureConfig+0x160>)
 800556e:	4013      	ands	r3, r2
 8005570:	0019      	movs	r1, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005582:	2280      	movs	r2, #128	@ 0x80
 8005584:	4013      	ands	r3, r2
 8005586:	d00b      	beq.n	80055a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	4a0e      	ldr	r2, [pc, #56]	@ (80055c8 <UART_AdvFeatureConfig+0x164>)
 8005590:	4013      	ands	r3, r2
 8005592:	0019      	movs	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }
}
 80055a0:	46c0      	nop			@ (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b002      	add	sp, #8
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	ffff7fff 	.word	0xffff7fff
 80055ac:	fffdffff 	.word	0xfffdffff
 80055b0:	fffeffff 	.word	0xfffeffff
 80055b4:	fffbffff 	.word	0xfffbffff
 80055b8:	ffffefff 	.word	0xffffefff
 80055bc:	ffffdfff 	.word	0xffffdfff
 80055c0:	ffefffff 	.word	0xffefffff
 80055c4:	ff9fffff 	.word	0xff9fffff
 80055c8:	fff7ffff 	.word	0xfff7ffff

080055cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b092      	sub	sp, #72	@ 0x48
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2290      	movs	r2, #144	@ 0x90
 80055d8:	2100      	movs	r1, #0
 80055da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055dc:	f7fc f86e 	bl	80016bc <HAL_GetTick>
 80055e0:	0003      	movs	r3, r0
 80055e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2208      	movs	r2, #8
 80055ec:	4013      	ands	r3, r2
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d12d      	bne.n	800564e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f4:	2280      	movs	r2, #128	@ 0x80
 80055f6:	0391      	lsls	r1, r2, #14
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	4a47      	ldr	r2, [pc, #284]	@ (8005718 <UART_CheckIdleState+0x14c>)
 80055fc:	9200      	str	r2, [sp, #0]
 80055fe:	2200      	movs	r2, #0
 8005600:	f000 f88e 	bl	8005720 <UART_WaitOnFlagUntilTimeout>
 8005604:	1e03      	subs	r3, r0, #0
 8005606:	d022      	beq.n	800564e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005608:	f3ef 8310 	mrs	r3, PRIMASK
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005610:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005612:	2301      	movs	r3, #1
 8005614:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005618:	f383 8810 	msr	PRIMASK, r3
}
 800561c:	46c0      	nop			@ (mov r8, r8)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2180      	movs	r1, #128	@ 0x80
 800562a:	438a      	bics	r2, r1
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005634:	f383 8810 	msr	PRIMASK, r3
}
 8005638:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2288      	movs	r2, #136	@ 0x88
 800563e:	2120      	movs	r1, #32
 8005640:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2284      	movs	r2, #132	@ 0x84
 8005646:	2100      	movs	r1, #0
 8005648:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e060      	b.n	8005710 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2204      	movs	r2, #4
 8005656:	4013      	ands	r3, r2
 8005658:	2b04      	cmp	r3, #4
 800565a:	d146      	bne.n	80056ea <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800565c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565e:	2280      	movs	r2, #128	@ 0x80
 8005660:	03d1      	lsls	r1, r2, #15
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4a2c      	ldr	r2, [pc, #176]	@ (8005718 <UART_CheckIdleState+0x14c>)
 8005666:	9200      	str	r2, [sp, #0]
 8005668:	2200      	movs	r2, #0
 800566a:	f000 f859 	bl	8005720 <UART_WaitOnFlagUntilTimeout>
 800566e:	1e03      	subs	r3, r0, #0
 8005670:	d03b      	beq.n	80056ea <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005672:	f3ef 8310 	mrs	r3, PRIMASK
 8005676:	60fb      	str	r3, [r7, #12]
  return(result);
 8005678:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
 800567c:	2301      	movs	r3, #1
 800567e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f383 8810 	msr	PRIMASK, r3
}
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4922      	ldr	r1, [pc, #136]	@ (800571c <UART_CheckIdleState+0x150>)
 8005694:	400a      	ands	r2, r1
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800569a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a4:	f3ef 8310 	mrs	r3, PRIMASK
 80056a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80056aa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ae:	2301      	movs	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f383 8810 	msr	PRIMASK, r3
}
 80056b8:	46c0      	nop			@ (mov r8, r8)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2101      	movs	r1, #1
 80056c6:	438a      	bics	r2, r1
 80056c8:	609a      	str	r2, [r3, #8]
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	f383 8810 	msr	PRIMASK, r3
}
 80056d4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	228c      	movs	r2, #140	@ 0x8c
 80056da:	2120      	movs	r1, #32
 80056dc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2284      	movs	r2, #132	@ 0x84
 80056e2:	2100      	movs	r1, #0
 80056e4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e012      	b.n	8005710 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2288      	movs	r2, #136	@ 0x88
 80056ee:	2120      	movs	r1, #32
 80056f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	228c      	movs	r2, #140	@ 0x8c
 80056f6:	2120      	movs	r1, #32
 80056f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2284      	movs	r2, #132	@ 0x84
 800570a:	2100      	movs	r1, #0
 800570c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	0018      	movs	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	b010      	add	sp, #64	@ 0x40
 8005716:	bd80      	pop	{r7, pc}
 8005718:	01ffffff 	.word	0x01ffffff
 800571c:	fffffedf 	.word	0xfffffedf

08005720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	1dfb      	adds	r3, r7, #7
 800572e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005730:	e051      	b.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	3301      	adds	r3, #1
 8005736:	d04e      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005738:	f7fb ffc0 	bl	80016bc <HAL_GetTick>
 800573c:	0002      	movs	r2, r0
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	429a      	cmp	r2, r3
 8005746:	d302      	bcc.n	800574e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e051      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2204      	movs	r2, #4
 800575a:	4013      	ands	r3, r2
 800575c:	d03b      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b80      	cmp	r3, #128	@ 0x80
 8005762:	d038      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b40      	cmp	r3, #64	@ 0x40
 8005768:	d035      	beq.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	2208      	movs	r2, #8
 8005772:	4013      	ands	r3, r2
 8005774:	2b08      	cmp	r3, #8
 8005776:	d111      	bne.n	800579c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2208      	movs	r2, #8
 800577e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	0018      	movs	r0, r3
 8005784:	f000 f83c 	bl	8005800 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2290      	movs	r2, #144	@ 0x90
 800578c:	2108      	movs	r1, #8
 800578e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2284      	movs	r2, #132	@ 0x84
 8005794:	2100      	movs	r1, #0
 8005796:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e02c      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	2380      	movs	r3, #128	@ 0x80
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	401a      	ands	r2, r3
 80057a8:	2380      	movs	r3, #128	@ 0x80
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d112      	bne.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2280      	movs	r2, #128	@ 0x80
 80057b6:	0112      	lsls	r2, r2, #4
 80057b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	0018      	movs	r0, r3
 80057be:	f000 f81f 	bl	8005800 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2290      	movs	r2, #144	@ 0x90
 80057c6:	2120      	movs	r1, #32
 80057c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2284      	movs	r2, #132	@ 0x84
 80057ce:	2100      	movs	r1, #0
 80057d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e00f      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	4013      	ands	r3, r2
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	425a      	negs	r2, r3
 80057e6:	4153      	adcs	r3, r2
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	001a      	movs	r2, r3
 80057ec:	1dfb      	adds	r3, r7, #7
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d09e      	beq.n	8005732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	0018      	movs	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b004      	add	sp, #16
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b08e      	sub	sp, #56	@ 0x38
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005808:	f3ef 8310 	mrs	r3, PRIMASK
 800580c:	617b      	str	r3, [r7, #20]
  return(result);
 800580e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005810:	637b      	str	r3, [r7, #52]	@ 0x34
 8005812:	2301      	movs	r3, #1
 8005814:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f383 8810 	msr	PRIMASK, r3
}
 800581c:	46c0      	nop			@ (mov r8, r8)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4926      	ldr	r1, [pc, #152]	@ (80058c4 <UART_EndRxTransfer+0xc4>)
 800582a:	400a      	ands	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005830:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f383 8810 	msr	PRIMASK, r3
}
 8005838:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800583a:	f3ef 8310 	mrs	r3, PRIMASK
 800583e:	623b      	str	r3, [r7, #32]
  return(result);
 8005840:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005842:	633b      	str	r3, [r7, #48]	@ 0x30
 8005844:	2301      	movs	r3, #1
 8005846:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	f383 8810 	msr	PRIMASK, r3
}
 800584e:	46c0      	nop			@ (mov r8, r8)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	491b      	ldr	r1, [pc, #108]	@ (80058c8 <UART_EndRxTransfer+0xc8>)
 800585c:	400a      	ands	r2, r1
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005862:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	f383 8810 	msr	PRIMASK, r3
}
 800586a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d118      	bne.n	80058a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005874:	f3ef 8310 	mrs	r3, PRIMASK
 8005878:	60bb      	str	r3, [r7, #8]
  return(result);
 800587a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800587e:	2301      	movs	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f383 8810 	msr	PRIMASK, r3
}
 8005888:	46c0      	nop			@ (mov r8, r8)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2110      	movs	r1, #16
 8005896:	438a      	bics	r2, r1
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f383 8810 	msr	PRIMASK, r3
}
 80058a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	228c      	movs	r2, #140	@ 0x8c
 80058aa:	2120      	movs	r1, #32
 80058ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b00e      	add	sp, #56	@ 0x38
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	fffffedf 	.word	0xfffffedf
 80058c8:	effffffe 	.word	0xeffffffe

080058cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2284      	movs	r2, #132	@ 0x84
 80058d8:	5c9b      	ldrb	r3, [r3, r2]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80058de:	2302      	movs	r3, #2
 80058e0:	e027      	b.n	8005932 <HAL_UARTEx_DisableFifoMode+0x66>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2284      	movs	r2, #132	@ 0x84
 80058e6:	2101      	movs	r1, #1
 80058e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2288      	movs	r2, #136	@ 0x88
 80058ee:	2124      	movs	r1, #36	@ 0x24
 80058f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2101      	movs	r1, #1
 8005906:	438a      	bics	r2, r1
 8005908:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4a0b      	ldr	r2, [pc, #44]	@ (800593c <HAL_UARTEx_DisableFifoMode+0x70>)
 800590e:	4013      	ands	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2288      	movs	r2, #136	@ 0x88
 8005924:	2120      	movs	r1, #32
 8005926:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2284      	movs	r2, #132	@ 0x84
 800592c:	2100      	movs	r1, #0
 800592e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	0018      	movs	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	b004      	add	sp, #16
 8005938:	bd80      	pop	{r7, pc}
 800593a:	46c0      	nop			@ (mov r8, r8)
 800593c:	dfffffff 	.word	0xdfffffff

08005940 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2284      	movs	r2, #132	@ 0x84
 800594e:	5c9b      	ldrb	r3, [r3, r2]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005954:	2302      	movs	r3, #2
 8005956:	e02e      	b.n	80059b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2284      	movs	r2, #132	@ 0x84
 800595c:	2101      	movs	r1, #1
 800595e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2288      	movs	r2, #136	@ 0x88
 8005964:	2124      	movs	r1, #36	@ 0x24
 8005966:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2101      	movs	r1, #1
 800597c:	438a      	bics	r2, r1
 800597e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	08d9      	lsrs	r1, r3, #3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	0018      	movs	r0, r3
 8005998:	f000 f854 	bl	8005a44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2288      	movs	r2, #136	@ 0x88
 80059a8:	2120      	movs	r1, #32
 80059aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2284      	movs	r2, #132	@ 0x84
 80059b0:	2100      	movs	r1, #0
 80059b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b004      	add	sp, #16
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2284      	movs	r2, #132	@ 0x84
 80059ce:	5c9b      	ldrb	r3, [r3, r2]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059d4:	2302      	movs	r3, #2
 80059d6:	e02f      	b.n	8005a38 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2284      	movs	r2, #132	@ 0x84
 80059dc:	2101      	movs	r1, #1
 80059de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2288      	movs	r2, #136	@ 0x88
 80059e4:	2124      	movs	r1, #36	@ 0x24
 80059e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2101      	movs	r1, #1
 80059fc:	438a      	bics	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	4a0e      	ldr	r2, [pc, #56]	@ (8005a40 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f000 f813 	bl	8005a44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2288      	movs	r2, #136	@ 0x88
 8005a2a:	2120      	movs	r1, #32
 8005a2c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2284      	movs	r2, #132	@ 0x84
 8005a32:	2100      	movs	r1, #0
 8005a34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b004      	add	sp, #16
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	f1ffffff 	.word	0xf1ffffff

08005a44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	226a      	movs	r2, #106	@ 0x6a
 8005a58:	2101      	movs	r1, #1
 8005a5a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2268      	movs	r2, #104	@ 0x68
 8005a60:	2101      	movs	r1, #1
 8005a62:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a64:	e043      	b.n	8005aee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a66:	260f      	movs	r6, #15
 8005a68:	19bb      	adds	r3, r7, r6
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a6e:	200e      	movs	r0, #14
 8005a70:	183b      	adds	r3, r7, r0
 8005a72:	2208      	movs	r2, #8
 8005a74:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	0e5b      	lsrs	r3, r3, #25
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	240d      	movs	r4, #13
 8005a82:	193b      	adds	r3, r7, r4
 8005a84:	2107      	movs	r1, #7
 8005a86:	400a      	ands	r2, r1
 8005a88:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	0f5b      	lsrs	r3, r3, #29
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	250c      	movs	r5, #12
 8005a96:	197b      	adds	r3, r7, r5
 8005a98:	2107      	movs	r1, #7
 8005a9a:	400a      	ands	r2, r1
 8005a9c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a9e:	183b      	adds	r3, r7, r0
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	197a      	adds	r2, r7, r5
 8005aa4:	7812      	ldrb	r2, [r2, #0]
 8005aa6:	4914      	ldr	r1, [pc, #80]	@ (8005af8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005aa8:	5c8a      	ldrb	r2, [r1, r2]
 8005aaa:	435a      	muls	r2, r3
 8005aac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aae:	197b      	adds	r3, r7, r5
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	4a12      	ldr	r2, [pc, #72]	@ (8005afc <UARTEx_SetNbDataToProcess+0xb8>)
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ab6:	0019      	movs	r1, r3
 8005ab8:	f7fa fbc0 	bl	800023c <__divsi3>
 8005abc:	0003      	movs	r3, r0
 8005abe:	b299      	uxth	r1, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	226a      	movs	r2, #106	@ 0x6a
 8005ac4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ac6:	19bb      	adds	r3, r7, r6
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	193a      	adds	r2, r7, r4
 8005acc:	7812      	ldrb	r2, [r2, #0]
 8005ace:	490a      	ldr	r1, [pc, #40]	@ (8005af8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005ad0:	5c8a      	ldrb	r2, [r1, r2]
 8005ad2:	435a      	muls	r2, r3
 8005ad4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ad6:	193b      	adds	r3, r7, r4
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	4a08      	ldr	r2, [pc, #32]	@ (8005afc <UARTEx_SetNbDataToProcess+0xb8>)
 8005adc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ade:	0019      	movs	r1, r3
 8005ae0:	f7fa fbac 	bl	800023c <__divsi3>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	b299      	uxth	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2268      	movs	r2, #104	@ 0x68
 8005aec:	5299      	strh	r1, [r3, r2]
}
 8005aee:	46c0      	nop			@ (mov r8, r8)
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b005      	add	sp, #20
 8005af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	0800657c 	.word	0x0800657c
 8005afc:	08006584 	.word	0x08006584

08005b00 <siprintf>:
 8005b00:	b40e      	push	{r1, r2, r3}
 8005b02:	b500      	push	{lr}
 8005b04:	490b      	ldr	r1, [pc, #44]	@ (8005b34 <siprintf+0x34>)
 8005b06:	b09c      	sub	sp, #112	@ 0x70
 8005b08:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b0a:	9002      	str	r0, [sp, #8]
 8005b0c:	9006      	str	r0, [sp, #24]
 8005b0e:	9107      	str	r1, [sp, #28]
 8005b10:	9104      	str	r1, [sp, #16]
 8005b12:	4809      	ldr	r0, [pc, #36]	@ (8005b38 <siprintf+0x38>)
 8005b14:	4909      	ldr	r1, [pc, #36]	@ (8005b3c <siprintf+0x3c>)
 8005b16:	cb04      	ldmia	r3!, {r2}
 8005b18:	9105      	str	r1, [sp, #20]
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	a902      	add	r1, sp, #8
 8005b1e:	9301      	str	r3, [sp, #4]
 8005b20:	f000 f99e 	bl	8005e60 <_svfiprintf_r>
 8005b24:	2200      	movs	r2, #0
 8005b26:	9b02      	ldr	r3, [sp, #8]
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	b01c      	add	sp, #112	@ 0x70
 8005b2c:	bc08      	pop	{r3}
 8005b2e:	b003      	add	sp, #12
 8005b30:	4718      	bx	r3
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	7fffffff 	.word	0x7fffffff
 8005b38:	2000001c 	.word	0x2000001c
 8005b3c:	ffff0208 	.word	0xffff0208

08005b40 <memset>:
 8005b40:	0003      	movs	r3, r0
 8005b42:	1882      	adds	r2, r0, r2
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d100      	bne.n	8005b4a <memset+0xa>
 8005b48:	4770      	bx	lr
 8005b4a:	7019      	strb	r1, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	e7f9      	b.n	8005b44 <memset+0x4>

08005b50 <__errno>:
 8005b50:	4b01      	ldr	r3, [pc, #4]	@ (8005b58 <__errno+0x8>)
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	4770      	bx	lr
 8005b56:	46c0      	nop			@ (mov r8, r8)
 8005b58:	2000001c 	.word	0x2000001c

08005b5c <__libc_init_array>:
 8005b5c:	b570      	push	{r4, r5, r6, lr}
 8005b5e:	2600      	movs	r6, #0
 8005b60:	4c0c      	ldr	r4, [pc, #48]	@ (8005b94 <__libc_init_array+0x38>)
 8005b62:	4d0d      	ldr	r5, [pc, #52]	@ (8005b98 <__libc_init_array+0x3c>)
 8005b64:	1b64      	subs	r4, r4, r5
 8005b66:	10a4      	asrs	r4, r4, #2
 8005b68:	42a6      	cmp	r6, r4
 8005b6a:	d109      	bne.n	8005b80 <__libc_init_array+0x24>
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	f000 fc65 	bl	800643c <_init>
 8005b72:	4c0a      	ldr	r4, [pc, #40]	@ (8005b9c <__libc_init_array+0x40>)
 8005b74:	4d0a      	ldr	r5, [pc, #40]	@ (8005ba0 <__libc_init_array+0x44>)
 8005b76:	1b64      	subs	r4, r4, r5
 8005b78:	10a4      	asrs	r4, r4, #2
 8005b7a:	42a6      	cmp	r6, r4
 8005b7c:	d105      	bne.n	8005b8a <__libc_init_array+0x2e>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	00b3      	lsls	r3, r6, #2
 8005b82:	58eb      	ldr	r3, [r5, r3]
 8005b84:	4798      	blx	r3
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7ee      	b.n	8005b68 <__libc_init_array+0xc>
 8005b8a:	00b3      	lsls	r3, r6, #2
 8005b8c:	58eb      	ldr	r3, [r5, r3]
 8005b8e:	4798      	blx	r3
 8005b90:	3601      	adds	r6, #1
 8005b92:	e7f2      	b.n	8005b7a <__libc_init_array+0x1e>
 8005b94:	080065c8 	.word	0x080065c8
 8005b98:	080065c8 	.word	0x080065c8
 8005b9c:	080065cc 	.word	0x080065cc
 8005ba0:	080065c8 	.word	0x080065c8

08005ba4 <__retarget_lock_acquire_recursive>:
 8005ba4:	4770      	bx	lr

08005ba6 <__retarget_lock_release_recursive>:
 8005ba6:	4770      	bx	lr

08005ba8 <_free_r>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	0005      	movs	r5, r0
 8005bac:	1e0c      	subs	r4, r1, #0
 8005bae:	d010      	beq.n	8005bd2 <_free_r+0x2a>
 8005bb0:	3c04      	subs	r4, #4
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	da00      	bge.n	8005bba <_free_r+0x12>
 8005bb8:	18e4      	adds	r4, r4, r3
 8005bba:	0028      	movs	r0, r5
 8005bbc:	f000 f8e0 	bl	8005d80 <__malloc_lock>
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c38 <_free_r+0x90>)
 8005bc2:	6813      	ldr	r3, [r2, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d105      	bne.n	8005bd4 <_free_r+0x2c>
 8005bc8:	6063      	str	r3, [r4, #4]
 8005bca:	6014      	str	r4, [r2, #0]
 8005bcc:	0028      	movs	r0, r5
 8005bce:	f000 f8df 	bl	8005d90 <__malloc_unlock>
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	d908      	bls.n	8005bea <_free_r+0x42>
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	1821      	adds	r1, r4, r0
 8005bdc:	428b      	cmp	r3, r1
 8005bde:	d1f3      	bne.n	8005bc8 <_free_r+0x20>
 8005be0:	6819      	ldr	r1, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	1809      	adds	r1, r1, r0
 8005be6:	6021      	str	r1, [r4, #0]
 8005be8:	e7ee      	b.n	8005bc8 <_free_r+0x20>
 8005bea:	001a      	movs	r2, r3
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <_free_r+0x4e>
 8005bf2:	42a3      	cmp	r3, r4
 8005bf4:	d9f9      	bls.n	8005bea <_free_r+0x42>
 8005bf6:	6811      	ldr	r1, [r2, #0]
 8005bf8:	1850      	adds	r0, r2, r1
 8005bfa:	42a0      	cmp	r0, r4
 8005bfc:	d10b      	bne.n	8005c16 <_free_r+0x6e>
 8005bfe:	6820      	ldr	r0, [r4, #0]
 8005c00:	1809      	adds	r1, r1, r0
 8005c02:	1850      	adds	r0, r2, r1
 8005c04:	6011      	str	r1, [r2, #0]
 8005c06:	4283      	cmp	r3, r0
 8005c08:	d1e0      	bne.n	8005bcc <_free_r+0x24>
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	1841      	adds	r1, r0, r1
 8005c10:	6011      	str	r1, [r2, #0]
 8005c12:	6053      	str	r3, [r2, #4]
 8005c14:	e7da      	b.n	8005bcc <_free_r+0x24>
 8005c16:	42a0      	cmp	r0, r4
 8005c18:	d902      	bls.n	8005c20 <_free_r+0x78>
 8005c1a:	230c      	movs	r3, #12
 8005c1c:	602b      	str	r3, [r5, #0]
 8005c1e:	e7d5      	b.n	8005bcc <_free_r+0x24>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	1821      	adds	r1, r4, r0
 8005c24:	428b      	cmp	r3, r1
 8005c26:	d103      	bne.n	8005c30 <_free_r+0x88>
 8005c28:	6819      	ldr	r1, [r3, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	1809      	adds	r1, r1, r0
 8005c2e:	6021      	str	r1, [r4, #0]
 8005c30:	6063      	str	r3, [r4, #4]
 8005c32:	6054      	str	r4, [r2, #4]
 8005c34:	e7ca      	b.n	8005bcc <_free_r+0x24>
 8005c36:	46c0      	nop			@ (mov r8, r8)
 8005c38:	200003fc 	.word	0x200003fc

08005c3c <sbrk_aligned>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c7c <sbrk_aligned+0x40>)
 8005c40:	000d      	movs	r5, r1
 8005c42:	6831      	ldr	r1, [r6, #0]
 8005c44:	0004      	movs	r4, r0
 8005c46:	2900      	cmp	r1, #0
 8005c48:	d102      	bne.n	8005c50 <sbrk_aligned+0x14>
 8005c4a:	f000 fb99 	bl	8006380 <_sbrk_r>
 8005c4e:	6030      	str	r0, [r6, #0]
 8005c50:	0029      	movs	r1, r5
 8005c52:	0020      	movs	r0, r4
 8005c54:	f000 fb94 	bl	8006380 <_sbrk_r>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d103      	bne.n	8005c64 <sbrk_aligned+0x28>
 8005c5c:	2501      	movs	r5, #1
 8005c5e:	426d      	negs	r5, r5
 8005c60:	0028      	movs	r0, r5
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	2303      	movs	r3, #3
 8005c66:	1cc5      	adds	r5, r0, #3
 8005c68:	439d      	bics	r5, r3
 8005c6a:	42a8      	cmp	r0, r5
 8005c6c:	d0f8      	beq.n	8005c60 <sbrk_aligned+0x24>
 8005c6e:	1a29      	subs	r1, r5, r0
 8005c70:	0020      	movs	r0, r4
 8005c72:	f000 fb85 	bl	8006380 <_sbrk_r>
 8005c76:	3001      	adds	r0, #1
 8005c78:	d1f2      	bne.n	8005c60 <sbrk_aligned+0x24>
 8005c7a:	e7ef      	b.n	8005c5c <sbrk_aligned+0x20>
 8005c7c:	200003f8 	.word	0x200003f8

08005c80 <_malloc_r>:
 8005c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c82:	2203      	movs	r2, #3
 8005c84:	1ccb      	adds	r3, r1, #3
 8005c86:	4393      	bics	r3, r2
 8005c88:	3308      	adds	r3, #8
 8005c8a:	0005      	movs	r5, r0
 8005c8c:	001f      	movs	r7, r3
 8005c8e:	2b0c      	cmp	r3, #12
 8005c90:	d234      	bcs.n	8005cfc <_malloc_r+0x7c>
 8005c92:	270c      	movs	r7, #12
 8005c94:	42b9      	cmp	r1, r7
 8005c96:	d833      	bhi.n	8005d00 <_malloc_r+0x80>
 8005c98:	0028      	movs	r0, r5
 8005c9a:	f000 f871 	bl	8005d80 <__malloc_lock>
 8005c9e:	4e37      	ldr	r6, [pc, #220]	@ (8005d7c <_malloc_r+0xfc>)
 8005ca0:	6833      	ldr	r3, [r6, #0]
 8005ca2:	001c      	movs	r4, r3
 8005ca4:	2c00      	cmp	r4, #0
 8005ca6:	d12f      	bne.n	8005d08 <_malloc_r+0x88>
 8005ca8:	0039      	movs	r1, r7
 8005caa:	0028      	movs	r0, r5
 8005cac:	f7ff ffc6 	bl	8005c3c <sbrk_aligned>
 8005cb0:	0004      	movs	r4, r0
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	d15f      	bne.n	8005d76 <_malloc_r+0xf6>
 8005cb6:	6834      	ldr	r4, [r6, #0]
 8005cb8:	9400      	str	r4, [sp, #0]
 8005cba:	9b00      	ldr	r3, [sp, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d14a      	bne.n	8005d56 <_malloc_r+0xd6>
 8005cc0:	2c00      	cmp	r4, #0
 8005cc2:	d052      	beq.n	8005d6a <_malloc_r+0xea>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	0028      	movs	r0, r5
 8005cc8:	18e3      	adds	r3, r4, r3
 8005cca:	9900      	ldr	r1, [sp, #0]
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	f000 fb57 	bl	8006380 <_sbrk_r>
 8005cd2:	9b01      	ldr	r3, [sp, #4]
 8005cd4:	4283      	cmp	r3, r0
 8005cd6:	d148      	bne.n	8005d6a <_malloc_r+0xea>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	0028      	movs	r0, r5
 8005cdc:	1aff      	subs	r7, r7, r3
 8005cde:	0039      	movs	r1, r7
 8005ce0:	f7ff ffac 	bl	8005c3c <sbrk_aligned>
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d040      	beq.n	8005d6a <_malloc_r+0xea>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	19db      	adds	r3, r3, r7
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	6833      	ldr	r3, [r6, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	d133      	bne.n	8005d5e <_malloc_r+0xde>
 8005cf6:	9b00      	ldr	r3, [sp, #0]
 8005cf8:	6033      	str	r3, [r6, #0]
 8005cfa:	e019      	b.n	8005d30 <_malloc_r+0xb0>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	dac9      	bge.n	8005c94 <_malloc_r+0x14>
 8005d00:	230c      	movs	r3, #12
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	2000      	movs	r0, #0
 8005d06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d08:	6821      	ldr	r1, [r4, #0]
 8005d0a:	1bc9      	subs	r1, r1, r7
 8005d0c:	d420      	bmi.n	8005d50 <_malloc_r+0xd0>
 8005d0e:	290b      	cmp	r1, #11
 8005d10:	d90a      	bls.n	8005d28 <_malloc_r+0xa8>
 8005d12:	19e2      	adds	r2, r4, r7
 8005d14:	6027      	str	r7, [r4, #0]
 8005d16:	42a3      	cmp	r3, r4
 8005d18:	d104      	bne.n	8005d24 <_malloc_r+0xa4>
 8005d1a:	6032      	str	r2, [r6, #0]
 8005d1c:	6863      	ldr	r3, [r4, #4]
 8005d1e:	6011      	str	r1, [r2, #0]
 8005d20:	6053      	str	r3, [r2, #4]
 8005d22:	e005      	b.n	8005d30 <_malloc_r+0xb0>
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	e7f9      	b.n	8005d1c <_malloc_r+0x9c>
 8005d28:	6862      	ldr	r2, [r4, #4]
 8005d2a:	42a3      	cmp	r3, r4
 8005d2c:	d10e      	bne.n	8005d4c <_malloc_r+0xcc>
 8005d2e:	6032      	str	r2, [r6, #0]
 8005d30:	0028      	movs	r0, r5
 8005d32:	f000 f82d 	bl	8005d90 <__malloc_unlock>
 8005d36:	0020      	movs	r0, r4
 8005d38:	2207      	movs	r2, #7
 8005d3a:	300b      	adds	r0, #11
 8005d3c:	1d23      	adds	r3, r4, #4
 8005d3e:	4390      	bics	r0, r2
 8005d40:	1ac2      	subs	r2, r0, r3
 8005d42:	4298      	cmp	r0, r3
 8005d44:	d0df      	beq.n	8005d06 <_malloc_r+0x86>
 8005d46:	1a1b      	subs	r3, r3, r0
 8005d48:	50a3      	str	r3, [r4, r2]
 8005d4a:	e7dc      	b.n	8005d06 <_malloc_r+0x86>
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	e7ef      	b.n	8005d30 <_malloc_r+0xb0>
 8005d50:	0023      	movs	r3, r4
 8005d52:	6864      	ldr	r4, [r4, #4]
 8005d54:	e7a6      	b.n	8005ca4 <_malloc_r+0x24>
 8005d56:	9c00      	ldr	r4, [sp, #0]
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	e7ad      	b.n	8005cba <_malloc_r+0x3a>
 8005d5e:	001a      	movs	r2, r3
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	42a3      	cmp	r3, r4
 8005d64:	d1fb      	bne.n	8005d5e <_malloc_r+0xde>
 8005d66:	2300      	movs	r3, #0
 8005d68:	e7da      	b.n	8005d20 <_malloc_r+0xa0>
 8005d6a:	230c      	movs	r3, #12
 8005d6c:	0028      	movs	r0, r5
 8005d6e:	602b      	str	r3, [r5, #0]
 8005d70:	f000 f80e 	bl	8005d90 <__malloc_unlock>
 8005d74:	e7c6      	b.n	8005d04 <_malloc_r+0x84>
 8005d76:	6007      	str	r7, [r0, #0]
 8005d78:	e7da      	b.n	8005d30 <_malloc_r+0xb0>
 8005d7a:	46c0      	nop			@ (mov r8, r8)
 8005d7c:	200003fc 	.word	0x200003fc

08005d80 <__malloc_lock>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	4802      	ldr	r0, [pc, #8]	@ (8005d8c <__malloc_lock+0xc>)
 8005d84:	f7ff ff0e 	bl	8005ba4 <__retarget_lock_acquire_recursive>
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	46c0      	nop			@ (mov r8, r8)
 8005d8c:	200003f4 	.word	0x200003f4

08005d90 <__malloc_unlock>:
 8005d90:	b510      	push	{r4, lr}
 8005d92:	4802      	ldr	r0, [pc, #8]	@ (8005d9c <__malloc_unlock+0xc>)
 8005d94:	f7ff ff07 	bl	8005ba6 <__retarget_lock_release_recursive>
 8005d98:	bd10      	pop	{r4, pc}
 8005d9a:	46c0      	nop			@ (mov r8, r8)
 8005d9c:	200003f4 	.word	0x200003f4

08005da0 <__ssputs_r>:
 8005da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005da2:	688e      	ldr	r6, [r1, #8]
 8005da4:	b085      	sub	sp, #20
 8005da6:	001f      	movs	r7, r3
 8005da8:	000c      	movs	r4, r1
 8005daa:	680b      	ldr	r3, [r1, #0]
 8005dac:	9002      	str	r0, [sp, #8]
 8005dae:	9203      	str	r2, [sp, #12]
 8005db0:	42be      	cmp	r6, r7
 8005db2:	d830      	bhi.n	8005e16 <__ssputs_r+0x76>
 8005db4:	210c      	movs	r1, #12
 8005db6:	5e62      	ldrsh	r2, [r4, r1]
 8005db8:	2190      	movs	r1, #144	@ 0x90
 8005dba:	00c9      	lsls	r1, r1, #3
 8005dbc:	420a      	tst	r2, r1
 8005dbe:	d028      	beq.n	8005e12 <__ssputs_r+0x72>
 8005dc0:	2003      	movs	r0, #3
 8005dc2:	6921      	ldr	r1, [r4, #16]
 8005dc4:	1a5b      	subs	r3, r3, r1
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	6963      	ldr	r3, [r4, #20]
 8005dca:	4343      	muls	r3, r0
 8005dcc:	9801      	ldr	r0, [sp, #4]
 8005dce:	0fdd      	lsrs	r5, r3, #31
 8005dd0:	18ed      	adds	r5, r5, r3
 8005dd2:	1c7b      	adds	r3, r7, #1
 8005dd4:	181b      	adds	r3, r3, r0
 8005dd6:	106d      	asrs	r5, r5, #1
 8005dd8:	42ab      	cmp	r3, r5
 8005dda:	d900      	bls.n	8005dde <__ssputs_r+0x3e>
 8005ddc:	001d      	movs	r5, r3
 8005dde:	0552      	lsls	r2, r2, #21
 8005de0:	d528      	bpl.n	8005e34 <__ssputs_r+0x94>
 8005de2:	0029      	movs	r1, r5
 8005de4:	9802      	ldr	r0, [sp, #8]
 8005de6:	f7ff ff4b 	bl	8005c80 <_malloc_r>
 8005dea:	1e06      	subs	r6, r0, #0
 8005dec:	d02c      	beq.n	8005e48 <__ssputs_r+0xa8>
 8005dee:	9a01      	ldr	r2, [sp, #4]
 8005df0:	6921      	ldr	r1, [r4, #16]
 8005df2:	f000 fae2 	bl	80063ba <memcpy>
 8005df6:	89a2      	ldrh	r2, [r4, #12]
 8005df8:	4b18      	ldr	r3, [pc, #96]	@ (8005e5c <__ssputs_r+0xbc>)
 8005dfa:	401a      	ands	r2, r3
 8005dfc:	2380      	movs	r3, #128	@ 0x80
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	9b01      	ldr	r3, [sp, #4]
 8005e04:	6126      	str	r6, [r4, #16]
 8005e06:	18f6      	adds	r6, r6, r3
 8005e08:	6026      	str	r6, [r4, #0]
 8005e0a:	003e      	movs	r6, r7
 8005e0c:	6165      	str	r5, [r4, #20]
 8005e0e:	1aed      	subs	r5, r5, r3
 8005e10:	60a5      	str	r5, [r4, #8]
 8005e12:	42be      	cmp	r6, r7
 8005e14:	d900      	bls.n	8005e18 <__ssputs_r+0x78>
 8005e16:	003e      	movs	r6, r7
 8005e18:	0032      	movs	r2, r6
 8005e1a:	9903      	ldr	r1, [sp, #12]
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	f000 fa9b 	bl	8006358 <memmove>
 8005e22:	2000      	movs	r0, #0
 8005e24:	68a3      	ldr	r3, [r4, #8]
 8005e26:	1b9b      	subs	r3, r3, r6
 8005e28:	60a3      	str	r3, [r4, #8]
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	199b      	adds	r3, r3, r6
 8005e2e:	6023      	str	r3, [r4, #0]
 8005e30:	b005      	add	sp, #20
 8005e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e34:	002a      	movs	r2, r5
 8005e36:	9802      	ldr	r0, [sp, #8]
 8005e38:	f000 fac8 	bl	80063cc <_realloc_r>
 8005e3c:	1e06      	subs	r6, r0, #0
 8005e3e:	d1e0      	bne.n	8005e02 <__ssputs_r+0x62>
 8005e40:	6921      	ldr	r1, [r4, #16]
 8005e42:	9802      	ldr	r0, [sp, #8]
 8005e44:	f7ff feb0 	bl	8005ba8 <_free_r>
 8005e48:	230c      	movs	r3, #12
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	9a02      	ldr	r2, [sp, #8]
 8005e4e:	4240      	negs	r0, r0
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	89a2      	ldrh	r2, [r4, #12]
 8005e54:	3334      	adds	r3, #52	@ 0x34
 8005e56:	4313      	orrs	r3, r2
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	e7e9      	b.n	8005e30 <__ssputs_r+0x90>
 8005e5c:	fffffb7f 	.word	0xfffffb7f

08005e60 <_svfiprintf_r>:
 8005e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e62:	b0a1      	sub	sp, #132	@ 0x84
 8005e64:	9003      	str	r0, [sp, #12]
 8005e66:	001d      	movs	r5, r3
 8005e68:	898b      	ldrh	r3, [r1, #12]
 8005e6a:	000f      	movs	r7, r1
 8005e6c:	0016      	movs	r6, r2
 8005e6e:	061b      	lsls	r3, r3, #24
 8005e70:	d511      	bpl.n	8005e96 <_svfiprintf_r+0x36>
 8005e72:	690b      	ldr	r3, [r1, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10e      	bne.n	8005e96 <_svfiprintf_r+0x36>
 8005e78:	2140      	movs	r1, #64	@ 0x40
 8005e7a:	f7ff ff01 	bl	8005c80 <_malloc_r>
 8005e7e:	6038      	str	r0, [r7, #0]
 8005e80:	6138      	str	r0, [r7, #16]
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d105      	bne.n	8005e92 <_svfiprintf_r+0x32>
 8005e86:	230c      	movs	r3, #12
 8005e88:	9a03      	ldr	r2, [sp, #12]
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	2001      	movs	r0, #1
 8005e8e:	4240      	negs	r0, r0
 8005e90:	e0cf      	b.n	8006032 <_svfiprintf_r+0x1d2>
 8005e92:	2340      	movs	r3, #64	@ 0x40
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	2300      	movs	r3, #0
 8005e98:	ac08      	add	r4, sp, #32
 8005e9a:	6163      	str	r3, [r4, #20]
 8005e9c:	3320      	adds	r3, #32
 8005e9e:	7663      	strb	r3, [r4, #25]
 8005ea0:	3310      	adds	r3, #16
 8005ea2:	76a3      	strb	r3, [r4, #26]
 8005ea4:	9507      	str	r5, [sp, #28]
 8005ea6:	0035      	movs	r5, r6
 8005ea8:	782b      	ldrb	r3, [r5, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <_svfiprintf_r+0x52>
 8005eae:	2b25      	cmp	r3, #37	@ 0x25
 8005eb0:	d148      	bne.n	8005f44 <_svfiprintf_r+0xe4>
 8005eb2:	1bab      	subs	r3, r5, r6
 8005eb4:	9305      	str	r3, [sp, #20]
 8005eb6:	42b5      	cmp	r5, r6
 8005eb8:	d00b      	beq.n	8005ed2 <_svfiprintf_r+0x72>
 8005eba:	0032      	movs	r2, r6
 8005ebc:	0039      	movs	r1, r7
 8005ebe:	9803      	ldr	r0, [sp, #12]
 8005ec0:	f7ff ff6e 	bl	8005da0 <__ssputs_r>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	d100      	bne.n	8005eca <_svfiprintf_r+0x6a>
 8005ec8:	e0ae      	b.n	8006028 <_svfiprintf_r+0x1c8>
 8005eca:	6963      	ldr	r3, [r4, #20]
 8005ecc:	9a05      	ldr	r2, [sp, #20]
 8005ece:	189b      	adds	r3, r3, r2
 8005ed0:	6163      	str	r3, [r4, #20]
 8005ed2:	782b      	ldrb	r3, [r5, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d100      	bne.n	8005eda <_svfiprintf_r+0x7a>
 8005ed8:	e0a6      	b.n	8006028 <_svfiprintf_r+0x1c8>
 8005eda:	2201      	movs	r2, #1
 8005edc:	2300      	movs	r3, #0
 8005ede:	4252      	negs	r2, r2
 8005ee0:	6062      	str	r2, [r4, #4]
 8005ee2:	a904      	add	r1, sp, #16
 8005ee4:	3254      	adds	r2, #84	@ 0x54
 8005ee6:	1852      	adds	r2, r2, r1
 8005ee8:	1c6e      	adds	r6, r5, #1
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	60e3      	str	r3, [r4, #12]
 8005eee:	60a3      	str	r3, [r4, #8]
 8005ef0:	7013      	strb	r3, [r2, #0]
 8005ef2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005ef4:	4b54      	ldr	r3, [pc, #336]	@ (8006048 <_svfiprintf_r+0x1e8>)
 8005ef6:	2205      	movs	r2, #5
 8005ef8:	0018      	movs	r0, r3
 8005efa:	7831      	ldrb	r1, [r6, #0]
 8005efc:	9305      	str	r3, [sp, #20]
 8005efe:	f000 fa51 	bl	80063a4 <memchr>
 8005f02:	1c75      	adds	r5, r6, #1
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d11f      	bne.n	8005f48 <_svfiprintf_r+0xe8>
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	06d3      	lsls	r3, r2, #27
 8005f0c:	d504      	bpl.n	8005f18 <_svfiprintf_r+0xb8>
 8005f0e:	2353      	movs	r3, #83	@ 0x53
 8005f10:	a904      	add	r1, sp, #16
 8005f12:	185b      	adds	r3, r3, r1
 8005f14:	2120      	movs	r1, #32
 8005f16:	7019      	strb	r1, [r3, #0]
 8005f18:	0713      	lsls	r3, r2, #28
 8005f1a:	d504      	bpl.n	8005f26 <_svfiprintf_r+0xc6>
 8005f1c:	2353      	movs	r3, #83	@ 0x53
 8005f1e:	a904      	add	r1, sp, #16
 8005f20:	185b      	adds	r3, r3, r1
 8005f22:	212b      	movs	r1, #43	@ 0x2b
 8005f24:	7019      	strb	r1, [r3, #0]
 8005f26:	7833      	ldrb	r3, [r6, #0]
 8005f28:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f2a:	d016      	beq.n	8005f5a <_svfiprintf_r+0xfa>
 8005f2c:	0035      	movs	r5, r6
 8005f2e:	2100      	movs	r1, #0
 8005f30:	200a      	movs	r0, #10
 8005f32:	68e3      	ldr	r3, [r4, #12]
 8005f34:	782a      	ldrb	r2, [r5, #0]
 8005f36:	1c6e      	adds	r6, r5, #1
 8005f38:	3a30      	subs	r2, #48	@ 0x30
 8005f3a:	2a09      	cmp	r2, #9
 8005f3c:	d950      	bls.n	8005fe0 <_svfiprintf_r+0x180>
 8005f3e:	2900      	cmp	r1, #0
 8005f40:	d111      	bne.n	8005f66 <_svfiprintf_r+0x106>
 8005f42:	e017      	b.n	8005f74 <_svfiprintf_r+0x114>
 8005f44:	3501      	adds	r5, #1
 8005f46:	e7af      	b.n	8005ea8 <_svfiprintf_r+0x48>
 8005f48:	9b05      	ldr	r3, [sp, #20]
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	1ac0      	subs	r0, r0, r3
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4083      	lsls	r3, r0
 8005f52:	4313      	orrs	r3, r2
 8005f54:	002e      	movs	r6, r5
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	e7cc      	b.n	8005ef4 <_svfiprintf_r+0x94>
 8005f5a:	9b07      	ldr	r3, [sp, #28]
 8005f5c:	1d19      	adds	r1, r3, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	9107      	str	r1, [sp, #28]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	db01      	blt.n	8005f6a <_svfiprintf_r+0x10a>
 8005f66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f68:	e004      	b.n	8005f74 <_svfiprintf_r+0x114>
 8005f6a:	425b      	negs	r3, r3
 8005f6c:	60e3      	str	r3, [r4, #12]
 8005f6e:	2302      	movs	r3, #2
 8005f70:	4313      	orrs	r3, r2
 8005f72:	6023      	str	r3, [r4, #0]
 8005f74:	782b      	ldrb	r3, [r5, #0]
 8005f76:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f78:	d10c      	bne.n	8005f94 <_svfiprintf_r+0x134>
 8005f7a:	786b      	ldrb	r3, [r5, #1]
 8005f7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f7e:	d134      	bne.n	8005fea <_svfiprintf_r+0x18a>
 8005f80:	9b07      	ldr	r3, [sp, #28]
 8005f82:	3502      	adds	r5, #2
 8005f84:	1d1a      	adds	r2, r3, #4
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	9207      	str	r2, [sp, #28]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	da01      	bge.n	8005f92 <_svfiprintf_r+0x132>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	425b      	negs	r3, r3
 8005f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f94:	4e2d      	ldr	r6, [pc, #180]	@ (800604c <_svfiprintf_r+0x1ec>)
 8005f96:	2203      	movs	r2, #3
 8005f98:	0030      	movs	r0, r6
 8005f9a:	7829      	ldrb	r1, [r5, #0]
 8005f9c:	f000 fa02 	bl	80063a4 <memchr>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d006      	beq.n	8005fb2 <_svfiprintf_r+0x152>
 8005fa4:	2340      	movs	r3, #64	@ 0x40
 8005fa6:	1b80      	subs	r0, r0, r6
 8005fa8:	4083      	lsls	r3, r0
 8005faa:	6822      	ldr	r2, [r4, #0]
 8005fac:	3501      	adds	r5, #1
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	7829      	ldrb	r1, [r5, #0]
 8005fb4:	2206      	movs	r2, #6
 8005fb6:	4826      	ldr	r0, [pc, #152]	@ (8006050 <_svfiprintf_r+0x1f0>)
 8005fb8:	1c6e      	adds	r6, r5, #1
 8005fba:	7621      	strb	r1, [r4, #24]
 8005fbc:	f000 f9f2 	bl	80063a4 <memchr>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d038      	beq.n	8006036 <_svfiprintf_r+0x1d6>
 8005fc4:	4b23      	ldr	r3, [pc, #140]	@ (8006054 <_svfiprintf_r+0x1f4>)
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d122      	bne.n	8006010 <_svfiprintf_r+0x1b0>
 8005fca:	2207      	movs	r2, #7
 8005fcc:	9b07      	ldr	r3, [sp, #28]
 8005fce:	3307      	adds	r3, #7
 8005fd0:	4393      	bics	r3, r2
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	9307      	str	r3, [sp, #28]
 8005fd6:	6963      	ldr	r3, [r4, #20]
 8005fd8:	9a04      	ldr	r2, [sp, #16]
 8005fda:	189b      	adds	r3, r3, r2
 8005fdc:	6163      	str	r3, [r4, #20]
 8005fde:	e762      	b.n	8005ea6 <_svfiprintf_r+0x46>
 8005fe0:	4343      	muls	r3, r0
 8005fe2:	0035      	movs	r5, r6
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	189b      	adds	r3, r3, r2
 8005fe8:	e7a4      	b.n	8005f34 <_svfiprintf_r+0xd4>
 8005fea:	2300      	movs	r3, #0
 8005fec:	200a      	movs	r0, #10
 8005fee:	0019      	movs	r1, r3
 8005ff0:	3501      	adds	r5, #1
 8005ff2:	6063      	str	r3, [r4, #4]
 8005ff4:	782a      	ldrb	r2, [r5, #0]
 8005ff6:	1c6e      	adds	r6, r5, #1
 8005ff8:	3a30      	subs	r2, #48	@ 0x30
 8005ffa:	2a09      	cmp	r2, #9
 8005ffc:	d903      	bls.n	8006006 <_svfiprintf_r+0x1a6>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d0c8      	beq.n	8005f94 <_svfiprintf_r+0x134>
 8006002:	9109      	str	r1, [sp, #36]	@ 0x24
 8006004:	e7c6      	b.n	8005f94 <_svfiprintf_r+0x134>
 8006006:	4341      	muls	r1, r0
 8006008:	0035      	movs	r5, r6
 800600a:	2301      	movs	r3, #1
 800600c:	1889      	adds	r1, r1, r2
 800600e:	e7f1      	b.n	8005ff4 <_svfiprintf_r+0x194>
 8006010:	aa07      	add	r2, sp, #28
 8006012:	9200      	str	r2, [sp, #0]
 8006014:	0021      	movs	r1, r4
 8006016:	003a      	movs	r2, r7
 8006018:	4b0f      	ldr	r3, [pc, #60]	@ (8006058 <_svfiprintf_r+0x1f8>)
 800601a:	9803      	ldr	r0, [sp, #12]
 800601c:	e000      	b.n	8006020 <_svfiprintf_r+0x1c0>
 800601e:	bf00      	nop
 8006020:	9004      	str	r0, [sp, #16]
 8006022:	9b04      	ldr	r3, [sp, #16]
 8006024:	3301      	adds	r3, #1
 8006026:	d1d6      	bne.n	8005fd6 <_svfiprintf_r+0x176>
 8006028:	89bb      	ldrh	r3, [r7, #12]
 800602a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800602c:	065b      	lsls	r3, r3, #25
 800602e:	d500      	bpl.n	8006032 <_svfiprintf_r+0x1d2>
 8006030:	e72c      	b.n	8005e8c <_svfiprintf_r+0x2c>
 8006032:	b021      	add	sp, #132	@ 0x84
 8006034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006036:	aa07      	add	r2, sp, #28
 8006038:	9200      	str	r2, [sp, #0]
 800603a:	0021      	movs	r1, r4
 800603c:	003a      	movs	r2, r7
 800603e:	4b06      	ldr	r3, [pc, #24]	@ (8006058 <_svfiprintf_r+0x1f8>)
 8006040:	9803      	ldr	r0, [sp, #12]
 8006042:	f000 f87b 	bl	800613c <_printf_i>
 8006046:	e7eb      	b.n	8006020 <_svfiprintf_r+0x1c0>
 8006048:	0800658c 	.word	0x0800658c
 800604c:	08006592 	.word	0x08006592
 8006050:	08006596 	.word	0x08006596
 8006054:	00000000 	.word	0x00000000
 8006058:	08005da1 	.word	0x08005da1

0800605c <_printf_common>:
 800605c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800605e:	0016      	movs	r6, r2
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	688a      	ldr	r2, [r1, #8]
 8006064:	690b      	ldr	r3, [r1, #16]
 8006066:	000c      	movs	r4, r1
 8006068:	9000      	str	r0, [sp, #0]
 800606a:	4293      	cmp	r3, r2
 800606c:	da00      	bge.n	8006070 <_printf_common+0x14>
 800606e:	0013      	movs	r3, r2
 8006070:	0022      	movs	r2, r4
 8006072:	6033      	str	r3, [r6, #0]
 8006074:	3243      	adds	r2, #67	@ 0x43
 8006076:	7812      	ldrb	r2, [r2, #0]
 8006078:	2a00      	cmp	r2, #0
 800607a:	d001      	beq.n	8006080 <_printf_common+0x24>
 800607c:	3301      	adds	r3, #1
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	069b      	lsls	r3, r3, #26
 8006084:	d502      	bpl.n	800608c <_printf_common+0x30>
 8006086:	6833      	ldr	r3, [r6, #0]
 8006088:	3302      	adds	r3, #2
 800608a:	6033      	str	r3, [r6, #0]
 800608c:	6822      	ldr	r2, [r4, #0]
 800608e:	2306      	movs	r3, #6
 8006090:	0015      	movs	r5, r2
 8006092:	401d      	ands	r5, r3
 8006094:	421a      	tst	r2, r3
 8006096:	d027      	beq.n	80060e8 <_printf_common+0x8c>
 8006098:	0023      	movs	r3, r4
 800609a:	3343      	adds	r3, #67	@ 0x43
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	1e5a      	subs	r2, r3, #1
 80060a0:	4193      	sbcs	r3, r2
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	0692      	lsls	r2, r2, #26
 80060a6:	d430      	bmi.n	800610a <_printf_common+0xae>
 80060a8:	0022      	movs	r2, r4
 80060aa:	9901      	ldr	r1, [sp, #4]
 80060ac:	9800      	ldr	r0, [sp, #0]
 80060ae:	9d08      	ldr	r5, [sp, #32]
 80060b0:	3243      	adds	r2, #67	@ 0x43
 80060b2:	47a8      	blx	r5
 80060b4:	3001      	adds	r0, #1
 80060b6:	d025      	beq.n	8006104 <_printf_common+0xa8>
 80060b8:	2206      	movs	r2, #6
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	2500      	movs	r5, #0
 80060be:	4013      	ands	r3, r2
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d105      	bne.n	80060d0 <_printf_common+0x74>
 80060c4:	6833      	ldr	r3, [r6, #0]
 80060c6:	68e5      	ldr	r5, [r4, #12]
 80060c8:	1aed      	subs	r5, r5, r3
 80060ca:	43eb      	mvns	r3, r5
 80060cc:	17db      	asrs	r3, r3, #31
 80060ce:	401d      	ands	r5, r3
 80060d0:	68a3      	ldr	r3, [r4, #8]
 80060d2:	6922      	ldr	r2, [r4, #16]
 80060d4:	4293      	cmp	r3, r2
 80060d6:	dd01      	ble.n	80060dc <_printf_common+0x80>
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	18ed      	adds	r5, r5, r3
 80060dc:	2600      	movs	r6, #0
 80060de:	42b5      	cmp	r5, r6
 80060e0:	d120      	bne.n	8006124 <_printf_common+0xc8>
 80060e2:	2000      	movs	r0, #0
 80060e4:	e010      	b.n	8006108 <_printf_common+0xac>
 80060e6:	3501      	adds	r5, #1
 80060e8:	68e3      	ldr	r3, [r4, #12]
 80060ea:	6832      	ldr	r2, [r6, #0]
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	42ab      	cmp	r3, r5
 80060f0:	ddd2      	ble.n	8006098 <_printf_common+0x3c>
 80060f2:	0022      	movs	r2, r4
 80060f4:	2301      	movs	r3, #1
 80060f6:	9901      	ldr	r1, [sp, #4]
 80060f8:	9800      	ldr	r0, [sp, #0]
 80060fa:	9f08      	ldr	r7, [sp, #32]
 80060fc:	3219      	adds	r2, #25
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	d1f0      	bne.n	80060e6 <_printf_common+0x8a>
 8006104:	2001      	movs	r0, #1
 8006106:	4240      	negs	r0, r0
 8006108:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800610a:	2030      	movs	r0, #48	@ 0x30
 800610c:	18e1      	adds	r1, r4, r3
 800610e:	3143      	adds	r1, #67	@ 0x43
 8006110:	7008      	strb	r0, [r1, #0]
 8006112:	0021      	movs	r1, r4
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	3145      	adds	r1, #69	@ 0x45
 8006118:	7809      	ldrb	r1, [r1, #0]
 800611a:	18a2      	adds	r2, r4, r2
 800611c:	3243      	adds	r2, #67	@ 0x43
 800611e:	3302      	adds	r3, #2
 8006120:	7011      	strb	r1, [r2, #0]
 8006122:	e7c1      	b.n	80060a8 <_printf_common+0x4c>
 8006124:	0022      	movs	r2, r4
 8006126:	2301      	movs	r3, #1
 8006128:	9901      	ldr	r1, [sp, #4]
 800612a:	9800      	ldr	r0, [sp, #0]
 800612c:	9f08      	ldr	r7, [sp, #32]
 800612e:	321a      	adds	r2, #26
 8006130:	47b8      	blx	r7
 8006132:	3001      	adds	r0, #1
 8006134:	d0e6      	beq.n	8006104 <_printf_common+0xa8>
 8006136:	3601      	adds	r6, #1
 8006138:	e7d1      	b.n	80060de <_printf_common+0x82>
	...

0800613c <_printf_i>:
 800613c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800613e:	b08b      	sub	sp, #44	@ 0x2c
 8006140:	9206      	str	r2, [sp, #24]
 8006142:	000a      	movs	r2, r1
 8006144:	3243      	adds	r2, #67	@ 0x43
 8006146:	9307      	str	r3, [sp, #28]
 8006148:	9005      	str	r0, [sp, #20]
 800614a:	9203      	str	r2, [sp, #12]
 800614c:	7e0a      	ldrb	r2, [r1, #24]
 800614e:	000c      	movs	r4, r1
 8006150:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006152:	2a78      	cmp	r2, #120	@ 0x78
 8006154:	d809      	bhi.n	800616a <_printf_i+0x2e>
 8006156:	2a62      	cmp	r2, #98	@ 0x62
 8006158:	d80b      	bhi.n	8006172 <_printf_i+0x36>
 800615a:	2a00      	cmp	r2, #0
 800615c:	d100      	bne.n	8006160 <_printf_i+0x24>
 800615e:	e0bc      	b.n	80062da <_printf_i+0x19e>
 8006160:	497b      	ldr	r1, [pc, #492]	@ (8006350 <_printf_i+0x214>)
 8006162:	9104      	str	r1, [sp, #16]
 8006164:	2a58      	cmp	r2, #88	@ 0x58
 8006166:	d100      	bne.n	800616a <_printf_i+0x2e>
 8006168:	e090      	b.n	800628c <_printf_i+0x150>
 800616a:	0025      	movs	r5, r4
 800616c:	3542      	adds	r5, #66	@ 0x42
 800616e:	702a      	strb	r2, [r5, #0]
 8006170:	e022      	b.n	80061b8 <_printf_i+0x7c>
 8006172:	0010      	movs	r0, r2
 8006174:	3863      	subs	r0, #99	@ 0x63
 8006176:	2815      	cmp	r0, #21
 8006178:	d8f7      	bhi.n	800616a <_printf_i+0x2e>
 800617a:	f7f9 ffcb 	bl	8000114 <__gnu_thumb1_case_shi>
 800617e:	0016      	.short	0x0016
 8006180:	fff6001f 	.word	0xfff6001f
 8006184:	fff6fff6 	.word	0xfff6fff6
 8006188:	001ffff6 	.word	0x001ffff6
 800618c:	fff6fff6 	.word	0xfff6fff6
 8006190:	fff6fff6 	.word	0xfff6fff6
 8006194:	003600a1 	.word	0x003600a1
 8006198:	fff60080 	.word	0xfff60080
 800619c:	00b2fff6 	.word	0x00b2fff6
 80061a0:	0036fff6 	.word	0x0036fff6
 80061a4:	fff6fff6 	.word	0xfff6fff6
 80061a8:	0084      	.short	0x0084
 80061aa:	0025      	movs	r5, r4
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	3542      	adds	r5, #66	@ 0x42
 80061b0:	1d11      	adds	r1, r2, #4
 80061b2:	6019      	str	r1, [r3, #0]
 80061b4:	6813      	ldr	r3, [r2, #0]
 80061b6:	702b      	strb	r3, [r5, #0]
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0a0      	b.n	80062fe <_printf_i+0x1c2>
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	6809      	ldr	r1, [r1, #0]
 80061c0:	1d02      	adds	r2, r0, #4
 80061c2:	060d      	lsls	r5, r1, #24
 80061c4:	d50b      	bpl.n	80061de <_printf_i+0xa2>
 80061c6:	6806      	ldr	r6, [r0, #0]
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	da03      	bge.n	80061d6 <_printf_i+0x9a>
 80061ce:	232d      	movs	r3, #45	@ 0x2d
 80061d0:	9a03      	ldr	r2, [sp, #12]
 80061d2:	4276      	negs	r6, r6
 80061d4:	7013      	strb	r3, [r2, #0]
 80061d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006350 <_printf_i+0x214>)
 80061d8:	270a      	movs	r7, #10
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	e018      	b.n	8006210 <_printf_i+0xd4>
 80061de:	6806      	ldr	r6, [r0, #0]
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	0649      	lsls	r1, r1, #25
 80061e4:	d5f1      	bpl.n	80061ca <_printf_i+0x8e>
 80061e6:	b236      	sxth	r6, r6
 80061e8:	e7ef      	b.n	80061ca <_printf_i+0x8e>
 80061ea:	6808      	ldr	r0, [r1, #0]
 80061ec:	6819      	ldr	r1, [r3, #0]
 80061ee:	c940      	ldmia	r1!, {r6}
 80061f0:	0605      	lsls	r5, r0, #24
 80061f2:	d402      	bmi.n	80061fa <_printf_i+0xbe>
 80061f4:	0640      	lsls	r0, r0, #25
 80061f6:	d500      	bpl.n	80061fa <_printf_i+0xbe>
 80061f8:	b2b6      	uxth	r6, r6
 80061fa:	6019      	str	r1, [r3, #0]
 80061fc:	4b54      	ldr	r3, [pc, #336]	@ (8006350 <_printf_i+0x214>)
 80061fe:	270a      	movs	r7, #10
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	2a6f      	cmp	r2, #111	@ 0x6f
 8006204:	d100      	bne.n	8006208 <_printf_i+0xcc>
 8006206:	3f02      	subs	r7, #2
 8006208:	0023      	movs	r3, r4
 800620a:	2200      	movs	r2, #0
 800620c:	3343      	adds	r3, #67	@ 0x43
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	6863      	ldr	r3, [r4, #4]
 8006212:	60a3      	str	r3, [r4, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	db03      	blt.n	8006220 <_printf_i+0xe4>
 8006218:	2104      	movs	r1, #4
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	438a      	bics	r2, r1
 800621e:	6022      	str	r2, [r4, #0]
 8006220:	2e00      	cmp	r6, #0
 8006222:	d102      	bne.n	800622a <_printf_i+0xee>
 8006224:	9d03      	ldr	r5, [sp, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00c      	beq.n	8006244 <_printf_i+0x108>
 800622a:	9d03      	ldr	r5, [sp, #12]
 800622c:	0030      	movs	r0, r6
 800622e:	0039      	movs	r1, r7
 8006230:	f7fa f800 	bl	8000234 <__aeabi_uidivmod>
 8006234:	9b04      	ldr	r3, [sp, #16]
 8006236:	3d01      	subs	r5, #1
 8006238:	5c5b      	ldrb	r3, [r3, r1]
 800623a:	702b      	strb	r3, [r5, #0]
 800623c:	0033      	movs	r3, r6
 800623e:	0006      	movs	r6, r0
 8006240:	429f      	cmp	r7, r3
 8006242:	d9f3      	bls.n	800622c <_printf_i+0xf0>
 8006244:	2f08      	cmp	r7, #8
 8006246:	d109      	bne.n	800625c <_printf_i+0x120>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	07db      	lsls	r3, r3, #31
 800624c:	d506      	bpl.n	800625c <_printf_i+0x120>
 800624e:	6862      	ldr	r2, [r4, #4]
 8006250:	6923      	ldr	r3, [r4, #16]
 8006252:	429a      	cmp	r2, r3
 8006254:	dc02      	bgt.n	800625c <_printf_i+0x120>
 8006256:	2330      	movs	r3, #48	@ 0x30
 8006258:	3d01      	subs	r5, #1
 800625a:	702b      	strb	r3, [r5, #0]
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	1b5b      	subs	r3, r3, r5
 8006260:	6123      	str	r3, [r4, #16]
 8006262:	9b07      	ldr	r3, [sp, #28]
 8006264:	0021      	movs	r1, r4
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	9805      	ldr	r0, [sp, #20]
 800626a:	9b06      	ldr	r3, [sp, #24]
 800626c:	aa09      	add	r2, sp, #36	@ 0x24
 800626e:	f7ff fef5 	bl	800605c <_printf_common>
 8006272:	3001      	adds	r0, #1
 8006274:	d148      	bne.n	8006308 <_printf_i+0x1cc>
 8006276:	2001      	movs	r0, #1
 8006278:	4240      	negs	r0, r0
 800627a:	b00b      	add	sp, #44	@ 0x2c
 800627c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627e:	2220      	movs	r2, #32
 8006280:	6809      	ldr	r1, [r1, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	6022      	str	r2, [r4, #0]
 8006286:	2278      	movs	r2, #120	@ 0x78
 8006288:	4932      	ldr	r1, [pc, #200]	@ (8006354 <_printf_i+0x218>)
 800628a:	9104      	str	r1, [sp, #16]
 800628c:	0021      	movs	r1, r4
 800628e:	3145      	adds	r1, #69	@ 0x45
 8006290:	700a      	strb	r2, [r1, #0]
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	6822      	ldr	r2, [r4, #0]
 8006296:	c940      	ldmia	r1!, {r6}
 8006298:	0610      	lsls	r0, r2, #24
 800629a:	d402      	bmi.n	80062a2 <_printf_i+0x166>
 800629c:	0650      	lsls	r0, r2, #25
 800629e:	d500      	bpl.n	80062a2 <_printf_i+0x166>
 80062a0:	b2b6      	uxth	r6, r6
 80062a2:	6019      	str	r1, [r3, #0]
 80062a4:	07d3      	lsls	r3, r2, #31
 80062a6:	d502      	bpl.n	80062ae <_printf_i+0x172>
 80062a8:	2320      	movs	r3, #32
 80062aa:	4313      	orrs	r3, r2
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	d001      	beq.n	80062b6 <_printf_i+0x17a>
 80062b2:	2710      	movs	r7, #16
 80062b4:	e7a8      	b.n	8006208 <_printf_i+0xcc>
 80062b6:	2220      	movs	r2, #32
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	4393      	bics	r3, r2
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	e7f8      	b.n	80062b2 <_printf_i+0x176>
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	680d      	ldr	r5, [r1, #0]
 80062c4:	1d10      	adds	r0, r2, #4
 80062c6:	6949      	ldr	r1, [r1, #20]
 80062c8:	6018      	str	r0, [r3, #0]
 80062ca:	6813      	ldr	r3, [r2, #0]
 80062cc:	062e      	lsls	r6, r5, #24
 80062ce:	d501      	bpl.n	80062d4 <_printf_i+0x198>
 80062d0:	6019      	str	r1, [r3, #0]
 80062d2:	e002      	b.n	80062da <_printf_i+0x19e>
 80062d4:	066d      	lsls	r5, r5, #25
 80062d6:	d5fb      	bpl.n	80062d0 <_printf_i+0x194>
 80062d8:	8019      	strh	r1, [r3, #0]
 80062da:	2300      	movs	r3, #0
 80062dc:	9d03      	ldr	r5, [sp, #12]
 80062de:	6123      	str	r3, [r4, #16]
 80062e0:	e7bf      	b.n	8006262 <_printf_i+0x126>
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	1d11      	adds	r1, r2, #4
 80062e6:	6019      	str	r1, [r3, #0]
 80062e8:	6815      	ldr	r5, [r2, #0]
 80062ea:	2100      	movs	r1, #0
 80062ec:	0028      	movs	r0, r5
 80062ee:	6862      	ldr	r2, [r4, #4]
 80062f0:	f000 f858 	bl	80063a4 <memchr>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d001      	beq.n	80062fc <_printf_i+0x1c0>
 80062f8:	1b40      	subs	r0, r0, r5
 80062fa:	6060      	str	r0, [r4, #4]
 80062fc:	6863      	ldr	r3, [r4, #4]
 80062fe:	6123      	str	r3, [r4, #16]
 8006300:	2300      	movs	r3, #0
 8006302:	9a03      	ldr	r2, [sp, #12]
 8006304:	7013      	strb	r3, [r2, #0]
 8006306:	e7ac      	b.n	8006262 <_printf_i+0x126>
 8006308:	002a      	movs	r2, r5
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	9906      	ldr	r1, [sp, #24]
 800630e:	9805      	ldr	r0, [sp, #20]
 8006310:	9d07      	ldr	r5, [sp, #28]
 8006312:	47a8      	blx	r5
 8006314:	3001      	adds	r0, #1
 8006316:	d0ae      	beq.n	8006276 <_printf_i+0x13a>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	079b      	lsls	r3, r3, #30
 800631c:	d415      	bmi.n	800634a <_printf_i+0x20e>
 800631e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006320:	68e0      	ldr	r0, [r4, #12]
 8006322:	4298      	cmp	r0, r3
 8006324:	daa9      	bge.n	800627a <_printf_i+0x13e>
 8006326:	0018      	movs	r0, r3
 8006328:	e7a7      	b.n	800627a <_printf_i+0x13e>
 800632a:	0022      	movs	r2, r4
 800632c:	2301      	movs	r3, #1
 800632e:	9906      	ldr	r1, [sp, #24]
 8006330:	9805      	ldr	r0, [sp, #20]
 8006332:	9e07      	ldr	r6, [sp, #28]
 8006334:	3219      	adds	r2, #25
 8006336:	47b0      	blx	r6
 8006338:	3001      	adds	r0, #1
 800633a:	d09c      	beq.n	8006276 <_printf_i+0x13a>
 800633c:	3501      	adds	r5, #1
 800633e:	68e3      	ldr	r3, [r4, #12]
 8006340:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006342:	1a9b      	subs	r3, r3, r2
 8006344:	42ab      	cmp	r3, r5
 8006346:	dcf0      	bgt.n	800632a <_printf_i+0x1ee>
 8006348:	e7e9      	b.n	800631e <_printf_i+0x1e2>
 800634a:	2500      	movs	r5, #0
 800634c:	e7f7      	b.n	800633e <_printf_i+0x202>
 800634e:	46c0      	nop			@ (mov r8, r8)
 8006350:	0800659d 	.word	0x0800659d
 8006354:	080065ae 	.word	0x080065ae

08006358 <memmove>:
 8006358:	b510      	push	{r4, lr}
 800635a:	4288      	cmp	r0, r1
 800635c:	d806      	bhi.n	800636c <memmove+0x14>
 800635e:	2300      	movs	r3, #0
 8006360:	429a      	cmp	r2, r3
 8006362:	d008      	beq.n	8006376 <memmove+0x1e>
 8006364:	5ccc      	ldrb	r4, [r1, r3]
 8006366:	54c4      	strb	r4, [r0, r3]
 8006368:	3301      	adds	r3, #1
 800636a:	e7f9      	b.n	8006360 <memmove+0x8>
 800636c:	188b      	adds	r3, r1, r2
 800636e:	4298      	cmp	r0, r3
 8006370:	d2f5      	bcs.n	800635e <memmove+0x6>
 8006372:	3a01      	subs	r2, #1
 8006374:	d200      	bcs.n	8006378 <memmove+0x20>
 8006376:	bd10      	pop	{r4, pc}
 8006378:	5c8b      	ldrb	r3, [r1, r2]
 800637a:	5483      	strb	r3, [r0, r2]
 800637c:	e7f9      	b.n	8006372 <memmove+0x1a>
	...

08006380 <_sbrk_r>:
 8006380:	2300      	movs	r3, #0
 8006382:	b570      	push	{r4, r5, r6, lr}
 8006384:	4d06      	ldr	r5, [pc, #24]	@ (80063a0 <_sbrk_r+0x20>)
 8006386:	0004      	movs	r4, r0
 8006388:	0008      	movs	r0, r1
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	f7fb f8b4 	bl	80014f8 <_sbrk>
 8006390:	1c43      	adds	r3, r0, #1
 8006392:	d103      	bne.n	800639c <_sbrk_r+0x1c>
 8006394:	682b      	ldr	r3, [r5, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d000      	beq.n	800639c <_sbrk_r+0x1c>
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	bd70      	pop	{r4, r5, r6, pc}
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	200003f0 	.word	0x200003f0

080063a4 <memchr>:
 80063a4:	b2c9      	uxtb	r1, r1
 80063a6:	1882      	adds	r2, r0, r2
 80063a8:	4290      	cmp	r0, r2
 80063aa:	d101      	bne.n	80063b0 <memchr+0xc>
 80063ac:	2000      	movs	r0, #0
 80063ae:	4770      	bx	lr
 80063b0:	7803      	ldrb	r3, [r0, #0]
 80063b2:	428b      	cmp	r3, r1
 80063b4:	d0fb      	beq.n	80063ae <memchr+0xa>
 80063b6:	3001      	adds	r0, #1
 80063b8:	e7f6      	b.n	80063a8 <memchr+0x4>

080063ba <memcpy>:
 80063ba:	2300      	movs	r3, #0
 80063bc:	b510      	push	{r4, lr}
 80063be:	429a      	cmp	r2, r3
 80063c0:	d100      	bne.n	80063c4 <memcpy+0xa>
 80063c2:	bd10      	pop	{r4, pc}
 80063c4:	5ccc      	ldrb	r4, [r1, r3]
 80063c6:	54c4      	strb	r4, [r0, r3]
 80063c8:	3301      	adds	r3, #1
 80063ca:	e7f8      	b.n	80063be <memcpy+0x4>

080063cc <_realloc_r>:
 80063cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ce:	0006      	movs	r6, r0
 80063d0:	000c      	movs	r4, r1
 80063d2:	0015      	movs	r5, r2
 80063d4:	2900      	cmp	r1, #0
 80063d6:	d105      	bne.n	80063e4 <_realloc_r+0x18>
 80063d8:	0011      	movs	r1, r2
 80063da:	f7ff fc51 	bl	8005c80 <_malloc_r>
 80063de:	0004      	movs	r4, r0
 80063e0:	0020      	movs	r0, r4
 80063e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	d103      	bne.n	80063f0 <_realloc_r+0x24>
 80063e8:	f7ff fbde 	bl	8005ba8 <_free_r>
 80063ec:	2400      	movs	r4, #0
 80063ee:	e7f7      	b.n	80063e0 <_realloc_r+0x14>
 80063f0:	f000 f81b 	bl	800642a <_malloc_usable_size_r>
 80063f4:	0007      	movs	r7, r0
 80063f6:	4285      	cmp	r5, r0
 80063f8:	d802      	bhi.n	8006400 <_realloc_r+0x34>
 80063fa:	0843      	lsrs	r3, r0, #1
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	d3ef      	bcc.n	80063e0 <_realloc_r+0x14>
 8006400:	0029      	movs	r1, r5
 8006402:	0030      	movs	r0, r6
 8006404:	f7ff fc3c 	bl	8005c80 <_malloc_r>
 8006408:	9001      	str	r0, [sp, #4]
 800640a:	2800      	cmp	r0, #0
 800640c:	d0ee      	beq.n	80063ec <_realloc_r+0x20>
 800640e:	002a      	movs	r2, r5
 8006410:	42bd      	cmp	r5, r7
 8006412:	d900      	bls.n	8006416 <_realloc_r+0x4a>
 8006414:	003a      	movs	r2, r7
 8006416:	0021      	movs	r1, r4
 8006418:	9801      	ldr	r0, [sp, #4]
 800641a:	f7ff ffce 	bl	80063ba <memcpy>
 800641e:	0021      	movs	r1, r4
 8006420:	0030      	movs	r0, r6
 8006422:	f7ff fbc1 	bl	8005ba8 <_free_r>
 8006426:	9c01      	ldr	r4, [sp, #4]
 8006428:	e7da      	b.n	80063e0 <_realloc_r+0x14>

0800642a <_malloc_usable_size_r>:
 800642a:	1f0b      	subs	r3, r1, #4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	1f18      	subs	r0, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	da01      	bge.n	8006438 <_malloc_usable_size_r+0xe>
 8006434:	580b      	ldr	r3, [r1, r0]
 8006436:	18c0      	adds	r0, r0, r3
 8006438:	4770      	bx	lr
	...

0800643c <_init>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	46c0      	nop			@ (mov r8, r8)
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr

08006448 <_fini>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	46c0      	nop			@ (mov r8, r8)
 800644c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644e:	bc08      	pop	{r3}
 8006450:	469e      	mov	lr, r3
 8006452:	4770      	bx	lr
