
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080065ac  080065ac  000075ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006718  08006718  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006718  08006718  00007718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006720  08006720  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006720  08006720  00007720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006724  08006724  00007724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006728  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  2000006c  08006794  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08006794  00008408  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157ed  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a72  00000000  00000000  0001d881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  000202f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f59  00000000  00000000  00021668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac2d  00000000  00000000  000225c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183e0  00000000  00000000  0003d1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae6c4  00000000  00000000  000555ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103c92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c80  00000000  00000000  00103cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00108958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000006c 	.word	0x2000006c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006594 	.word	0x08006594

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000070 	.word	0x20000070
 8000100:	08006594 	.word	0x08006594

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	@ (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	@ (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b087      	sub	sp, #28
 8000644:	af02      	add	r7, sp, #8
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	000a      	movs	r2, r1
 800064a:	1cfb      	adds	r3, r7, #3
 800064c:	701a      	strb	r2, [r3, #0]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 800064e:	200f      	movs	r0, #15
 8000650:	183b      	adds	r3, r7, r0
 8000652:	1cfa      	adds	r2, r7, #3
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	210f      	movs	r1, #15
 8000658:	438a      	bics	r2, r1
 800065a:	701a      	strb	r2, [r3, #0]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 800065c:	1cfb      	adds	r3, r7, #3
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	011a      	lsls	r2, r3, #4
 8000662:	240e      	movs	r4, #14
 8000664:	193b      	adds	r3, r7, r4
 8000666:	701a      	strb	r2, [r3, #0]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000668:	183b      	adds	r3, r7, r0
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	220c      	movs	r2, #12
 800066e:	4313      	orrs	r3, r2
 8000670:	b2da      	uxtb	r2, r3
 8000672:	2108      	movs	r1, #8
 8000674:	187b      	adds	r3, r7, r1
 8000676:	701a      	strb	r2, [r3, #0]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000678:	183b      	adds	r3, r7, r0
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2208      	movs	r2, #8
 800067e:	4313      	orrs	r3, r2
 8000680:	b2da      	uxtb	r2, r3
 8000682:	187b      	adds	r3, r7, r1
 8000684:	705a      	strb	r2, [r3, #1]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 8000686:	193b      	adds	r3, r7, r4
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	220c      	movs	r2, #12
 800068c:	4313      	orrs	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	187b      	adds	r3, r7, r1
 8000692:	709a      	strb	r2, [r3, #2]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 8000694:	193b      	adds	r3, r7, r4
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2208      	movs	r2, #8
 800069a:	4313      	orrs	r3, r2
 800069c:	b2da      	uxtb	r2, r3
 800069e:	000c      	movs	r4, r1
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	70da      	strb	r2, [r3, #3]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6818      	ldr	r0, [r3, #0]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	0019      	movs	r1, r3
 80006ae:	193a      	adds	r2, r7, r4
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2304      	movs	r3, #4
 80006b6:	f002 f961 	bl	800297c <HAL_I2C_Master_Transmit>
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b005      	add	sp, #20
 80006c0:	bd90      	pop	{r4, r7, pc}

080006c2 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80006c2:	b590      	push	{r4, r7, lr}
 80006c4:	b087      	sub	sp, #28
 80006c6:	af02      	add	r7, sp, #8
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	000a      	movs	r2, r1
 80006cc:	1cfb      	adds	r3, r7, #3
 80006ce:	701a      	strb	r2, [r3, #0]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80006d0:	200f      	movs	r0, #15
 80006d2:	183b      	adds	r3, r7, r0
 80006d4:	1cfa      	adds	r2, r7, #3
 80006d6:	7812      	ldrb	r2, [r2, #0]
 80006d8:	210f      	movs	r1, #15
 80006da:	438a      	bics	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80006de:	1cfb      	adds	r3, r7, #3
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	011a      	lsls	r2, r3, #4
 80006e4:	240e      	movs	r4, #14
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	701a      	strb	r2, [r3, #0]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80006ea:	183b      	adds	r3, r7, r0
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	220d      	movs	r2, #13
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	2108      	movs	r1, #8
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	701a      	strb	r2, [r3, #0]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80006fa:	183b      	adds	r3, r7, r0
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2209      	movs	r2, #9
 8000700:	4313      	orrs	r3, r2
 8000702:	b2da      	uxtb	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	705a      	strb	r2, [r3, #1]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 8000708:	193b      	adds	r3, r7, r4
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	220d      	movs	r2, #13
 800070e:	4313      	orrs	r3, r2
 8000710:	b2da      	uxtb	r2, r3
 8000712:	187b      	adds	r3, r7, r1
 8000714:	709a      	strb	r2, [r3, #2]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000716:	193b      	adds	r3, r7, r4
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2209      	movs	r2, #9
 800071c:	4313      	orrs	r3, r2
 800071e:	b2da      	uxtb	r2, r3
 8000720:	000c      	movs	r4, r1
 8000722:	187b      	adds	r3, r7, r1
 8000724:	70da      	strb	r2, [r3, #3]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	0019      	movs	r1, r3
 8000730:	193a      	adds	r2, r7, r4
 8000732:	2364      	movs	r3, #100	@ 0x64
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2304      	movs	r3, #4
 8000738:	f002 f920 	bl	800297c <HAL_I2C_Master_Transmit>
}
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b005      	add	sp, #20
 8000742:	bd90      	pop	{r4, r7, pc}

08000744 <lcd_clear>:
 * @brief  Clears the LCD display.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_clear(I2C_LCD_HandleTypeDef *lcd)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
    lcd_send_cmd(lcd, 0x80);  // Move cursor to the home position
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2180      	movs	r1, #128	@ 0x80
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff ff75 	bl	8000640 <lcd_send_cmd>
    // Clear all characters
    // 16x4 = 64 characters
    // 20x4 = 80 characters
    // So 80 character clearing is enough for both 16x2, 16x4, 20x2 and 20x5 displays
    for (int i = 0; i < 80; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e007      	b.n	800076c <lcd_clear+0x28>
    {
        lcd_send_data(lcd, ' ');  // Write a space on each position
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2120      	movs	r1, #32
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ffae 	bl	80006c2 <lcd_send_data>
    for (int i = 0; i < 80; i++)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3301      	adds	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b4f      	cmp	r3, #79	@ 0x4f
 8000770:	ddf4      	ble.n	800075c <lcd_clear+0x18>
    }
}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b004      	add	sp, #16
 800077a:	bd80      	pop	{r7, pc}

0800077c <lcd_gotoxy>:
 * @param  col: Column number (0-15)
 * @param  row: Row number (0 or 1)
 * @retval None
 */
void lcd_gotoxy(I2C_LCD_HandleTypeDef *lcd, int col, int row)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
    uint8_t address;

    switch (row)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b03      	cmp	r3, #3
 800078c:	d024      	beq.n	80007d8 <lcd_gotoxy+0x5c>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b03      	cmp	r3, #3
 8000792:	dc31      	bgt.n	80007f8 <lcd_gotoxy+0x7c>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d017      	beq.n	80007ca <lcd_gotoxy+0x4e>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b02      	cmp	r3, #2
 800079e:	dc2b      	bgt.n	80007f8 <lcd_gotoxy+0x7c>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <lcd_gotoxy+0x32>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d007      	beq.n	80007bc <lcd_gotoxy+0x40>
    {
        case 0: address = 0x80 + col; break;  // First row
        case 1: address = 0xC0 + col; break;  // Second row
        case 2: address = 0x94 + col; break;  // Third row
        case 3: address = 0xD4 + col; break;  // Fourth row
        default: return;  // Ignore invalid row numbers
 80007ac:	e024      	b.n	80007f8 <lcd_gotoxy+0x7c>
        case 0: address = 0x80 + col; break;  // First row
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	2317      	movs	r3, #23
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	3a80      	subs	r2, #128	@ 0x80
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	e014      	b.n	80007e6 <lcd_gotoxy+0x6a>
        case 1: address = 0xC0 + col; break;  // Second row
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	2317      	movs	r3, #23
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	3a40      	subs	r2, #64	@ 0x40
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e00d      	b.n	80007e6 <lcd_gotoxy+0x6a>
        case 2: address = 0x94 + col; break;  // Third row
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	2317      	movs	r3, #23
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	3a6c      	subs	r2, #108	@ 0x6c
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	e006      	b.n	80007e6 <lcd_gotoxy+0x6a>
        case 3: address = 0xD4 + col; break;  // Fourth row
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	2317      	movs	r3, #23
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	3a2c      	subs	r2, #44	@ 0x2c
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	46c0      	nop			@ (mov r8, r8)
    }

    lcd_send_cmd(lcd, address);  // Send command to move the cursor
 80007e6:	2317      	movs	r3, #23
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff ff25 	bl	8000640 <lcd_send_cmd>
 80007f6:	e000      	b.n	80007fa <lcd_gotoxy+0x7e>
        default: return;  // Ignore invalid row numbers
 80007f8:	46c0      	nop			@ (mov r8, r8)
}
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b006      	add	sp, #24
 80007fe:	bd80      	pop	{r7, pc}

08000800 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 8000808:	2032      	movs	r0, #50	@ 0x32
 800080a:	f001 f80d 	bl	8001828 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2130      	movs	r1, #48	@ 0x30
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff ff14 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(5);
 8000818:	2005      	movs	r0, #5
 800081a:	f001 f805 	bl	8001828 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2130      	movs	r1, #48	@ 0x30
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff ff0c 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(1);
 8000828:	2001      	movs	r0, #1
 800082a:	f000 fffd 	bl	8001828 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2130      	movs	r1, #48	@ 0x30
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ff04 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fff5 	bl	8001828 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2120      	movs	r1, #32
 8000842:	0018      	movs	r0, r3
 8000844:	f7ff fefc 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(10);
 8000848:	200a      	movs	r0, #10
 800084a:	f000 ffed 	bl	8001828 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2128      	movs	r1, #40	@ 0x28
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff fef4 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f000 ffe5 	bl	8001828 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2108      	movs	r1, #8
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff feec 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f000 ffdd 	bl	8001828 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2101      	movs	r1, #1
 8000872:	0018      	movs	r0, r3
 8000874:	f7ff fee4 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(2);
 8000878:	2002      	movs	r0, #2
 800087a:	f000 ffd5 	bl	8001828 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2106      	movs	r1, #6
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff fedc 	bl	8000640 <lcd_send_cmd>
    HAL_Delay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 ffcd 	bl	8001828 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	210c      	movs	r1, #12
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff fed4 	bl	8000640 <lcd_send_cmd>
}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}

080008a0 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80008aa:	e008      	b.n	80008be <lcd_puts+0x1e>
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	603a      	str	r2, [r7, #0]
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff ff02 	bl	80006c2 <lcd_send_data>
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1f2      	bne.n	80008ac <lcd_puts+0xc>
}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46c0      	nop			@ (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <debounceButton>:

//=====STUDENT ID=====
char student_id[9] = "24784821";		//defined student id

//=====BUTTON DEBOUNCE FUNCTION=====
uint8_t debounceButton(GPIO_TypeDef *port, uint16_t pin, uint32_t *last_press_time){ //will take port and pin information when i call the function in the loop
 80008d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	250a      	movs	r5, #10
 80008dc:	197b      	adds	r3, r7, r5
 80008de:	1c0a      	adds	r2, r1, #0
 80008e0:	801a      	strh	r2, [r3, #0]
	uint8_t current_state = HAL_GPIO_ReadPin(port, pin); //store button state
 80008e2:	2617      	movs	r6, #23
 80008e4:	19bc      	adds	r4, r7, r6
 80008e6:	197b      	adds	r3, r7, r5
 80008e8:	881a      	ldrh	r2, [r3, #0]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 ff64 	bl	80027bc <HAL_GPIO_ReadPin>
 80008f4:	0003      	movs	r3, r0
 80008f6:	7023      	strb	r3, [r4, #0]
	uint32_t current_time = HAL_GetTick();	//store current time in ms
 80008f8:	f000 ff8c 	bl	8001814 <HAL_GetTick>
 80008fc:	0003      	movs	r3, r0
 80008fe:	613b      	str	r3, [r7, #16]

	if (current_state == GPIO_PIN_SET){								//if the button is pressed
 8000900:	19bb      	adds	r3, r7, r6
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d117      	bne.n	8000938 <debounceButton+0x68>
		if (current_time - *last_press_time >= DEBOUNCE_DELAY) {	//and the debounce timer has passed
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	2b63      	cmp	r3, #99	@ 0x63
 8000912:	d911      	bls.n	8000938 <debounceButton+0x68>
			HAL_Delay(DEBOUNCE_DELAY);								//confirmation delay (may not need)
 8000914:	2064      	movs	r0, #100	@ 0x64
 8000916:	f000 ff87 	bl	8001828 <HAL_Delay>
			if (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_SET){		//check if still pressed
 800091a:	197b      	adds	r3, r7, r5
 800091c:	881a      	ldrh	r2, [r3, #0]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f001 ff4a 	bl	80027bc <HAL_GPIO_ReadPin>
 8000928:	0003      	movs	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d104      	bne.n	8000938 <debounceButton+0x68>
				*last_press_time = current_time;					//update last pressed time
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	601a      	str	r2, [r3, #0]
				return 1; 											//valid debounced press
 8000934:	2301      	movs	r3, #1
 8000936:	e000      	b.n	800093a <debounceButton+0x6a>
			}
		}
	}
	return 0; 	//button not pressed
 8000938:	2300      	movs	r3, #0
}
 800093a:	0018      	movs	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	b007      	add	sp, #28
 8000940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000942 <map>:

//=====MAP FUNCTION=====		// Calculates input range, calculates output range, then uses linear interpolation formula - taken from arduino source code
int map(int x, int in_min, int in_max, int out_min, int out_max) {
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	69b9      	ldr	r1, [r7, #24]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	1a8a      	subs	r2, r1, r2
 800095c:	435a      	muls	r2, r3
 800095e:	0010      	movs	r0, r2
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	0019      	movs	r1, r3
 8000968:	f7ff fc68 	bl	800023c <__divsi3>
 800096c:	0003      	movs	r3, r0
 800096e:	001a      	movs	r2, r3
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	18d3      	adds	r3, r2, r3
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b004      	add	sp, #16
 800097a:	bd80      	pop	{r7, pc}

0800097c <lcd_print_int>:

//=====LCD PRINT INT FUNCTION=====
void lcd_print_int(int num){
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	char holdme[16]; //storing string version of integer
	sprintf(holdme, "%d", num); //conversion of integer to string
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4908      	ldr	r1, [pc, #32]	@ (80009a8 <lcd_print_int+0x2c>)
 8000988:	2408      	movs	r4, #8
 800098a:	193b      	adds	r3, r7, r4
 800098c:	0018      	movs	r0, r3
 800098e:	f005 f963 	bl	8005c58 <siprintf>
	lcd_puts(&lcd1, holdme);			//send to LCD
 8000992:	193a      	adds	r2, r7, r4
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <lcd_print_int+0x30>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ff81 	bl	80008a0 <lcd_puts>
}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b007      	add	sp, #28
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	080065ac 	.word	0x080065ac
 80009ac:	20000140 	.word	0x20000140

080009b0 <setServoPulse>:

//=====SET SERVO PULSE FUNCTION=====
void setServoPulse(uint16_t pulse) {
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b08b      	sub	sp, #44	@ 0x2c
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	0002      	movs	r2, r0
 80009b8:	1dbb      	adds	r3, r7, #6
 80009ba:	801a      	strh	r2, [r3, #0]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80009bc:	240c      	movs	r4, #12
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	0018      	movs	r0, r3
 80009c2:	231c      	movs	r3, #28
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f005 f966 	bl	8005c98 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009cc:	0021      	movs	r1, r4
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2260      	movs	r2, #96	@ 0x60
 80009d2:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = pulse;
 80009d4:	1dbb      	adds	r3, r7, #6
 80009d6:	881a      	ldrh	r2, [r3, #0]
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&SERVO_TIM_HANDLE, &sConfigOC, SERVO_TIM_CHANNEL);
 80009e8:	1879      	adds	r1, r7, r1
 80009ea:	4b07      	ldr	r3, [pc, #28]	@ (8000a08 <setServoPulse+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f003 fbc6 	bl	8004180 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&SERVO_TIM_HANDLE, SERVO_TIM_CHANNEL);
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <setServoPulse+0x58>)
 80009f6:	2100      	movs	r1, #0
 80009f8:	0018      	movs	r0, r3
 80009fa:	f003 fad7 	bl	8003fac <HAL_TIM_PWM_Start>
}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b00b      	add	sp, #44	@ 0x2c
 8000a04:	bd90      	pop	{r4, r7, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	20000148 	.word	0x20000148

08000a0c <stateA_actions>:


//=====STATE A ACTIONS=====
void stateA_actions(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

	//LCD CONTROL
	lcd_clear(&lcd1);							//clear lcd screen
 8000a12:	4b30      	ldr	r3, [pc, #192]	@ (8000ad4 <stateA_actions+0xc8>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff fe95 	bl	8000744 <lcd_clear>
	lcd_gotoxy(&lcd1, 0, 0);					//position cursor in top left
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad4 <stateA_actions+0xc8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff feab 	bl	800077c <lcd_gotoxy>
	lcd_puts(&lcd1, "SID:");					//print 'SID'
 8000a26:	4a2c      	ldr	r2, [pc, #176]	@ (8000ad8 <stateA_actions+0xcc>)
 8000a28:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <stateA_actions+0xc8>)
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff ff37 	bl	80008a0 <lcd_puts>
	lcd_puts(&lcd1, student_id);				//print my student ID number
 8000a32:	4a2a      	ldr	r2, [pc, #168]	@ (8000adc <stateA_actions+0xd0>)
 8000a34:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <stateA_actions+0xc8>)
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff ff31 	bl	80008a0 <lcd_puts>
	lcd_gotoxy(&lcd1, 0, 1);					//position cursor to second line
 8000a3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ad4 <stateA_actions+0xc8>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	2100      	movs	r1, #0
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fe99 	bl	800077c <lcd_gotoxy>
	lcd_puts(&lcd1, "MECHATRONICS 1");			//print string to second line
 8000a4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ae0 <stateA_actions+0xd4>)
 8000a4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <stateA_actions+0xc8>)
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff ff25 	bl	80008a0 <lcd_puts>

	//UART CONTROL
	static uint32_t last_uart_transmit = 0; //timer starts from 0
	if (transmit_uart && (HAL_GetTick() - last_uart_transmit >= UART_TRANSMIT_INTERVAL)){ //if there is a transmission flag and the time interval for transmissions has passed, then
 8000a56:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <stateA_actions+0xd8>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d021      	beq.n	8000aa2 <stateA_actions+0x96>
 8000a5e:	f000 fed9 	bl	8001814 <HAL_GetTick>
 8000a62:	0002      	movs	r2, r0
 8000a64:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <stateA_actions+0xdc>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	1ad2      	subs	r2, r2, r3
 8000a6a:	23fa      	movs	r3, #250	@ 0xfa
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d317      	bcc.n	8000aa2 <stateA_actions+0x96>
		sprintf(uart_message, "Autumn2025 MX1 SID: %s, ADC Reading: %lu", student_id, adc_value); //print message to monitor, inserting student_id and adc_value into the string
 8000a72:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <stateA_actions+0xe0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <stateA_actions+0xd0>)
 8000a78:	491d      	ldr	r1, [pc, #116]	@ (8000af0 <stateA_actions+0xe4>)
 8000a7a:	481e      	ldr	r0, [pc, #120]	@ (8000af4 <stateA_actions+0xe8>)
 8000a7c:	f005 f8ec 	bl	8005c58 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_message, strlen(uart_message), HAL_MAX_DELAY); //using STM32HAL functions to transmit UART. Converts uart_message into an integer that can be transmitted over UART.
 8000a80:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <stateA_actions+0xe8>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fb3e 	bl	8000104 <strlen>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	425b      	negs	r3, r3
 8000a90:	4918      	ldr	r1, [pc, #96]	@ (8000af4 <stateA_actions+0xe8>)
 8000a92:	4819      	ldr	r0, [pc, #100]	@ (8000af8 <stateA_actions+0xec>)
 8000a94:	f004 f94a 	bl	8004d2c <HAL_UART_Transmit>
		last_uart_transmit = HAL_GetTick(); //update last transmit time
 8000a98:	f000 febc 	bl	8001814 <HAL_GetTick>
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <stateA_actions+0xdc>)
 8000aa0:	601a      	str	r2, [r3, #0]
	}

	//UART KEYBOARD TOGGLE
	uint8_t received_char;												//variable to store character received
	if (HAL_UART_Receive(&huart2, &received_char, 1, 0) == HAL_OK) {	//if statement checks if the UART successfully received a character
 8000aa2:	1df9      	adds	r1, r7, #7
 8000aa4:	4814      	ldr	r0, [pc, #80]	@ (8000af8 <stateA_actions+0xec>)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f004 f9e3 	bl	8004e74 <HAL_UART_Receive>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d10b      	bne.n	8000aca <stateA_actions+0xbe>
		if (received_char == 's') {										//if it is successful, and the character matches, then toggle the UART transmissions
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b73      	cmp	r3, #115	@ 0x73
 8000ab8:	d107      	bne.n	8000aca <stateA_actions+0xbe>
			transmit_uart = !transmit_uart;
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <stateA_actions+0xd8>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	425a      	negs	r2, r3
 8000ac0:	4153      	adcs	r3, r2
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <stateA_actions+0xd8>)
 8000ac8:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	20000140 	.word	0x20000140
 8000ad8:	080065b0 	.word	0x080065b0
 8000adc:	20000004 	.word	0x20000004
 8000ae0:	080065b8 	.word	0x080065b8
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	200002a4 	.word	0x200002a4
 8000aec:	20000290 	.word	0x20000290
 8000af0:	080065c8 	.word	0x080065c8
 8000af4:	2000022c 	.word	0x2000022c
 8000af8:	20000194 	.word	0x20000194

08000afc <stateB_actions>:

//=====STATE B ACTIONS=====
void stateB_actions(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af02      	add	r7, sp, #8
	//LCD CONTROL FOR ADC VALUES
	lcd_clear(&lcd1);					//clear lcd
 8000b02:	4b5c      	ldr	r3, [pc, #368]	@ (8000c74 <stateB_actions+0x178>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f7ff fe1d 	bl	8000744 <lcd_clear>
	lcd_gotoxy(&lcd1, 0, 0);			//position cursor top left
 8000b0a:	4b5a      	ldr	r3, [pc, #360]	@ (8000c74 <stateB_actions+0x178>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff fe33 	bl	800077c <lcd_gotoxy>
	lcd_puts(&lcd1, "ADC:");				//print ADC
 8000b16:	4a58      	ldr	r2, [pc, #352]	@ (8000c78 <stateB_actions+0x17c>)
 8000b18:	4b56      	ldr	r3, [pc, #344]	@ (8000c74 <stateB_actions+0x178>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff febf 	bl	80008a0 <lcd_puts>
	lcd_print_int(adc_value);		//print the ADC value as an integer
 8000b22:	4b56      	ldr	r3, [pc, #344]	@ (8000c7c <stateB_actions+0x180>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ff28 	bl	800097c <lcd_print_int>
	lcd_puts(&lcd1, " STATE B");
 8000b2c:	4a54      	ldr	r2, [pc, #336]	@ (8000c80 <stateB_actions+0x184>)
 8000b2e:	4b51      	ldr	r3, [pc, #324]	@ (8000c74 <stateB_actions+0x178>)
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff feb4 	bl	80008a0 <lcd_puts>
	lcd_gotoxy(&lcd1, 0, 1);			//next line
 8000b38:	4b4e      	ldr	r3, [pc, #312]	@ (8000c74 <stateB_actions+0x178>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff fe1c 	bl	800077c <lcd_gotoxy>
	lcd_puts(&lcd1, "MECHATRONICS 1");
 8000b44:	4a4f      	ldr	r2, [pc, #316]	@ (8000c84 <stateB_actions+0x188>)
 8000b46:	4b4b      	ldr	r3, [pc, #300]	@ (8000c74 <stateB_actions+0x178>)
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fea8 	bl	80008a0 <lcd_puts>


	//UART CONTROL
	transmit_uart = 0; 				//disable UART communication
 8000b50:	4b4d      	ldr	r3, [pc, #308]	@ (8000c88 <stateB_actions+0x18c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
	//ONBOARD LED CONTROL WITH POT
	static uint32_t last_led1_blink = 0; //period since last blink
	uint32_t led1_blink_period;			 //storage for variable blink timing
	static uint8_t led1_state = 0;				 //state of LED (off or on)

	led1_blink_period = map(adc_value, 0, 4095, 200, 1000); //linear interpolation of ADC values to led blink period, 5Hz -> 1Hz
 8000b56:	4b49      	ldr	r3, [pc, #292]	@ (8000c7c <stateB_actions+0x180>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	4a4b      	ldr	r2, [pc, #300]	@ (8000c8c <stateB_actions+0x190>)
 8000b5e:	23fa      	movs	r3, #250	@ 0xfa
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	23c8      	movs	r3, #200	@ 0xc8
 8000b66:	2100      	movs	r1, #0
 8000b68:	f7ff feeb 	bl	8000942 <map>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	607b      	str	r3, [r7, #4]

	if (HAL_GetTick() - last_led1_blink >= led1_blink_period) { //checks if enough time has passed between blinks
 8000b70:	f000 fe50 	bl	8001814 <HAL_GetTick>
 8000b74:	0002      	movs	r2, r0
 8000b76:	4b46      	ldr	r3, [pc, #280]	@ (8000c90 <stateB_actions+0x194>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d818      	bhi.n	8000bb4 <stateB_actions+0xb8>
		led1_state = !led1_state; 								//toggle LED
 8000b82:	4b44      	ldr	r3, [pc, #272]	@ (8000c94 <stateB_actions+0x198>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	425a      	negs	r2, r3
 8000b88:	4153      	adcs	r3, r2
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	4b41      	ldr	r3, [pc, #260]	@ (8000c94 <stateB_actions+0x198>)
 8000b90:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_1_PORT, LED_1_PIN, led1_state ? GPIO_PIN_SET : GPIO_PIN_RESET); //Control of actual LED output. Takes port and pin info from definitions above
 8000b92:	4b40      	ldr	r3, [pc, #256]	@ (8000c94 <stateB_actions+0x198>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	4193      	sbcs	r3, r2
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	23a0      	movs	r3, #160	@ 0xa0
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 fe26 	bl	80027f6 <HAL_GPIO_WritePin>
		last_led1_blink = HAL_GetTick(); //update blink time
 8000baa:	f000 fe33 	bl	8001814 <HAL_GetTick>
 8000bae:	0002      	movs	r2, r0
 8000bb0:	4b37      	ldr	r3, [pc, #220]	@ (8000c90 <stateB_actions+0x194>)
 8000bb2:	601a      	str	r2, [r3, #0]
	//EXTERNAL LED CONTROL
	static uint32_t last_led2_3_blink = 0; //variable to control timing for both LEDs
	static uint8_t led2_state = 0;				   //state of LED2 (on or off)
	static uint8_t led3_state = 0;				   //state of LED3 (on or off)

	if (button1_pressed) { 			//checks for valid debounced button press
 8000bb4:	4b38      	ldr	r3, [pc, #224]	@ (8000c98 <stateB_actions+0x19c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d007      	beq.n	8000bcc <stateB_actions+0xd0>
		led_select = !led_select;	//toggle between LEDs when button 1 pressed
 8000bbc:	4b37      	ldr	r3, [pc, #220]	@ (8000c9c <stateB_actions+0x1a0>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	425a      	negs	r2, r3
 8000bc2:	4153      	adcs	r3, r2
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	4b34      	ldr	r3, [pc, #208]	@ (8000c9c <stateB_actions+0x1a0>)
 8000bca:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GetTick() - last_led2_3_blink >= 500) { //1Hz blinking 500on 500off
 8000bcc:	f000 fe22 	bl	8001814 <HAL_GetTick>
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	4b33      	ldr	r3, [pc, #204]	@ (8000ca0 <stateB_actions+0x1a4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	1ad2      	subs	r2, r2, r3
 8000bd8:	23fa      	movs	r3, #250	@ 0xfa
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d32f      	bcc.n	8000c40 <stateB_actions+0x144>
        last_led2_3_blink = HAL_GetTick(); 			//update blink time
 8000be0:	f000 fe18 	bl	8001814 <HAL_GetTick>
 8000be4:	0002      	movs	r2, r0
 8000be6:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca0 <stateB_actions+0x1a4>)
 8000be8:	601a      	str	r2, [r3, #0]
        if (led_select == 0) {						//checks which LED is selected and toggles state
 8000bea:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <stateB_actions+0x1a0>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d113      	bne.n	8000c1a <stateB_actions+0x11e>
        	led2_state = !led2_state;
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca4 <stateB_actions+0x1a8>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	425a      	negs	r2, r3
 8000bf8:	4153      	adcs	r3, r2
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	4b29      	ldr	r3, [pc, #164]	@ (8000ca4 <stateB_actions+0x1a8>)
 8000c00:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(LED_2_PORT, LED_2_PIN, led2_state ? GPIO_PIN_SET : GPIO_PIN_RESET); //actual output of LED2, will toggle either off or on
 8000c02:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <stateB_actions+0x1a8>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	4193      	sbcs	r3, r2
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ca8 <stateB_actions+0x1ac>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	0018      	movs	r0, r3
 8000c14:	f001 fdef 	bl	80027f6 <HAL_GPIO_WritePin>
 8000c18:	e012      	b.n	8000c40 <stateB_actions+0x144>
        } else {
        	led3_state = !led3_state;
 8000c1a:	4b24      	ldr	r3, [pc, #144]	@ (8000cac <stateB_actions+0x1b0>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	425a      	negs	r2, r3
 8000c20:	4153      	adcs	r3, r2
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	001a      	movs	r2, r3
 8000c26:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <stateB_actions+0x1b0>)
 8000c28:	701a      	strb	r2, [r3, #0]
        	HAL_GPIO_WritePin(LED_3_PORT, LED_3_PIN, led3_state ? GPIO_PIN_SET : GPIO_PIN_RESET); //same thing for LED3
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <stateB_actions+0x1b0>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	1e5a      	subs	r2, r3, #1
 8000c30:	4193      	sbcs	r3, r2
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	001a      	movs	r2, r3
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <stateB_actions+0x1ac>)
 8000c38:	2102      	movs	r1, #2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f001 fddb 	bl	80027f6 <HAL_GPIO_WritePin>
        }
	}

	//SERVO CONTROL FROM POT
	uint16_t servo_pulse_width = map(adc_value, 0, 4095, 1000, 2000); //map adc values to servo PWM
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <stateB_actions+0x180>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	0018      	movs	r0, r3
 8000c46:	23fa      	movs	r3, #250	@ 0xfa
 8000c48:	009a      	lsls	r2, r3, #2
 8000c4a:	4910      	ldr	r1, [pc, #64]	@ (8000c8c <stateB_actions+0x190>)
 8000c4c:	23fa      	movs	r3, #250	@ 0xfa
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	0013      	movs	r3, r2
 8000c54:	000a      	movs	r2, r1
 8000c56:	2100      	movs	r1, #0
 8000c58:	f7ff fe73 	bl	8000942 <map>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	1cbb      	adds	r3, r7, #2
 8000c60:	801a      	strh	r2, [r3, #0]
	setServoPulse(servo_pulse_width); //write to the servo
 8000c62:	1cbb      	adds	r3, r7, #2
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fea2 	bl	80009b0 <setServoPulse>


}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000140 	.word	0x20000140
 8000c78:	080065f4 	.word	0x080065f4
 8000c7c:	20000290 	.word	0x20000290
 8000c80:	080065fc 	.word	0x080065fc
 8000c84:	080065b8 	.word	0x080065b8
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	00000fff 	.word	0x00000fff
 8000c90:	200002a8 	.word	0x200002a8
 8000c94:	200002ac 	.word	0x200002ac
 8000c98:	200002a0 	.word	0x200002a0
 8000c9c:	20000294 	.word	0x20000294
 8000ca0:	200002b0 	.word	0x200002b0
 8000ca4:	200002b4 	.word	0x200002b4
 8000ca8:	50000400 	.word	0x50000400
 8000cac:	200002b5 	.word	0x200002b5

08000cb0 <stateC_actions>:
//=====STATE C ACTIONS=====
void stateC_actions(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

	//check everything disabled
	transmit_uart = 0;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	@ (8000cc0 <stateC_actions+0x10>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]


}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000000 	.word	0x20000000

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 fd27 	bl	800171c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f889 	bl	8000de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f000 fa73 	bl	80011bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cd6:	f000 f8cd 	bl	8000e74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cda:	f000 f935 	bl	8000f48 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000cde:	f000 fa1f 	bl	8001120 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ce2:	f000 f971 	bl	8000fc8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);					//begin adc conversion
 8000ce6:	4b37      	ldr	r3, [pc, #220]	@ (8000dc4 <main+0x100>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f001 f88d 	bl	8001e08 <HAL_ADC_Start>

  lcd1.hi2c = &hi2c1;
 8000cee:	4b36      	ldr	r3, [pc, #216]	@ (8000dc8 <main+0x104>)
 8000cf0:	4a36      	ldr	r2, [pc, #216]	@ (8000dcc <main+0x108>)
 8000cf2:	601a      	str	r2, [r3, #0]
  lcd1.address = 0x4E; //lcd address
 8000cf4:	4b34      	ldr	r3, [pc, #208]	@ (8000dc8 <main+0x104>)
 8000cf6:	224e      	movs	r2, #78	@ 0x4e
 8000cf8:	711a      	strb	r2, [r3, #4]

  lcd_init(&lcd1); //initialise LCD
 8000cfa:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <main+0x104>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff fd7f 	bl	8000800 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //=====Debounce Control=====
	  uint8_t button1_pressed = debounceButton(EXT_BUTTON_1_PORT, EXT_BUTTON_1_PIN, &last_button1_press_time);	//Calls debounce function and sends button and port info
 8000d02:	1dfc      	adds	r4, r7, #7
 8000d04:	4a32      	ldr	r2, [pc, #200]	@ (8000dd0 <main+0x10c>)
 8000d06:	23a0      	movs	r3, #160	@ 0xa0
 8000d08:	05db      	lsls	r3, r3, #23
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff fddf 	bl	80008d0 <debounceButton>
 8000d12:	0003      	movs	r3, r0
 8000d14:	7023      	strb	r3, [r4, #0]
	  uint8_t button2_pressed = debounceButton(ONB_BUTTON_PORT, ONB_BUTTON_PIN, &last_button2_press_time);
 8000d16:	1dbc      	adds	r4, r7, #6
 8000d18:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd4 <main+0x110>)
 8000d1a:	2380      	movs	r3, #128	@ 0x80
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	482e      	ldr	r0, [pc, #184]	@ (8000dd8 <main+0x114>)
 8000d20:	0019      	movs	r1, r3
 8000d22:	f7ff fdd5 	bl	80008d0 <debounceButton>
 8000d26:	0003      	movs	r3, r0
 8000d28:	7023      	strb	r3, [r4, #0]

	  //=====ADC CONTROL=====
	  if (HAL_ADC_GetState(&hadc1) == HAL_ADC_STATE_REG_EOC) {		//checks if conversion is complete
 8000d2a:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <main+0x100>)
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f001 fa9d 	bl	800226c <HAL_ADC_GetState>
 8000d32:	0002      	movs	r2, r0
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d10a      	bne.n	8000d52 <main+0x8e>
		  adc_value = HAL_ADC_GetValue(&hadc1);						//stores the adc value
 8000d3c:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <main+0x100>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 f8b0 	bl	8001ea4 <HAL_ADC_GetValue>
 8000d44:	0002      	movs	r2, r0
 8000d46:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <main+0x118>)
 8000d48:	601a      	str	r2, [r3, #0]
		  HAL_ADC_Start(&hadc1);									//restarts conversion for continuous readings
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <main+0x100>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 f85b 	bl	8001e08 <HAL_ADC_Start>
	  }

	  //=====UPDATING STATE=====
	  if (button2_pressed) {										//Button 2 State change control
 8000d52:	1dbb      	adds	r3, r7, #6
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d012      	beq.n	8000d80 <main+0xbc>
		  if (currentState == STATE_A || currentState == STATE_C){	//if state is A or C change to B
 8000d5a:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <main+0x11c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <main+0xa6>
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <main+0x11c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d103      	bne.n	8000d72 <main+0xae>
			  currentState = STATE_B;
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <main+0x11c>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	e006      	b.n	8000d80 <main+0xbc>
		  }	else if (currentState == STATE_B) {						//if state is B change to A
 8000d72:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <main+0x11c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d102      	bne.n	8000d80 <main+0xbc>
			  currentState = STATE_A;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <main+0x11c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if (currentState == STATE_A && button1_pressed) {				//Button 1 State change control
 8000d80:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <main+0x11c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d106      	bne.n	8000d96 <main+0xd2>
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d002      	beq.n	8000d96 <main+0xd2>
		  currentState = STATE_C;									//if state is A change to C
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <main+0x11c>)
 8000d92:	2202      	movs	r2, #2
 8000d94:	701a      	strb	r2, [r3, #0]
	  }

	  //=====FUNCTION CONTROL DEPENDING ON STATE=====
	  switch (currentState) {
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <main+0x11c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d00b      	beq.n	8000db6 <main+0xf2>
 8000d9e:	dc0d      	bgt.n	8000dbc <main+0xf8>
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <main+0xe6>
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d003      	beq.n	8000db0 <main+0xec>
 8000da8:	e008      	b.n	8000dbc <main+0xf8>
	  	  case STATE_A:
	  		  stateA_actions();
 8000daa:	f7ff fe2f 	bl	8000a0c <stateA_actions>
	  		  break;
 8000dae:	e005      	b.n	8000dbc <main+0xf8>
	  	  case STATE_B:
	  		  stateB_actions();				//EACH STATE A-C has different functions called depending on state
 8000db0:	f7ff fea4 	bl	8000afc <stateB_actions>
	  		  break;
 8000db4:	e002      	b.n	8000dbc <main+0xf8>
	  	  case STATE_C:
	  		  stateC_actions();
 8000db6:	f7ff ff7b 	bl	8000cb0 <stateC_actions>
	  		  break;
 8000dba:	46c0      	nop			@ (mov r8, r8)

	  }

	  HAL_Delay(10); //stability
 8000dbc:	200a      	movs	r0, #10
 8000dbe:	f000 fd33 	bl	8001828 <HAL_Delay>
  {
 8000dc2:	e79e      	b.n	8000d02 <main+0x3e>
 8000dc4:	20000088 	.word	0x20000088
 8000dc8:	20000140 	.word	0x20000140
 8000dcc:	200000ec 	.word	0x200000ec
 8000dd0:	20000298 	.word	0x20000298
 8000dd4:	2000029c 	.word	0x2000029c
 8000dd8:	50000800 	.word	0x50000800
 8000ddc:	20000290 	.word	0x20000290
 8000de0:	20000228 	.word	0x20000228

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b093      	sub	sp, #76	@ 0x4c
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	2410      	movs	r4, #16
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	0018      	movs	r0, r3
 8000df0:	2338      	movs	r3, #56	@ 0x38
 8000df2:	001a      	movs	r2, r3
 8000df4:	2100      	movs	r1, #0
 8000df6:	f004 ff4f 	bl	8005c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	2310      	movs	r3, #16
 8000e00:	001a      	movs	r2, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	f004 ff48 	bl	8005c98 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e08:	2380      	movs	r3, #128	@ 0x80
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f002 f9ad 	bl	800316c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	2202      	movs	r2, #2
 8000e16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	2280      	movs	r2, #128	@ 0x80
 8000e1c:	0052      	lsls	r2, r2, #1
 8000e1e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	2240      	movs	r2, #64	@ 0x40
 8000e2a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	0018      	movs	r0, r3
 8000e36:	f002 f9e5 	bl	8003204 <HAL_RCC_OscConfig>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e3e:	f000 fa49 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	003b      	movs	r3, r7
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e54:	003b      	movs	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e5a:	003b      	movs	r3, r7
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f002 fcea 	bl	8003838 <HAL_RCC_ClockConfig>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e68:	f000 fa34 	bl	80012d4 <Error_Handler>
  }
}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b013      	add	sp, #76	@ 0x4c
 8000e72:	bd90      	pop	{r4, r7, pc}

08000e74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	230c      	movs	r3, #12
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f004 ff08 	bl	8005c98 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f44 <MX_ADC1_Init+0xd0>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000e90:	2280      	movs	r2, #128	@ 0x80
 8000e92:	05d2      	lsls	r2, r2, #23
 8000e94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e96:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9c:	4b28      	ldr	r3, [pc, #160]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea2:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea8:	4b25      	ldr	r3, [pc, #148]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000eaa:	2204      	movs	r2, #4
 8000eac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eae:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000eb4:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eba:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000ec8:	2220      	movs	r2, #32
 8000eca:	2100      	movs	r1, #0
 8000ecc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000edc:	222c      	movs	r2, #44	@ 0x2c
 8000ede:	2100      	movs	r1, #0
 8000ee0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000ef6:	223c      	movs	r2, #60	@ 0x3c
 8000ef8:	2100      	movs	r1, #0
 8000efa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000efc:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 fdd7 	bl	8001ab8 <HAL_ADC_Init>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000f0e:	f000 f9e1 	bl	80012d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f24:	1d3a      	adds	r2, r7, #4
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <MX_ADC1_Init+0xcc>)
 8000f28:	0011      	movs	r1, r2
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 ffc6 	bl	8001ebc <HAL_ADC_ConfigChannel>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000f34:	f000 f9ce 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b004      	add	sp, #16
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000088 	.word	0x20000088
 8000f44:	40012400 	.word	0x40012400

08000f48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc0 <MX_I2C1_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f54:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <MX_I2C1_Init+0x7c>)
 8000f56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f76:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f84:	0018      	movs	r0, r3
 8000f86:	f001 fc53 	bl	8002830 <HAL_I2C_Init>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f8e:	f000 f9a1 	bl	80012d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	0018      	movs	r0, r3
 8000f98:	f002 f850 	bl	800303c <HAL_I2CEx_ConfigAnalogFilter>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fa0:	f000 f998 	bl	80012d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <MX_I2C1_Init+0x74>)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f002 f893 	bl	80030d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 f98f 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000ec 	.word	0x200000ec
 8000fc0:	40005400 	.word	0x40005400
 8000fc4:	00503d58 	.word	0x00503d58

08000fc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b098      	sub	sp, #96	@ 0x60
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	2354      	movs	r3, #84	@ 0x54
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f004 fe5d 	bl	8005c98 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fde:	2338      	movs	r3, #56	@ 0x38
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	231c      	movs	r3, #28
 8000fe6:	001a      	movs	r2, r3
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f004 fe55 	bl	8005c98 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2334      	movs	r3, #52	@ 0x34
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f004 fe4e 	bl	8005c98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ffc:	4b45      	ldr	r3, [pc, #276]	@ (8001114 <MX_TIM1_Init+0x14c>)
 8000ffe:	4a46      	ldr	r2, [pc, #280]	@ (8001118 <MX_TIM1_Init+0x150>)
 8001000:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001002:	4b44      	ldr	r3, [pc, #272]	@ (8001114 <MX_TIM1_Init+0x14c>)
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b42      	ldr	r3, [pc, #264]	@ (8001114 <MX_TIM1_Init+0x14c>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800100e:	4b41      	ldr	r3, [pc, #260]	@ (8001114 <MX_TIM1_Init+0x14c>)
 8001010:	4a42      	ldr	r2, [pc, #264]	@ (800111c <MX_TIM1_Init+0x154>)
 8001012:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b3f      	ldr	r3, [pc, #252]	@ (8001114 <MX_TIM1_Init+0x14c>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800101a:	4b3e      	ldr	r3, [pc, #248]	@ (8001114 <MX_TIM1_Init+0x14c>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b3c      	ldr	r3, [pc, #240]	@ (8001114 <MX_TIM1_Init+0x14c>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001026:	4b3b      	ldr	r3, [pc, #236]	@ (8001114 <MX_TIM1_Init+0x14c>)
 8001028:	0018      	movs	r0, r3
 800102a:	f002 ff67 	bl	8003efc <HAL_TIM_PWM_Init>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001032:	f000 f94f 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2154      	movs	r1, #84	@ 0x54
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800104a:	187a      	adds	r2, r7, r1
 800104c:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <MX_TIM1_Init+0x14c>)
 800104e:	0011      	movs	r1, r2
 8001050:	0018      	movs	r0, r3
 8001052:	f003 fd0b 	bl	8004a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	1e03      	subs	r3, r0, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800105a:	f000 f93b 	bl	80012d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105e:	2138      	movs	r1, #56	@ 0x38
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2260      	movs	r2, #96	@ 0x60
 8001064:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108a:	1879      	adds	r1, r7, r1
 800108c:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <MX_TIM1_Init+0x14c>)
 800108e:	2200      	movs	r2, #0
 8001090:	0018      	movs	r0, r3
 8001092:	f003 f875 	bl	8004180 <HAL_TIM_PWM_ConfigChannel>
 8001096:	1e03      	subs	r3, r0, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800109a:	f000 f91b 	bl	80012d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2280      	movs	r2, #128	@ 0x80
 80010c0:	0192      	lsls	r2, r2, #6
 80010c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2280      	movs	r2, #128	@ 0x80
 80010da:	0492      	lsls	r2, r2, #18
 80010dc:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010f0:	1d3a      	adds	r2, r7, #4
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <MX_TIM1_Init+0x14c>)
 80010f4:	0011      	movs	r1, r2
 80010f6:	0018      	movs	r0, r3
 80010f8:	f003 fd26 	bl	8004b48 <HAL_TIMEx_ConfigBreakDeadTime>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001100:	f000 f8e8 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <MX_TIM1_Init+0x14c>)
 8001106:	0018      	movs	r0, r3
 8001108:	f000 f9ea 	bl	80014e0 <HAL_TIM_MspPostInit>

}
 800110c:	46c0      	nop			@ (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b018      	add	sp, #96	@ 0x60
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000148 	.word	0x20000148
 8001118:	40012c00 	.word	0x40012c00
 800111c:	0000ffff 	.word	0x0000ffff

08001120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b23      	ldr	r3, [pc, #140]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 8001126:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <MX_USART2_UART_Init+0x98>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112a:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 800112c:	22e1      	movs	r2, #225	@ 0xe1
 800112e:	0252      	lsls	r2, r2, #9
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 8001164:	2200      	movs	r2, #0
 8001166:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 800116a:	0018      	movs	r0, r3
 800116c:	f003 fd88 	bl	8004c80 <HAL_UART_Init>
 8001170:	1e03      	subs	r3, r0, #0
 8001172:	d001      	beq.n	8001178 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001174:	f000 f8ae 	bl	80012d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 800117a:	2100      	movs	r1, #0
 800117c:	0018      	movs	r0, r3
 800117e:	f004 fc8b 	bl	8005a98 <HAL_UARTEx_SetTxFifoThreshold>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001186:	f000 f8a5 	bl	80012d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 800118c:	2100      	movs	r1, #0
 800118e:	0018      	movs	r0, r3
 8001190:	f004 fcc2 	bl	8005b18 <HAL_UARTEx_SetRxFifoThreshold>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001198:	f000 f89c 	bl	80012d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f004 fc40 	bl	8005a24 <HAL_UARTEx_DisableFifoMode>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011a8:	f000 f894 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	20000194 	.word	0x20000194
 80011b8:	40004400 	.word	0x40004400

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	240c      	movs	r4, #12
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	0018      	movs	r0, r3
 80011c8:	2314      	movs	r3, #20
 80011ca:	001a      	movs	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f004 fd63 	bl	8005c98 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <MX_GPIO_Init+0x10c>)
 80011d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011d6:	4b3c      	ldr	r3, [pc, #240]	@ (80012c8 <MX_GPIO_Init+0x10c>)
 80011d8:	2104      	movs	r1, #4
 80011da:	430a      	orrs	r2, r1
 80011dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80011de:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <MX_GPIO_Init+0x10c>)
 80011e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e2:	2204      	movs	r2, #4
 80011e4:	4013      	ands	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <MX_GPIO_Init+0x10c>)
 80011ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ee:	4b36      	ldr	r3, [pc, #216]	@ (80012c8 <MX_GPIO_Init+0x10c>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80011f6:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <MX_GPIO_Init+0x10c>)
 80011f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011fa:	2201      	movs	r2, #1
 80011fc:	4013      	ands	r3, r2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <MX_GPIO_Init+0x10c>)
 8001204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001206:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <MX_GPIO_Init+0x10c>)
 8001208:	2102      	movs	r1, #2
 800120a:	430a      	orrs	r2, r1
 800120c:	635a      	str	r2, [r3, #52]	@ 0x34
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <MX_GPIO_Init+0x10c>)
 8001210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001212:	2202      	movs	r2, #2
 8001214:	4013      	ands	r3, r2
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_ONB_GPIO_Port, LED_1_ONB_Pin, GPIO_PIN_RESET);
 800121a:	23a0      	movs	r3, #160	@ 0xa0
 800121c:	05db      	lsls	r3, r3, #23
 800121e:	2200      	movs	r2, #0
 8001220:	2120      	movs	r1, #32
 8001222:	0018      	movs	r0, r3
 8001224:	f001 fae7 	bl	80027f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8001228:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <MX_GPIO_Init+0x110>)
 800122a:	2200      	movs	r2, #0
 800122c:	2103      	movs	r1, #3
 800122e:	0018      	movs	r0, r3
 8001230:	f001 fae1 	bl	80027f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONB_BUTTON_Pin */
  GPIO_InitStruct.Pin = ONB_BUTTON_Pin;
 8001234:	193b      	adds	r3, r7, r4
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	0192      	lsls	r2, r2, #6
 800123a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	193b      	adds	r3, r7, r4
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001242:	193b      	adds	r3, r7, r4
 8001244:	2201      	movs	r2, #1
 8001246:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ONB_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001248:	193b      	adds	r3, r7, r4
 800124a:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <MX_GPIO_Init+0x114>)
 800124c:	0019      	movs	r1, r3
 800124e:	0010      	movs	r0, r2
 8001250:	f001 f950 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = EXT_BUTTON_1_Pin;
 8001254:	193b      	adds	r3, r7, r4
 8001256:	2202      	movs	r2, #2
 8001258:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	193b      	adds	r3, r7, r4
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001260:	193b      	adds	r3, r7, r4
 8001262:	2202      	movs	r2, #2
 8001264:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(EXT_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8001266:	193a      	adds	r2, r7, r4
 8001268:	23a0      	movs	r3, #160	@ 0xa0
 800126a:	05db      	lsls	r3, r3, #23
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f001 f940 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_ONB_Pin */
  GPIO_InitStruct.Pin = LED_1_ONB_Pin;
 8001274:	193b      	adds	r3, r7, r4
 8001276:	2220      	movs	r2, #32
 8001278:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	193b      	adds	r3, r7, r4
 800127c:	2201      	movs	r2, #1
 800127e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	193b      	adds	r3, r7, r4
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	193b      	adds	r3, r7, r4
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_1_ONB_GPIO_Port, &GPIO_InitStruct);
 800128c:	193a      	adds	r2, r7, r4
 800128e:	23a0      	movs	r3, #160	@ 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	0011      	movs	r1, r2
 8001294:	0018      	movs	r0, r3
 8001296:	f001 f92d 	bl	80024f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin;
 800129a:	0021      	movs	r1, r4
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2203      	movs	r2, #3
 80012a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2201      	movs	r2, #1
 80012a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <MX_GPIO_Init+0x110>)
 80012b8:	0019      	movs	r1, r3
 80012ba:	0010      	movs	r0, r2
 80012bc:	f001 f91a 	bl	80024f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b009      	add	sp, #36	@ 0x24
 80012c6:	bd90      	pop	{r4, r7, pc}
 80012c8:	40021000 	.word	0x40021000
 80012cc:	50000400 	.word	0x50000400
 80012d0:	50000800 	.word	0x50000800

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	46c0      	nop			@ (mov r8, r8)
 80012de:	e7fd      	b.n	80012dc <Error_Handler+0x8>

080012e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <HAL_MspInit+0x44>)
 80012e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <HAL_MspInit+0x44>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	430a      	orrs	r2, r1
 80012f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <HAL_MspInit+0x44>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	2201      	movs	r2, #1
 80012f8:	4013      	ands	r3, r2
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b09      	ldr	r3, [pc, #36]	@ (8001324 <HAL_MspInit+0x44>)
 8001300:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_MspInit+0x44>)
 8001304:	2180      	movs	r1, #128	@ 0x80
 8001306:	0549      	lsls	r1, r1, #21
 8001308:	430a      	orrs	r2, r1
 800130a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_MspInit+0x44>)
 800130e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001310:	2380      	movs	r3, #128	@ 0x80
 8001312:	055b      	lsls	r3, r3, #21
 8001314:	4013      	ands	r3, r2
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b08b      	sub	sp, #44	@ 0x2c
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	2414      	movs	r4, #20
 8001332:	193b      	adds	r3, r7, r4
 8001334:	0018      	movs	r0, r3
 8001336:	2314      	movs	r3, #20
 8001338:	001a      	movs	r2, r3
 800133a:	2100      	movs	r1, #0
 800133c:	f004 fcac 	bl	8005c98 <memset>
  if(hadc->Instance==ADC1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <HAL_ADC_MspInit+0x80>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d129      	bne.n	800139e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_ADC_MspInit+0x84>)
 800134c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <HAL_ADC_MspInit+0x84>)
 8001350:	2180      	movs	r1, #128	@ 0x80
 8001352:	0349      	lsls	r1, r1, #13
 8001354:	430a      	orrs	r2, r1
 8001356:	641a      	str	r2, [r3, #64]	@ 0x40
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <HAL_ADC_MspInit+0x84>)
 800135a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	035b      	lsls	r3, r3, #13
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_ADC_MspInit+0x84>)
 8001368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_ADC_MspInit+0x84>)
 800136c:	2101      	movs	r1, #1
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	@ 0x34
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <HAL_ADC_MspInit+0x84>)
 8001374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001376:	2201      	movs	r2, #1
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800137e:	193b      	adds	r3, r7, r4
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001384:	193b      	adds	r3, r7, r4
 8001386:	2203      	movs	r2, #3
 8001388:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	193b      	adds	r3, r7, r4
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	193a      	adds	r2, r7, r4
 8001392:	23a0      	movs	r3, #160	@ 0xa0
 8001394:	05db      	lsls	r3, r3, #23
 8001396:	0011      	movs	r1, r2
 8001398:	0018      	movs	r0, r3
 800139a:	f001 f8ab 	bl	80024f4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b00b      	add	sp, #44	@ 0x2c
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	40012400 	.word	0x40012400
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b097      	sub	sp, #92	@ 0x5c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	2344      	movs	r3, #68	@ 0x44
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	0018      	movs	r0, r3
 80013be:	2314      	movs	r3, #20
 80013c0:	001a      	movs	r2, r3
 80013c2:	2100      	movs	r1, #0
 80013c4:	f004 fc68 	bl	8005c98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c8:	2410      	movs	r4, #16
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	0018      	movs	r0, r3
 80013ce:	2334      	movs	r3, #52	@ 0x34
 80013d0:	001a      	movs	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	f004 fc60 	bl	8005c98 <memset>
  if(hi2c->Instance==I2C1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a22      	ldr	r2, [pc, #136]	@ (8001468 <HAL_I2C_MspInit+0xb8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d13d      	bne.n	800145e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	2220      	movs	r2, #32
 80013e6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013e8:	193b      	adds	r3, r7, r4
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	0018      	movs	r0, r3
 80013f2:	f002 fbcb 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 80013f6:	1e03      	subs	r3, r0, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013fa:	f7ff ff6b 	bl	80012d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <HAL_I2C_MspInit+0xbc>)
 8001400:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <HAL_I2C_MspInit+0xbc>)
 8001404:	2102      	movs	r1, #2
 8001406:	430a      	orrs	r2, r1
 8001408:	635a      	str	r2, [r3, #52]	@ 0x34
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <HAL_I2C_MspInit+0xbc>)
 800140c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001416:	2144      	movs	r1, #68	@ 0x44
 8001418:	187b      	adds	r3, r7, r1
 800141a:	22c0      	movs	r2, #192	@ 0xc0
 800141c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2212      	movs	r2, #18
 8001422:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2206      	movs	r2, #6
 8001434:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	187b      	adds	r3, r7, r1
 8001438:	4a0d      	ldr	r2, [pc, #52]	@ (8001470 <HAL_I2C_MspInit+0xc0>)
 800143a:	0019      	movs	r1, r3
 800143c:	0010      	movs	r0, r2
 800143e:	f001 f859 	bl	80024f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_I2C_MspInit+0xbc>)
 8001444:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <HAL_I2C_MspInit+0xbc>)
 8001448:	2180      	movs	r1, #128	@ 0x80
 800144a:	0389      	lsls	r1, r1, #14
 800144c:	430a      	orrs	r2, r1
 800144e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_I2C_MspInit+0xbc>)
 8001452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	039b      	lsls	r3, r3, #14
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b017      	add	sp, #92	@ 0x5c
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	40005400 	.word	0x40005400
 800146c:	40021000 	.word	0x40021000
 8001470:	50000400 	.word	0x50000400

08001474 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b091      	sub	sp, #68	@ 0x44
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800147c:	240c      	movs	r4, #12
 800147e:	193b      	adds	r3, r7, r4
 8001480:	0018      	movs	r0, r3
 8001482:	2334      	movs	r3, #52	@ 0x34
 8001484:	001a      	movs	r2, r3
 8001486:	2100      	movs	r1, #0
 8001488:	f004 fc06 	bl	8005c98 <memset>
  if(htim_pwm->Instance==TIM1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <HAL_TIM_PWM_MspInit+0x64>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d11c      	bne.n	80014d0 <HAL_TIM_PWM_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001496:	193b      	adds	r3, r7, r4
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	0392      	lsls	r2, r2, #14
 800149c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	2200      	movs	r2, #0
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	0018      	movs	r0, r3
 80014a8:	f002 fb70 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	1e03      	subs	r3, r0, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 80014b0:	f7ff ff10 	bl	80012d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_TIM_PWM_MspInit+0x68>)
 80014b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <HAL_TIM_PWM_MspInit+0x68>)
 80014ba:	2180      	movs	r1, #128	@ 0x80
 80014bc:	0109      	lsls	r1, r1, #4
 80014be:	430a      	orrs	r2, r1
 80014c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_TIM_PWM_MspInit+0x68>)
 80014c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014c6:	2380      	movs	r3, #128	@ 0x80
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	4013      	ands	r3, r2
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80014d0:	46c0      	nop			@ (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b011      	add	sp, #68	@ 0x44
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	40012c00 	.word	0x40012c00
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	@ 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	240c      	movs	r4, #12
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	0018      	movs	r0, r3
 80014ee:	2314      	movs	r3, #20
 80014f0:	001a      	movs	r2, r3
 80014f2:	2100      	movs	r1, #0
 80014f4:	f004 fbd0 	bl	8005c98 <memset>
  if(htim->Instance==TIM1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a15      	ldr	r2, [pc, #84]	@ (8001554 <HAL_TIM_MspPostInit+0x74>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d123      	bne.n	800154a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <HAL_TIM_MspPostInit+0x78>)
 8001504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <HAL_TIM_MspPostInit+0x78>)
 8001508:	2101      	movs	r1, #1
 800150a:	430a      	orrs	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	@ 0x34
 800150e:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <HAL_TIM_MspPostInit+0x78>)
 8001510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001512:	2201      	movs	r2, #1
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800151a:	193b      	adds	r3, r7, r4
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	0052      	lsls	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	0021      	movs	r1, r4
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2202      	movs	r2, #2
 8001528:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001536:	187b      	adds	r3, r7, r1
 8001538:	2202      	movs	r2, #2
 800153a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	187a      	adds	r2, r7, r1
 800153e:	23a0      	movs	r3, #160	@ 0xa0
 8001540:	05db      	lsls	r3, r3, #23
 8001542:	0011      	movs	r1, r2
 8001544:	0018      	movs	r0, r3
 8001546:	f000 ffd5 	bl	80024f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b009      	add	sp, #36	@ 0x24
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	40012c00 	.word	0x40012c00
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b097      	sub	sp, #92	@ 0x5c
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	2344      	movs	r3, #68	@ 0x44
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	0018      	movs	r0, r3
 800156a:	2314      	movs	r3, #20
 800156c:	001a      	movs	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	f004 fb92 	bl	8005c98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	2410      	movs	r4, #16
 8001576:	193b      	adds	r3, r7, r4
 8001578:	0018      	movs	r0, r3
 800157a:	2334      	movs	r3, #52	@ 0x34
 800157c:	001a      	movs	r2, r3
 800157e:	2100      	movs	r1, #0
 8001580:	f004 fb8a 	bl	8005c98 <memset>
  if(huart->Instance==USART2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a22      	ldr	r2, [pc, #136]	@ (8001614 <HAL_UART_MspInit+0xb8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d13e      	bne.n	800160c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800158e:	193b      	adds	r3, r7, r4
 8001590:	2202      	movs	r2, #2
 8001592:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001594:	193b      	adds	r3, r7, r4
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159a:	193b      	adds	r3, r7, r4
 800159c:	0018      	movs	r0, r3
 800159e:	f002 faf5 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	1e03      	subs	r3, r0, #0
 80015a4:	d001      	beq.n	80015aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015a6:	f7ff fe95 	bl	80012d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015b0:	2180      	movs	r1, #128	@ 0x80
 80015b2:	0289      	lsls	r1, r1, #10
 80015b4:	430a      	orrs	r2, r1
 80015b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	029b      	lsls	r3, r3, #10
 80015c0:	4013      	ands	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	430a      	orrs	r2, r1
 80015d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_UART_MspInit+0xbc>)
 80015d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d6:	2201      	movs	r2, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015de:	2144      	movs	r1, #68	@ 0x44
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	220c      	movs	r2, #12
 80015e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2202      	movs	r2, #2
 80015ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2201      	movs	r2, #1
 80015fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	187a      	adds	r2, r7, r1
 8001600:	23a0      	movs	r3, #160	@ 0xa0
 8001602:	05db      	lsls	r3, r3, #23
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f000 ff74 	bl	80024f4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800160c:	46c0      	nop			@ (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b017      	add	sp, #92	@ 0x5c
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	40004400 	.word	0x40004400
 8001618:	40021000 	.word	0x40021000

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001620:	46c0      	nop			@ (mov r8, r8)
 8001622:	e7fd      	b.n	8001620 <NMI_Handler+0x4>

08001624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001628:	46c0      	nop			@ (mov r8, r8)
 800162a:	e7fd      	b.n	8001628 <HardFault_Handler+0x4>

0800162c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001630:	46c0      	nop			@ (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 f8d4 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	46c0      	nop			@ (mov r8, r8)
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001658:	4a14      	ldr	r2, [pc, #80]	@ (80016ac <_sbrk+0x5c>)
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <_sbrk+0x60>)
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <_sbrk+0x64>)
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <_sbrk+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	18d3      	adds	r3, r2, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	429a      	cmp	r2, r3
 800167e:	d207      	bcs.n	8001690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001680:	f004 fb12 	bl	8005ca8 <__errno>
 8001684:	0003      	movs	r3, r0
 8001686:	220c      	movs	r2, #12
 8001688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168a:	2301      	movs	r3, #1
 800168c:	425b      	negs	r3, r3
 800168e:	e009      	b.n	80016a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001696:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	18d2      	adds	r2, r2, r3
 800169e:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <_sbrk+0x64>)
 80016a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	0018      	movs	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b006      	add	sp, #24
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20009000 	.word	0x20009000
 80016b0:	00000400 	.word	0x00000400
 80016b4:	200002b8 	.word	0x200002b8
 80016b8:	20000408 	.word	0x20000408

080016bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c0:	46c0      	nop			@ (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016c8:	480d      	ldr	r0, [pc, #52]	@ (8001700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016cc:	f7ff fff6 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d2:	490d      	ldr	r1, [pc, #52]	@ (8001708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <LoopForever+0xe>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001714 <LoopForever+0x16>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016f6:	f004 fadd 	bl	8005cb4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016fa:	f7ff fae3 	bl	8000cc4 <main>

080016fe <LoopForever>:

LoopForever:
  b LoopForever
 80016fe:	e7fe      	b.n	80016fe <LoopForever>
  ldr   r0, =_estack
 8001700:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800170c:	08006728 	.word	0x08006728
  ldr r2, =_sbss
 8001710:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001714:	20000408 	.word	0x20000408

08001718 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_COMP_IRQHandler>
	...

0800171c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_Init+0x3c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_Init+0x3c>)
 800172e:	2180      	movs	r1, #128	@ 0x80
 8001730:	0049      	lsls	r1, r1, #1
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001736:	2003      	movs	r0, #3
 8001738:	f000 f810 	bl	800175c <HAL_InitTick>
 800173c:	1e03      	subs	r3, r0, #0
 800173e:	d003      	beq.n	8001748 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001740:	1dfb      	adds	r3, r7, #7
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e001      	b.n	800174c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001748:	f7ff fdca 	bl	80012e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	781b      	ldrb	r3, [r3, #0]
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40022000 	.word	0x40022000

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001764:	230f      	movs	r3, #15
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <HAL_InitTick+0x88>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d02b      	beq.n	80017cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001774:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <HAL_InitTick+0x8c>)
 8001776:	681c      	ldr	r4, [r3, #0]
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <HAL_InitTick+0x88>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	0019      	movs	r1, r3
 800177e:	23fa      	movs	r3, #250	@ 0xfa
 8001780:	0098      	lsls	r0, r3, #2
 8001782:	f7fe fcd1 	bl	8000128 <__udivsi3>
 8001786:	0003      	movs	r3, r0
 8001788:	0019      	movs	r1, r3
 800178a:	0020      	movs	r0, r4
 800178c:	f7fe fccc 	bl	8000128 <__udivsi3>
 8001790:	0003      	movs	r3, r0
 8001792:	0018      	movs	r0, r3
 8001794:	f000 fea1 	bl	80024da <HAL_SYSTICK_Config>
 8001798:	1e03      	subs	r3, r0, #0
 800179a:	d112      	bne.n	80017c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d80a      	bhi.n	80017b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	2301      	movs	r3, #1
 80017a6:	425b      	negs	r3, r3
 80017a8:	2200      	movs	r2, #0
 80017aa:	0018      	movs	r0, r3
 80017ac:	f000 fe80 	bl	80024b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <HAL_InitTick+0x90>)
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e00d      	b.n	80017d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80017b8:	230f      	movs	r3, #15
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e008      	b.n	80017d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017c2:	230f      	movs	r3, #15
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e003      	b.n	80017d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017cc:	230f      	movs	r3, #15
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80017d4:	230f      	movs	r3, #15
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	781b      	ldrb	r3, [r3, #0]
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b005      	add	sp, #20
 80017e0:	bd90      	pop	{r4, r7, pc}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	20000018 	.word	0x20000018
 80017e8:	20000010 	.word	0x20000010
 80017ec:	20000014 	.word	0x20000014

080017f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_IncTick+0x1c>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	001a      	movs	r2, r3
 80017fa:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_IncTick+0x20>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	18d2      	adds	r2, r2, r3
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <HAL_IncTick+0x20>)
 8001802:	601a      	str	r2, [r3, #0]
}
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	20000018 	.word	0x20000018
 8001810:	200002bc 	.word	0x200002bc

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b02      	ldr	r3, [pc, #8]	@ (8001824 <HAL_GetTick+0x10>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	0018      	movs	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	200002bc 	.word	0x200002bc

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fff0 	bl	8001814 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3301      	adds	r3, #1
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	001a      	movs	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	189b      	adds	r3, r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	f7ff ffe0 	bl	8001814 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	46c0      	nop			@ (mov r8, r8)
 8001862:	46c0      	nop			@ (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b004      	add	sp, #16
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	20000018 	.word	0x20000018

08001870 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001880:	401a      	ands	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	601a      	str	r2, [r3, #0]
}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	fe3fffff 	.word	0xfe3fffff

08001898 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	23e0      	movs	r3, #224	@ 0xe0
 80018a6:	045b      	lsls	r3, r3, #17
 80018a8:	4013      	ands	r3, r2
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b002      	add	sp, #8
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	2104      	movs	r1, #4
 80018c6:	400a      	ands	r2, r1
 80018c8:	2107      	movs	r1, #7
 80018ca:	4091      	lsls	r1, r2
 80018cc:	000a      	movs	r2, r1
 80018ce:	43d2      	mvns	r2, r2
 80018d0:	401a      	ands	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2104      	movs	r1, #4
 80018d6:	400b      	ands	r3, r1
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4099      	lsls	r1, r3
 80018dc:	000b      	movs	r3, r1
 80018de:	431a      	orrs	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80018e4:	46c0      	nop			@ (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b004      	add	sp, #16
 80018ea:	bd80      	pop	{r7, pc}

080018ec <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	2104      	movs	r1, #4
 80018fe:	400a      	ands	r2, r1
 8001900:	2107      	movs	r1, #7
 8001902:	4091      	lsls	r1, r2
 8001904:	000a      	movs	r2, r1
 8001906:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2104      	movs	r1, #4
 800190c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800190e:	40da      	lsrs	r2, r3
 8001910:	0013      	movs	r3, r2
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}

0800191a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	211f      	movs	r1, #31
 800192e:	400a      	ands	r2, r1
 8001930:	210f      	movs	r1, #15
 8001932:	4091      	lsls	r1, r2
 8001934:	000a      	movs	r2, r1
 8001936:	43d2      	mvns	r2, r2
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0e9b      	lsrs	r3, r3, #26
 800193e:	210f      	movs	r1, #15
 8001940:	4019      	ands	r1, r3
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	201f      	movs	r0, #31
 8001946:	4003      	ands	r3, r0
 8001948:	4099      	lsls	r1, r3
 800194a:	000b      	movs	r3, r1
 800194c:	431a      	orrs	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	b004      	add	sp, #16
 8001958:	bd80      	pop	{r7, pc}

0800195a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	035b      	lsls	r3, r3, #13
 800196c:	0b5b      	lsrs	r3, r3, #13
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001974:	46c0      	nop			@ (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b002      	add	sp, #8
 800197a:	bd80      	pop	{r7, pc}

0800197c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	0352      	lsls	r2, r2, #13
 800198e:	0b52      	lsrs	r2, r2, #13
 8001990:	43d2      	mvns	r2, r2
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001998:	46c0      	nop			@ (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b002      	add	sp, #8
 800199e:	bd80      	pop	{r7, pc}

080019a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	0212      	lsls	r2, r2, #8
 80019b4:	43d2      	mvns	r2, r2
 80019b6:	401a      	ands	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	400b      	ands	r3, r1
 80019c0:	4904      	ldr	r1, [pc, #16]	@ (80019d4 <LL_ADC_SetChannelSamplingTime+0x34>)
 80019c2:	400b      	ands	r3, r1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b004      	add	sp, #16
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	07ffff00 	.word	0x07ffff00

080019d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <LL_ADC_EnableInternalRegulator+0x24>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	2280      	movs	r2, #128	@ 0x80
 80019ea:	0552      	lsls	r2, r2, #21
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b002      	add	sp, #8
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	6fffffe8 	.word	0x6fffffe8

08001a00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	055b      	lsls	r3, r3, #21
 8001a10:	401a      	ands	r2, r3
 8001a12:	2380      	movs	r3, #128	@ 0x80
 8001a14:	055b      	lsls	r3, r3, #21
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d101      	bne.n	8001a1e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <LL_ADC_Enable+0x20>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	2201      	movs	r2, #1
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	7fffffe8 	.word	0x7fffffe8

08001a4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <LL_ADC_IsEnabled+0x18>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <LL_ADC_IsEnabled+0x1a>
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b002      	add	sp, #8
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <LL_ADC_REG_StartConversion+0x20>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2204      	movs	r2, #4
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a88:	46c0      	nop			@ (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	7fffffe8 	.word	0x7fffffe8

08001a94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d101      	bne.n	8001aac <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	231f      	movs	r3, #31
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e17f      	b.n	8001dde <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10a      	bne.n	8001afc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff fc1d 	bl	8001328 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2254      	movs	r2, #84	@ 0x54
 8001af8:	2100      	movs	r1, #0
 8001afa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff ff7d 	bl	8001a00 <LL_ADC_IsInternalRegulatorEnabled>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d115      	bne.n	8001b36 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f7ff ff62 	bl	80019d8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b14:	4bb4      	ldr	r3, [pc, #720]	@ (8001de8 <HAL_ADC_Init+0x330>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	49b4      	ldr	r1, [pc, #720]	@ (8001dec <HAL_ADC_Init+0x334>)
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7fe fb04 	bl	8000128 <__udivsi3>
 8001b20:	0003      	movs	r3, r0
 8001b22:	3301      	adds	r3, #1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b28:	e002      	b.n	8001b30 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f9      	bne.n	8001b2a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7ff ff60 	bl	8001a00 <LL_ADC_IsInternalRegulatorEnabled>
 8001b40:	1e03      	subs	r3, r0, #0
 8001b42:	d10f      	bne.n	8001b64 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b48:	2210      	movs	r2, #16
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b54:	2201      	movs	r2, #1
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b5c:	231f      	movs	r3, #31
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f7ff ff93 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	2210      	movs	r2, #16
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d000      	beq.n	8001b7e <HAL_ADC_Init+0xc6>
 8001b7c:	e122      	b.n	8001dc4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d000      	beq.n	8001b86 <HAL_ADC_Init+0xce>
 8001b84:	e11e      	b.n	8001dc4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	4a99      	ldr	r2, [pc, #612]	@ (8001df0 <HAL_ADC_Init+0x338>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2202      	movs	r2, #2
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f7ff ff56 	bl	8001a4c <LL_ADC_IsEnabled>
 8001ba0:	1e03      	subs	r3, r0, #0
 8001ba2:	d000      	beq.n	8001ba6 <HAL_ADC_Init+0xee>
 8001ba4:	e0ad      	b.n	8001d02 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7e1b      	ldrb	r3, [r3, #24]
 8001bae:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001bb0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7e5b      	ldrb	r3, [r3, #25]
 8001bb6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001bb8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7e9b      	ldrb	r3, [r3, #26]
 8001bbe:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001bc0:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_ADC_Init+0x118>
 8001bca:	2380      	movs	r3, #128	@ 0x80
 8001bcc:	015b      	lsls	r3, r3, #5
 8001bce:	e000      	b.n	8001bd2 <HAL_ADC_Init+0x11a>
 8001bd0:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001bd2:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001bd8:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da04      	bge.n	8001bec <HAL_ADC_Init+0x134>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	085b      	lsrs	r3, r3, #1
 8001bea:	e001      	b.n	8001bf0 <HAL_ADC_Init+0x138>
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001bf0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	212c      	movs	r1, #44	@ 0x2c
 8001bf6:	5c5b      	ldrb	r3, [r3, r1]
 8001bf8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001bfa:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2220      	movs	r2, #32
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d115      	bne.n	8001c38 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e9b      	ldrb	r3, [r3, #26]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2280      	movs	r2, #128	@ 0x80
 8001c18:	0252      	lsls	r2, r2, #9
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	e00b      	b.n	8001c38 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c24:	2220      	movs	r2, #32
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c30:	2201      	movs	r2, #1
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00a      	beq.n	8001c56 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c44:	23e0      	movs	r3, #224	@ 0xe0
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a65      	ldr	r2, [pc, #404]	@ (8001df4 <HAL_ADC_Init+0x33c>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	0f9b      	lsrs	r3, r3, #30
 8001c72:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	223c      	movs	r2, #60	@ 0x3c
 8001c84:	5c9b      	ldrb	r3, [r3, r2]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d111      	bne.n	8001cae <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	0f9b      	lsrs	r3, r3, #30
 8001c90:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001c96:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001c9c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001ca2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	4a50      	ldr	r2, [pc, #320]	@ (8001df8 <HAL_ADC_Init+0x340>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	23c0      	movs	r3, #192	@ 0xc0
 8001cca:	061b      	lsls	r3, r3, #24
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d018      	beq.n	8001d02 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	05db      	lsls	r3, r3, #23
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d012      	beq.n	8001d02 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	061b      	lsls	r3, r3, #24
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d00c      	beq.n	8001d02 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001ce8:	4b44      	ldr	r3, [pc, #272]	@ (8001dfc <HAL_ADC_Init+0x344>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a44      	ldr	r2, [pc, #272]	@ (8001e00 <HAL_ADC_Init+0x348>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	23f0      	movs	r3, #240	@ 0xf0
 8001cf8:	039b      	lsls	r3, r3, #14
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8001dfc <HAL_ADC_Init+0x344>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d0a:	001a      	movs	r2, r3
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	f7ff fdd0 	bl	80018b2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d1a:	493a      	ldr	r1, [pc, #232]	@ (8001e04 <HAL_ADC_Init+0x34c>)
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	f7ff fdc8 	bl	80018b2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2110      	movs	r1, #16
 8001d36:	4249      	negs	r1, r1
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d3c:	e018      	b.n	8001d70 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	2380      	movs	r3, #128	@ 0x80
 8001d44:	039b      	lsls	r3, r3, #14
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d112      	bne.n	8001d70 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	221c      	movs	r2, #28
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	4252      	negs	r2, r2
 8001d60:	409a      	lsls	r2, r3
 8001d62:	0011      	movs	r1, r2
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2100      	movs	r1, #0
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7ff fdb8 	bl	80018ec <LL_ADC_GetSamplingTimeCommonChannels>
 8001d7c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d10b      	bne.n	8001d9e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	2203      	movs	r2, #3
 8001d92:	4393      	bics	r3, r2
 8001d94:	2201      	movs	r2, #1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d9c:	e01c      	b.n	8001dd8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	2212      	movs	r2, #18
 8001da4:	4393      	bics	r3, r2
 8001da6:	2210      	movs	r2, #16
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db2:	2201      	movs	r2, #1
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001dba:	231f      	movs	r3, #31
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dc2:	e009      	b.n	8001dd8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	2210      	movs	r2, #16
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dd0:	231f      	movs	r3, #31
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001dd8:	231f      	movs	r3, #31
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b008      	add	sp, #32
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	20000010 	.word	0x20000010
 8001dec:	00030d40 	.word	0x00030d40
 8001df0:	fffffefd 	.word	0xfffffefd
 8001df4:	ffde0201 	.word	0xffde0201
 8001df8:	1ffffc02 	.word	0x1ffffc02
 8001dfc:	40012708 	.word	0x40012708
 8001e00:	ffc3ffff 	.word	0xffc3ffff
 8001e04:	07ffff04 	.word	0x07ffff04

08001e08 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff fe3d 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8001e1a:	1e03      	subs	r3, r0, #0
 8001e1c:	d135      	bne.n	8001e8a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2254      	movs	r2, #84	@ 0x54
 8001e22:	5c9b      	ldrb	r3, [r3, r2]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_Start+0x24>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e035      	b.n	8001e98 <HAL_ADC_Start+0x90>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2254      	movs	r2, #84	@ 0x54
 8001e30:	2101      	movs	r1, #1
 8001e32:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e34:	250f      	movs	r5, #15
 8001e36:	197c      	adds	r4, r7, r5
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 fa20 	bl	8002280 <ADC_Enable>
 8001e40:	0003      	movs	r3, r0
 8001e42:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e44:	197b      	adds	r3, r7, r5
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d119      	bne.n	8001e80 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	4a13      	ldr	r2, [pc, #76]	@ (8001ea0 <HAL_ADC_Start+0x98>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	2280      	movs	r2, #128	@ 0x80
 8001e56:	0052      	lsls	r2, r2, #1
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	221c      	movs	r2, #28
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2254      	movs	r2, #84	@ 0x54
 8001e70:	2100      	movs	r1, #0
 8001e72:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7ff fdf9 	bl	8001a70 <LL_ADC_REG_StartConversion>
 8001e7e:	e008      	b.n	8001e92 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2254      	movs	r2, #84	@ 0x54
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]
 8001e88:	e003      	b.n	8001e92 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e8a:	230f      	movs	r3, #15
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2202      	movs	r2, #2
 8001e90:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e92:	230f      	movs	r3, #15
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	781b      	ldrb	r3, [r3, #0]
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b004      	add	sp, #16
 8001e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea0:	fffff0fe 	.word	0xfffff0fe

08001ea4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec6:	2317      	movs	r3, #23
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2254      	movs	r2, #84	@ 0x54
 8001ed6:	5c9b      	ldrb	r3, [r3, r2]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x24>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e1c0      	b.n	8002262 <HAL_ADC_ConfigChannel+0x3a6>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2254      	movs	r2, #84	@ 0x54
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff fdd1 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d000      	beq.n	8001ef8 <HAL_ADC_ConfigChannel+0x3c>
 8001ef6:	e1a3      	b.n	8002240 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d100      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x46>
 8001f00:	e143      	b.n	800218a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	2380      	movs	r3, #128	@ 0x80
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d004      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f12:	4ac1      	ldr	r2, [pc, #772]	@ (8002218 <HAL_ADC_ConfigChannel+0x35c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d108      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0019      	movs	r1, r3
 8001f22:	0010      	movs	r0, r2
 8001f24:	f7ff fd19 	bl	800195a <LL_ADC_REG_SetSequencerChAdd>
 8001f28:	e0c9      	b.n	80020be <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	211f      	movs	r1, #31
 8001f34:	400b      	ands	r3, r1
 8001f36:	210f      	movs	r1, #15
 8001f38:	4099      	lsls	r1, r3
 8001f3a:	000b      	movs	r3, r1
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	035b      	lsls	r3, r3, #13
 8001f48:	0b5b      	lsrs	r3, r3, #13
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x9c>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	221f      	movs	r2, #31
 8001f54:	4013      	ands	r3, r2
 8001f56:	e098      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d000      	beq.n	8001f64 <HAL_ADC_ConfigChannel+0xa8>
 8001f62:	e091      	b.n	8002088 <HAL_ADC_ConfigChannel+0x1cc>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d000      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0xb4>
 8001f6e:	e089      	b.n	8002084 <HAL_ADC_ConfigChannel+0x1c8>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2204      	movs	r2, #4
 8001f76:	4013      	ands	r3, r2
 8001f78:	d000      	beq.n	8001f7c <HAL_ADC_ConfigChannel+0xc0>
 8001f7a:	e081      	b.n	8002080 <HAL_ADC_ConfigChannel+0x1c4>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2208      	movs	r2, #8
 8001f82:	4013      	ands	r3, r2
 8001f84:	d000      	beq.n	8001f88 <HAL_ADC_ConfigChannel+0xcc>
 8001f86:	e079      	b.n	800207c <HAL_ADC_ConfigChannel+0x1c0>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d000      	beq.n	8001f94 <HAL_ADC_ConfigChannel+0xd8>
 8001f92:	e071      	b.n	8002078 <HAL_ADC_ConfigChannel+0x1bc>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d000      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0xe4>
 8001f9e:	e069      	b.n	8002074 <HAL_ADC_ConfigChannel+0x1b8>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2240      	movs	r2, #64	@ 0x40
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d000      	beq.n	8001fac <HAL_ADC_ConfigChannel+0xf0>
 8001faa:	e061      	b.n	8002070 <HAL_ADC_ConfigChannel+0x1b4>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2280      	movs	r2, #128	@ 0x80
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d000      	beq.n	8001fb8 <HAL_ADC_ConfigChannel+0xfc>
 8001fb6:	e059      	b.n	800206c <HAL_ADC_ConfigChannel+0x1b0>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d151      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x1ac>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	@ 0x80
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d149      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1a8>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d141      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1a4>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d139      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1a0>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	015b      	lsls	r3, r3, #5
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d131      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x19c>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	@ 0x80
 8001ffa:	019b      	lsls	r3, r3, #6
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d129      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x198>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	01db      	lsls	r3, r3, #7
 8002008:	4013      	ands	r3, r2
 800200a:	d121      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x194>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	4013      	ands	r3, r2
 8002016:	d119      	bne.n	800204c <HAL_ADC_ConfigChannel+0x190>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	025b      	lsls	r3, r3, #9
 8002020:	4013      	ands	r3, r2
 8002022:	d111      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x18c>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	d109      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x188>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2380      	movs	r3, #128	@ 0x80
 8002036:	02db      	lsls	r3, r3, #11
 8002038:	4013      	ands	r3, r2
 800203a:	d001      	beq.n	8002040 <HAL_ADC_ConfigChannel+0x184>
 800203c:	2312      	movs	r3, #18
 800203e:	e024      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002040:	2300      	movs	r3, #0
 8002042:	e022      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002044:	2311      	movs	r3, #17
 8002046:	e020      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002048:	2310      	movs	r3, #16
 800204a:	e01e      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 800204c:	230f      	movs	r3, #15
 800204e:	e01c      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002050:	230e      	movs	r3, #14
 8002052:	e01a      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002054:	230d      	movs	r3, #13
 8002056:	e018      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002058:	230c      	movs	r3, #12
 800205a:	e016      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 800205c:	230b      	movs	r3, #11
 800205e:	e014      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002060:	230a      	movs	r3, #10
 8002062:	e012      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002064:	2309      	movs	r3, #9
 8002066:	e010      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002068:	2308      	movs	r3, #8
 800206a:	e00e      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 800206c:	2307      	movs	r3, #7
 800206e:	e00c      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002070:	2306      	movs	r3, #6
 8002072:	e00a      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002074:	2305      	movs	r3, #5
 8002076:	e008      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002078:	2304      	movs	r3, #4
 800207a:	e006      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 800207c:	2303      	movs	r3, #3
 800207e:	e004      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002080:	2302      	movs	r3, #2
 8002082:	e002      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_ADC_ConfigChannel+0x1ce>
 8002088:	2300      	movs	r3, #0
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	6852      	ldr	r2, [r2, #4]
 800208e:	201f      	movs	r0, #31
 8002090:	4002      	ands	r2, r0
 8002092:	4093      	lsls	r3, r2
 8002094:	000a      	movs	r2, r1
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d808      	bhi.n	80020be <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	001a      	movs	r2, r3
 80020ba:	f7ff fc2e 	bl	800191a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	001a      	movs	r2, r3
 80020cc:	f7ff fc68 	bl	80019a0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db00      	blt.n	80020da <HAL_ADC_ConfigChannel+0x21e>
 80020d8:	e0bc      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020da:	4b50      	ldr	r3, [pc, #320]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff fbdb 	bl	8001898 <LL_ADC_GetCommonPathInternalCh>
 80020e2:	0003      	movs	r3, r0
 80020e4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002220 <HAL_ADC_ConfigChannel+0x364>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d122      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	2380      	movs	r3, #128	@ 0x80
 80020f4:	041b      	lsls	r3, r3, #16
 80020f6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020f8:	d11d      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2280      	movs	r2, #128	@ 0x80
 80020fe:	0412      	lsls	r2, r2, #16
 8002100:	4313      	orrs	r3, r2
 8002102:	4a46      	ldr	r2, [pc, #280]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 8002104:	0019      	movs	r1, r3
 8002106:	0010      	movs	r0, r2
 8002108:	f7ff fbb2 	bl	8001870 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210c:	4b45      	ldr	r3, [pc, #276]	@ (8002224 <HAL_ADC_ConfigChannel+0x368>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4945      	ldr	r1, [pc, #276]	@ (8002228 <HAL_ADC_ConfigChannel+0x36c>)
 8002112:	0018      	movs	r0, r3
 8002114:	f7fe f808 	bl	8000128 <__udivsi3>
 8002118:	0003      	movs	r3, r0
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	0013      	movs	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	189b      	adds	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002126:	e002      	b.n	800212e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3b01      	subs	r3, #1
 800212c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002134:	e08e      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a3c      	ldr	r2, [pc, #240]	@ (800222c <HAL_ADC_ConfigChannel+0x370>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d10e      	bne.n	800215e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	045b      	lsls	r3, r3, #17
 8002146:	4013      	ands	r3, r2
 8002148:	d109      	bne.n	800215e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2280      	movs	r2, #128	@ 0x80
 800214e:	0452      	lsls	r2, r2, #17
 8002150:	4313      	orrs	r3, r2
 8002152:	4a32      	ldr	r2, [pc, #200]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 8002154:	0019      	movs	r1, r3
 8002156:	0010      	movs	r0, r2
 8002158:	f7ff fb8a 	bl	8001870 <LL_ADC_SetCommonPathInternalCh>
 800215c:	e07a      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a33      	ldr	r2, [pc, #204]	@ (8002230 <HAL_ADC_ConfigChannel+0x374>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d000      	beq.n	800216a <HAL_ADC_ConfigChannel+0x2ae>
 8002168:	e074      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	03db      	lsls	r3, r3, #15
 8002170:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002172:	d000      	beq.n	8002176 <HAL_ADC_ConfigChannel+0x2ba>
 8002174:	e06e      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2280      	movs	r2, #128	@ 0x80
 800217a:	03d2      	lsls	r2, r2, #15
 800217c:	4313      	orrs	r3, r2
 800217e:	4a27      	ldr	r2, [pc, #156]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 8002180:	0019      	movs	r1, r3
 8002182:	0010      	movs	r0, r2
 8002184:	f7ff fb74 	bl	8001870 <LL_ADC_SetCommonPathInternalCh>
 8002188:	e064      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	429a      	cmp	r2, r3
 8002194:	d004      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800219a:	4a1f      	ldr	r2, [pc, #124]	@ (8002218 <HAL_ADC_ConfigChannel+0x35c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d107      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0019      	movs	r1, r3
 80021aa:	0010      	movs	r0, r2
 80021ac:	f7ff fbe6 	bl	800197c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	da4d      	bge.n	8002254 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021b8:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff fb6c 	bl	8001898 <LL_ADC_GetCommonPathInternalCh>
 80021c0:	0003      	movs	r3, r0
 80021c2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a15      	ldr	r2, [pc, #84]	@ (8002220 <HAL_ADC_ConfigChannel+0x364>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d108      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4a18      	ldr	r2, [pc, #96]	@ (8002234 <HAL_ADC_ConfigChannel+0x378>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	4a11      	ldr	r2, [pc, #68]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 80021d6:	0019      	movs	r1, r3
 80021d8:	0010      	movs	r0, r2
 80021da:	f7ff fb49 	bl	8001870 <LL_ADC_SetCommonPathInternalCh>
 80021de:	e039      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_ADC_ConfigChannel+0x370>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d108      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <HAL_ADC_ConfigChannel+0x37c>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 80021f2:	0019      	movs	r1, r3
 80021f4:	0010      	movs	r0, r2
 80021f6:	f7ff fb3b 	bl	8001870 <LL_ADC_SetCommonPathInternalCh>
 80021fa:	e02b      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0b      	ldr	r2, [pc, #44]	@ (8002230 <HAL_ADC_ConfigChannel+0x374>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d126      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4a0c      	ldr	r2, [pc, #48]	@ (800223c <HAL_ADC_ConfigChannel+0x380>)
 800220a:	4013      	ands	r3, r2
 800220c:	4a03      	ldr	r2, [pc, #12]	@ (800221c <HAL_ADC_ConfigChannel+0x360>)
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f7ff fb2d 	bl	8001870 <LL_ADC_SetCommonPathInternalCh>
 8002216:	e01d      	b.n	8002254 <HAL_ADC_ConfigChannel+0x398>
 8002218:	80000004 	.word	0x80000004
 800221c:	40012708 	.word	0x40012708
 8002220:	b0001000 	.word	0xb0001000
 8002224:	20000010 	.word	0x20000010
 8002228:	00030d40 	.word	0x00030d40
 800222c:	b8004000 	.word	0xb8004000
 8002230:	b4002000 	.word	0xb4002000
 8002234:	ff7fffff 	.word	0xff7fffff
 8002238:	feffffff 	.word	0xfeffffff
 800223c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	2220      	movs	r2, #32
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800224c:	2317      	movs	r3, #23
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2254      	movs	r2, #84	@ 0x54
 8002258:	2100      	movs	r1, #0
 800225a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800225c:	2317      	movs	r3, #23
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	781b      	ldrb	r3, [r3, #0]
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b006      	add	sp, #24
 8002268:	bd80      	pop	{r7, pc}
 800226a:	46c0      	nop			@ (mov r8, r8)

0800226c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(const ADC_HandleTypeDef *hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}

08002280 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0018      	movs	r0, r3
 8002292:	f7ff fbdb 	bl	8001a4c <LL_ADC_IsEnabled>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d000      	beq.n	800229c <ADC_Enable+0x1c>
 800229a:	e069      	b.n	8002370 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4a36      	ldr	r2, [pc, #216]	@ (800237c <ADC_Enable+0xfc>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	d00d      	beq.n	80022c4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	2210      	movs	r2, #16
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b8:	2201      	movs	r2, #1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e056      	b.n	8002372 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7ff fbad 	bl	8001a28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80022ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002380 <ADC_Enable+0x100>)
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7ff fae1 	bl	8001898 <LL_ADC_GetCommonPathInternalCh>
 80022d6:	0002      	movs	r2, r0
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	041b      	lsls	r3, r3, #16
 80022dc:	4013      	ands	r3, r2
 80022de:	d00f      	beq.n	8002300 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022e0:	4b28      	ldr	r3, [pc, #160]	@ (8002384 <ADC_Enable+0x104>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4928      	ldr	r1, [pc, #160]	@ (8002388 <ADC_Enable+0x108>)
 80022e6:	0018      	movs	r0, r3
 80022e8:	f7fd ff1e 	bl	8000128 <__udivsi3>
 80022ec:	0003      	movs	r3, r0
 80022ee:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80022f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022f2:	e002      	b.n	80022fa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f9      	bne.n	80022f4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	7e5b      	ldrb	r3, [r3, #25]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d033      	beq.n	8002370 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002308:	f7ff fa84 	bl	8001814 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002310:	e027      	b.n	8002362 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0018      	movs	r0, r3
 8002318:	f7ff fb98 	bl	8001a4c <LL_ADC_IsEnabled>
 800231c:	1e03      	subs	r3, r0, #0
 800231e:	d104      	bne.n	800232a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff fb7f 	bl	8001a28 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800232a:	f7ff fa73 	bl	8001814 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d914      	bls.n	8002362 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2201      	movs	r2, #1
 8002340:	4013      	ands	r3, r2
 8002342:	2b01      	cmp	r3, #1
 8002344:	d00d      	beq.n	8002362 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234a:	2210      	movs	r2, #16
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002356:	2201      	movs	r2, #1
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e007      	b.n	8002372 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2201      	movs	r2, #1
 800236a:	4013      	ands	r3, r2
 800236c:	2b01      	cmp	r3, #1
 800236e:	d1d0      	bne.n	8002312 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	0018      	movs	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	b004      	add	sp, #16
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	80000017 	.word	0x80000017
 8002380:	40012708 	.word	0x40012708
 8002384:	20000010 	.word	0x20000010
 8002388:	00030d40 	.word	0x00030d40

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	0002      	movs	r2, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b7f      	cmp	r3, #127	@ 0x7f
 80023a0:	d828      	bhi.n	80023f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002460 <__NVIC_SetPriority+0xd4>)
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	33c0      	adds	r3, #192	@ 0xc0
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	589b      	ldr	r3, [r3, r2]
 80023b2:	1dfa      	adds	r2, r7, #7
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	0011      	movs	r1, r2
 80023b8:	2203      	movs	r2, #3
 80023ba:	400a      	ands	r2, r1
 80023bc:	00d2      	lsls	r2, r2, #3
 80023be:	21ff      	movs	r1, #255	@ 0xff
 80023c0:	4091      	lsls	r1, r2
 80023c2:	000a      	movs	r2, r1
 80023c4:	43d2      	mvns	r2, r2
 80023c6:	401a      	ands	r2, r3
 80023c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	019b      	lsls	r3, r3, #6
 80023ce:	22ff      	movs	r2, #255	@ 0xff
 80023d0:	401a      	ands	r2, r3
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	0018      	movs	r0, r3
 80023d8:	2303      	movs	r3, #3
 80023da:	4003      	ands	r3, r0
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e0:	481f      	ldr	r0, [pc, #124]	@ (8002460 <__NVIC_SetPriority+0xd4>)
 80023e2:	1dfb      	adds	r3, r7, #7
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b25b      	sxtb	r3, r3
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	430a      	orrs	r2, r1
 80023ec:	33c0      	adds	r3, #192	@ 0xc0
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023f2:	e031      	b.n	8002458 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002464 <__NVIC_SetPriority+0xd8>)
 80023f6:	1dfb      	adds	r3, r7, #7
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	0019      	movs	r1, r3
 80023fc:	230f      	movs	r3, #15
 80023fe:	400b      	ands	r3, r1
 8002400:	3b08      	subs	r3, #8
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3306      	adds	r3, #6
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	18d3      	adds	r3, r2, r3
 800240a:	3304      	adds	r3, #4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	1dfa      	adds	r2, r7, #7
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	0011      	movs	r1, r2
 8002414:	2203      	movs	r2, #3
 8002416:	400a      	ands	r2, r1
 8002418:	00d2      	lsls	r2, r2, #3
 800241a:	21ff      	movs	r1, #255	@ 0xff
 800241c:	4091      	lsls	r1, r2
 800241e:	000a      	movs	r2, r1
 8002420:	43d2      	mvns	r2, r2
 8002422:	401a      	ands	r2, r3
 8002424:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	22ff      	movs	r2, #255	@ 0xff
 800242c:	401a      	ands	r2, r3
 800242e:	1dfb      	adds	r3, r7, #7
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	0018      	movs	r0, r3
 8002434:	2303      	movs	r3, #3
 8002436:	4003      	ands	r3, r0
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800243c:	4809      	ldr	r0, [pc, #36]	@ (8002464 <__NVIC_SetPriority+0xd8>)
 800243e:	1dfb      	adds	r3, r7, #7
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	001c      	movs	r4, r3
 8002444:	230f      	movs	r3, #15
 8002446:	4023      	ands	r3, r4
 8002448:	3b08      	subs	r3, #8
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	430a      	orrs	r2, r1
 800244e:	3306      	adds	r3, #6
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	18c3      	adds	r3, r0, r3
 8002454:	3304      	adds	r3, #4
 8002456:	601a      	str	r2, [r3, #0]
}
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b003      	add	sp, #12
 800245e:	bd90      	pop	{r4, r7, pc}
 8002460:	e000e100 	.word	0xe000e100
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1e5a      	subs	r2, r3, #1
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	045b      	lsls	r3, r3, #17
 8002478:	429a      	cmp	r2, r3
 800247a:	d301      	bcc.n	8002480 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247c:	2301      	movs	r3, #1
 800247e:	e010      	b.n	80024a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002480:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <SysTick_Config+0x44>)
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	3a01      	subs	r2, #1
 8002486:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002488:	2301      	movs	r3, #1
 800248a:	425b      	negs	r3, r3
 800248c:	2103      	movs	r1, #3
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff ff7c 	bl	800238c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <SysTick_Config+0x44>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	@ (80024ac <SysTick_Config+0x44>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	210f      	movs	r1, #15
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	1c02      	adds	r2, r0, #0
 80024c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	0011      	movs	r1, r2
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff ff5d 	bl	800238c <__NVIC_SetPriority>
}
 80024d2:	46c0      	nop			@ (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7ff ffbf 	bl	8002468 <SysTick_Config>
 80024ea:	0003      	movs	r3, r0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b002      	add	sp, #8
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002502:	e147      	b.n	8002794 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2101      	movs	r1, #1
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4091      	lsls	r1, r2
 800250e:	000a      	movs	r2, r1
 8002510:	4013      	ands	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <HAL_GPIO_Init+0x28>
 800251a:	e138      	b.n	800278e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2203      	movs	r2, #3
 8002522:	4013      	ands	r3, r2
 8002524:	2b01      	cmp	r3, #1
 8002526:	d005      	beq.n	8002534 <HAL_GPIO_Init+0x40>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2203      	movs	r2, #3
 800252e:	4013      	ands	r3, r2
 8002530:	2b02      	cmp	r3, #2
 8002532:	d130      	bne.n	8002596 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	409a      	lsls	r2, r3
 8002542:	0013      	movs	r3, r2
 8002544:	43da      	mvns	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	409a      	lsls	r2, r3
 8002556:	0013      	movs	r3, r2
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800256a:	2201      	movs	r2, #1
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
 8002570:	0013      	movs	r3, r2
 8002572:	43da      	mvns	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	2201      	movs	r2, #1
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
 8002588:	0013      	movs	r3, r2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2203      	movs	r2, #3
 800259c:	4013      	ands	r3, r2
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d017      	beq.n	80025d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	43da      	mvns	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	409a      	lsls	r2, r3
 80025c4:	0013      	movs	r3, r2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2203      	movs	r2, #3
 80025d8:	4013      	ands	r3, r2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d123      	bne.n	8002626 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	08da      	lsrs	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3208      	adds	r2, #8
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	58d3      	ldr	r3, [r2, r3]
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2207      	movs	r2, #7
 80025f0:	4013      	ands	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	220f      	movs	r2, #15
 80025f6:	409a      	lsls	r2, r3
 80025f8:	0013      	movs	r3, r2
 80025fa:	43da      	mvns	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2107      	movs	r1, #7
 800260a:	400b      	ands	r3, r1
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	409a      	lsls	r2, r3
 8002610:	0013      	movs	r3, r2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	6939      	ldr	r1, [r7, #16]
 8002624:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	409a      	lsls	r2, r3
 8002634:	0013      	movs	r3, r2
 8002636:	43da      	mvns	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2203      	movs	r2, #3
 8002644:	401a      	ands	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	409a      	lsls	r2, r3
 800264c:	0013      	movs	r3, r2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	23c0      	movs	r3, #192	@ 0xc0
 8002660:	029b      	lsls	r3, r3, #10
 8002662:	4013      	ands	r3, r2
 8002664:	d100      	bne.n	8002668 <HAL_GPIO_Init+0x174>
 8002666:	e092      	b.n	800278e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002668:	4a50      	ldr	r2, [pc, #320]	@ (80027ac <HAL_GPIO_Init+0x2b8>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3318      	adds	r3, #24
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	589b      	ldr	r3, [r3, r2]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2203      	movs	r2, #3
 800267a:	4013      	ands	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	220f      	movs	r2, #15
 8002680:	409a      	lsls	r2, r3
 8002682:	0013      	movs	r3, r2
 8002684:	43da      	mvns	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	23a0      	movs	r3, #160	@ 0xa0
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	429a      	cmp	r2, r3
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x1ca>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a45      	ldr	r2, [pc, #276]	@ (80027b0 <HAL_GPIO_Init+0x2bc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x1c6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a44      	ldr	r2, [pc, #272]	@ (80027b4 <HAL_GPIO_Init+0x2c0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x1c2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a43      	ldr	r2, [pc, #268]	@ (80027b8 <HAL_GPIO_Init+0x2c4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x1be>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e006      	b.n	80026c0 <HAL_GPIO_Init+0x1cc>
 80026b2:	2305      	movs	r3, #5
 80026b4:	e004      	b.n	80026c0 <HAL_GPIO_Init+0x1cc>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e002      	b.n	80026c0 <HAL_GPIO_Init+0x1cc>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_GPIO_Init+0x1cc>
 80026be:	2300      	movs	r3, #0
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	2103      	movs	r1, #3
 80026c4:	400a      	ands	r2, r1
 80026c6:	00d2      	lsls	r2, r2, #3
 80026c8:	4093      	lsls	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026d0:	4936      	ldr	r1, [pc, #216]	@ (80027ac <HAL_GPIO_Init+0x2b8>)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3318      	adds	r3, #24
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026de:	4b33      	ldr	r3, [pc, #204]	@ (80027ac <HAL_GPIO_Init+0x2b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	43da      	mvns	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	035b      	lsls	r3, r3, #13
 80026f6:	4013      	ands	r3, r2
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002702:	4b2a      	ldr	r3, [pc, #168]	@ (80027ac <HAL_GPIO_Init+0x2b8>)
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002708:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <HAL_GPIO_Init+0x2b8>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43da      	mvns	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	2380      	movs	r3, #128	@ 0x80
 800271e:	039b      	lsls	r3, r3, #14
 8002720:	4013      	ands	r3, r2
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800272c:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <HAL_GPIO_Init+0x2b8>)
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002732:	4a1e      	ldr	r2, [pc, #120]	@ (80027ac <HAL_GPIO_Init+0x2b8>)
 8002734:	2384      	movs	r3, #132	@ 0x84
 8002736:	58d3      	ldr	r3, [r2, r3]
 8002738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	43da      	mvns	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4013      	ands	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	2380      	movs	r3, #128	@ 0x80
 800274a:	029b      	lsls	r3, r3, #10
 800274c:	4013      	ands	r3, r2
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002758:	4914      	ldr	r1, [pc, #80]	@ (80027ac <HAL_GPIO_Init+0x2b8>)
 800275a:	2284      	movs	r2, #132	@ 0x84
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002760:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <HAL_GPIO_Init+0x2b8>)
 8002762:	2380      	movs	r3, #128	@ 0x80
 8002764:	58d3      	ldr	r3, [r2, r3]
 8002766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	43da      	mvns	r2, r3
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	025b      	lsls	r3, r3, #9
 800277a:	4013      	ands	r3, r2
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002786:	4909      	ldr	r1, [pc, #36]	@ (80027ac <HAL_GPIO_Init+0x2b8>)
 8002788:	2280      	movs	r2, #128	@ 0x80
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	40da      	lsrs	r2, r3
 800279c:	1e13      	subs	r3, r2, #0
 800279e:	d000      	beq.n	80027a2 <HAL_GPIO_Init+0x2ae>
 80027a0:	e6b0      	b.n	8002504 <HAL_GPIO_Init+0x10>
  }
}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b006      	add	sp, #24
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021800 	.word	0x40021800
 80027b0:	50000400 	.word	0x50000400
 80027b4:	50000800 	.word	0x50000800
 80027b8:	50000c00 	.word	0x50000c00

080027bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	000a      	movs	r2, r1
 80027c6:	1cbb      	adds	r3, r7, #2
 80027c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	1cba      	adds	r2, r7, #2
 80027d0:	8812      	ldrh	r2, [r2, #0]
 80027d2:	4013      	ands	r3, r2
 80027d4:	d004      	beq.n	80027e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027d6:	230f      	movs	r3, #15
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e003      	b.n	80027e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027e0:	230f      	movs	r3, #15
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027e8:	230f      	movs	r3, #15
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	781b      	ldrb	r3, [r3, #0]
}
 80027ee:	0018      	movs	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b004      	add	sp, #16
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	0008      	movs	r0, r1
 8002800:	0011      	movs	r1, r2
 8002802:	1cbb      	adds	r3, r7, #2
 8002804:	1c02      	adds	r2, r0, #0
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	1c7b      	adds	r3, r7, #1
 800280a:	1c0a      	adds	r2, r1, #0
 800280c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800280e:	1c7b      	adds	r3, r7, #1
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002816:	1cbb      	adds	r3, r7, #2
 8002818:	881a      	ldrh	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800281e:	e003      	b.n	8002828 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002820:	1cbb      	adds	r3, r7, #2
 8002822:	881a      	ldrh	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002828:	46c0      	nop			@ (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	b002      	add	sp, #8
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e08f      	b.n	8002962 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2241      	movs	r2, #65	@ 0x41
 8002846:	5c9b      	ldrb	r3, [r3, r2]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d107      	bne.n	800285e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2240      	movs	r2, #64	@ 0x40
 8002852:	2100      	movs	r1, #0
 8002854:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0018      	movs	r0, r3
 800285a:	f7fe fda9 	bl	80013b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2241      	movs	r2, #65	@ 0x41
 8002862:	2124      	movs	r1, #36	@ 0x24
 8002864:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	438a      	bics	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	493b      	ldr	r1, [pc, #236]	@ (800296c <HAL_I2C_Init+0x13c>)
 8002880:	400a      	ands	r2, r1
 8002882:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4938      	ldr	r1, [pc, #224]	@ (8002970 <HAL_I2C_Init+0x140>)
 8002890:	400a      	ands	r2, r1
 8002892:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d108      	bne.n	80028ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2180      	movs	r1, #128	@ 0x80
 80028a6:	0209      	lsls	r1, r1, #8
 80028a8:	430a      	orrs	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	e007      	b.n	80028be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2184      	movs	r1, #132	@ 0x84
 80028b8:	0209      	lsls	r1, r1, #8
 80028ba:	430a      	orrs	r2, r1
 80028bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d109      	bne.n	80028da <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2180      	movs	r1, #128	@ 0x80
 80028d2:	0109      	lsls	r1, r1, #4
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	e007      	b.n	80028ea <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4923      	ldr	r1, [pc, #140]	@ (8002974 <HAL_I2C_Init+0x144>)
 80028e6:	400a      	ands	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4920      	ldr	r1, [pc, #128]	@ (8002978 <HAL_I2C_Init+0x148>)
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	491a      	ldr	r1, [pc, #104]	@ (8002970 <HAL_I2C_Init+0x140>)
 8002906:	400a      	ands	r2, r1
 8002908:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	431a      	orrs	r2, r3
 8002914:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69d9      	ldr	r1, [r3, #28]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2101      	movs	r1, #1
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2241      	movs	r2, #65	@ 0x41
 800294e:	2120      	movs	r1, #32
 8002950:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2242      	movs	r2, #66	@ 0x42
 800295c:	2100      	movs	r1, #0
 800295e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b002      	add	sp, #8
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			@ (mov r8, r8)
 800296c:	f0ffffff 	.word	0xf0ffffff
 8002970:	ffff7fff 	.word	0xffff7fff
 8002974:	fffff7ff 	.word	0xfffff7ff
 8002978:	02008000 	.word	0x02008000

0800297c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b089      	sub	sp, #36	@ 0x24
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	0008      	movs	r0, r1
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	0019      	movs	r1, r3
 800298a:	230a      	movs	r3, #10
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	1c02      	adds	r2, r0, #0
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	2308      	movs	r3, #8
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	1c0a      	adds	r2, r1, #0
 8002998:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2241      	movs	r2, #65	@ 0x41
 800299e:	5c9b      	ldrb	r3, [r3, r2]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d000      	beq.n	80029a8 <HAL_I2C_Master_Transmit+0x2c>
 80029a6:	e10a      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2240      	movs	r2, #64	@ 0x40
 80029ac:	5c9b      	ldrb	r3, [r3, r2]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_I2C_Master_Transmit+0x3a>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e104      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x244>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2240      	movs	r2, #64	@ 0x40
 80029ba:	2101      	movs	r1, #1
 80029bc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029be:	f7fe ff29 	bl	8001814 <HAL_GetTick>
 80029c2:	0003      	movs	r3, r0
 80029c4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029c6:	2380      	movs	r3, #128	@ 0x80
 80029c8:	0219      	lsls	r1, r3, #8
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2319      	movs	r3, #25
 80029d2:	2201      	movs	r2, #1
 80029d4:	f000 f91e 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 80029d8:	1e03      	subs	r3, r0, #0
 80029da:	d001      	beq.n	80029e0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0ef      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2241      	movs	r2, #65	@ 0x41
 80029e4:	2121      	movs	r1, #33	@ 0x21
 80029e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2242      	movs	r2, #66	@ 0x42
 80029ec:	2110      	movs	r1, #16
 80029ee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2208      	movs	r2, #8
 8002a00:	18ba      	adds	r2, r7, r2
 8002a02:	8812      	ldrh	r2, [r2, #0]
 8002a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2bff      	cmp	r3, #255	@ 0xff
 8002a14:	d906      	bls.n	8002a24 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	22ff      	movs	r2, #255	@ 0xff
 8002a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	045b      	lsls	r3, r3, #17
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e007      	b.n	8002a34 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	049b      	lsls	r3, r3, #18
 8002a32:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d027      	beq.n	8002a8c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	697c      	ldr	r4, [r7, #20]
 8002a78:	230a      	movs	r3, #10
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	8819      	ldrh	r1, [r3, #0]
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	4b51      	ldr	r3, [pc, #324]	@ (8002bc8 <HAL_I2C_Master_Transmit+0x24c>)
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	0023      	movs	r3, r4
 8002a86:	f000 fa9f 	bl	8002fc8 <I2C_TransferConfig>
 8002a8a:	e06f      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	697c      	ldr	r4, [r7, #20]
 8002a94:	230a      	movs	r3, #10
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	8819      	ldrh	r1, [r3, #0]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc8 <HAL_I2C_Master_Transmit+0x24c>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	0023      	movs	r3, r4
 8002aa2:	f000 fa91 	bl	8002fc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002aa6:	e061      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 f908 	bl	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e081      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d03a      	beq.n	8002b6c <HAL_I2C_Master_Transmit+0x1f0>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d136      	bne.n	8002b6c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	0013      	movs	r3, r2
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2180      	movs	r1, #128	@ 0x80
 8002b0c:	f000 f882 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	1e03      	subs	r3, r0, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e053      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2bff      	cmp	r3, #255	@ 0xff
 8002b20:	d911      	bls.n	8002b46 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	22ff      	movs	r2, #255	@ 0xff
 8002b26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	045c      	lsls	r4, r3, #17
 8002b32:	230a      	movs	r3, #10
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	8819      	ldrh	r1, [r3, #0]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	0023      	movs	r3, r4
 8002b40:	f000 fa42 	bl	8002fc8 <I2C_TransferConfig>
 8002b44:	e012      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	2380      	movs	r3, #128	@ 0x80
 8002b58:	049c      	lsls	r4, r3, #18
 8002b5a:	230a      	movs	r3, #10
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	8819      	ldrh	r1, [r3, #0]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	2300      	movs	r3, #0
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	0023      	movs	r3, r4
 8002b68:	f000 fa2e 	bl	8002fc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d198      	bne.n	8002aa8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 f8e7 	bl	8002d50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b82:	1e03      	subs	r3, r0, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e01a      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	490b      	ldr	r1, [pc, #44]	@ (8002bcc <HAL_I2C_Master_Transmit+0x250>)
 8002b9e:	400a      	ands	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2241      	movs	r2, #65	@ 0x41
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2242      	movs	r2, #66	@ 0x42
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2240      	movs	r2, #64	@ 0x40
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e000      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
  }
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b007      	add	sp, #28
 8002bc6:	bd90      	pop	{r4, r7, pc}
 8002bc8:	80002000 	.word	0x80002000
 8002bcc:	fe00e800 	.word	0xfe00e800

08002bd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2202      	movs	r2, #2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d103      	bne.n	8002bee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d007      	beq.n	8002c0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2101      	movs	r1, #1
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	619a      	str	r2, [r3, #24]
  }
}
 8002c0c:	46c0      	nop			@ (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c24:	e03a      	b.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 f8d3 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002c32:	1e03      	subs	r3, r0, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e040      	b.n	8002cbc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	d02d      	beq.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c40:	f7fe fde8 	bl	8001814 <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d302      	bcc.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d122      	bne.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	425a      	negs	r2, r3
 8002c66:	4153      	adcs	r3, r2
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	1dfb      	adds	r3, r7, #7
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d113      	bne.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c78:	2220      	movs	r2, #32
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2241      	movs	r2, #65	@ 0x41
 8002c84:	2120      	movs	r1, #32
 8002c86:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2242      	movs	r2, #66	@ 0x42
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2240      	movs	r2, #64	@ 0x40
 8002c94:	2100      	movs	r1, #0
 8002c96:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e00f      	b.n	8002cbc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	425a      	negs	r2, r3
 8002cac:	4153      	adcs	r3, r2
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	1dfb      	adds	r3, r7, #7
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d0b5      	beq.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b004      	add	sp, #16
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cd0:	e032      	b.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 f87d 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002cde:	1e03      	subs	r3, r0, #0
 8002ce0:	d001      	beq.n	8002ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e030      	b.n	8002d48 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	d025      	beq.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cec:	f7fe fd92 	bl	8001814 <HAL_GetTick>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d302      	bcc.n	8002d02 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d11a      	bne.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d013      	beq.n	8002d38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d14:	2220      	movs	r2, #32
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2241      	movs	r2, #65	@ 0x41
 8002d20:	2120      	movs	r1, #32
 8002d22:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2242      	movs	r2, #66	@ 0x42
 8002d28:	2100      	movs	r1, #0
 8002d2a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2240      	movs	r2, #64	@ 0x40
 8002d30:	2100      	movs	r1, #0
 8002d32:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e007      	b.n	8002d48 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d1c5      	bne.n	8002cd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b004      	add	sp, #16
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d5c:	e02f      	b.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 f837 	bl	8002dd8 <I2C_IsErrorOccurred>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e02d      	b.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d72:	f7fe fd4f 	bl	8001814 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d11a      	bne.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d013      	beq.n	8002dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2241      	movs	r2, #65	@ 0x41
 8002da6:	2120      	movs	r1, #32
 8002da8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2242      	movs	r2, #66	@ 0x42
 8002dae:	2100      	movs	r1, #0
 8002db0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2240      	movs	r2, #64	@ 0x40
 8002db6:	2100      	movs	r1, #0
 8002db8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e007      	b.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d1c8      	bne.n	8002d5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b004      	add	sp, #16
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	@ 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de4:	2327      	movs	r3, #39	@ 0x27
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2210      	movs	r2, #16
 8002e00:	4013      	ands	r3, r2
 8002e02:	d100      	bne.n	8002e06 <I2C_IsErrorOccurred+0x2e>
 8002e04:	e079      	b.n	8002efa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e0e:	e057      	b.n	8002ec0 <I2C_IsErrorOccurred+0xe8>
 8002e10:	2227      	movs	r2, #39	@ 0x27
 8002e12:	18bb      	adds	r3, r7, r2
 8002e14:	18ba      	adds	r2, r7, r2
 8002e16:	7812      	ldrb	r2, [r2, #0]
 8002e18:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	d04f      	beq.n	8002ec0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e20:	f7fe fcf8 	bl	8001814 <HAL_GetTick>
 8002e24:	0002      	movs	r2, r0
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d302      	bcc.n	8002e36 <I2C_IsErrorOccurred+0x5e>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d144      	bne.n	8002ec0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	01db      	lsls	r3, r3, #7
 8002e40:	4013      	ands	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e44:	2013      	movs	r0, #19
 8002e46:	183b      	adds	r3, r7, r0
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	2142      	movs	r1, #66	@ 0x42
 8002e4c:	5c52      	ldrb	r2, [r2, r1]
 8002e4e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	2380      	movs	r3, #128	@ 0x80
 8002e58:	021b      	lsls	r3, r3, #8
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	2380      	movs	r3, #128	@ 0x80
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d126      	bne.n	8002eb2 <I2C_IsErrorOccurred+0xda>
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	01db      	lsls	r3, r3, #7
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d021      	beq.n	8002eb2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d01d      	beq.n	8002eb2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2180      	movs	r1, #128	@ 0x80
 8002e82:	01c9      	lsls	r1, r1, #7
 8002e84:	430a      	orrs	r2, r1
 8002e86:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e88:	f7fe fcc4 	bl	8001814 <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e90:	e00f      	b.n	8002eb2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e92:	f7fe fcbf 	bl	8001814 <HAL_GetTick>
 8002e96:	0002      	movs	r2, r0
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b19      	cmp	r3, #25
 8002e9e:	d908      	bls.n	8002eb2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ea8:	2327      	movs	r3, #39	@ 0x27
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]

              break;
 8002eb0:	e006      	b.n	8002ec0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d1e8      	bne.n	8002e92 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d004      	beq.n	8002ed8 <I2C_IsErrorOccurred+0x100>
 8002ece:	2327      	movs	r3, #39	@ 0x27
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d09b      	beq.n	8002e10 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ed8:	2327      	movs	r3, #39	@ 0x27
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	2204      	movs	r2, #4
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ef2:	2327      	movs	r3, #39	@ 0x27
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d00c      	beq.n	8002f26 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4313      	orrs	r3, r2
 8002f12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2280      	movs	r2, #128	@ 0x80
 8002f1a:	0052      	lsls	r2, r2, #1
 8002f1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f1e:	2327      	movs	r3, #39	@ 0x27
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d00c      	beq.n	8002f4a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	2208      	movs	r2, #8
 8002f34:	4313      	orrs	r3, r2
 8002f36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2280      	movs	r2, #128	@ 0x80
 8002f3e:	00d2      	lsls	r2, r2, #3
 8002f40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f42:	2327      	movs	r3, #39	@ 0x27
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	2380      	movs	r3, #128	@ 0x80
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4013      	ands	r3, r2
 8002f52:	d00c      	beq.n	8002f6e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	2202      	movs	r2, #2
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2280      	movs	r2, #128	@ 0x80
 8002f62:	0092      	lsls	r2, r2, #2
 8002f64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f66:	2327      	movs	r3, #39	@ 0x27
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002f6e:	2327      	movs	r3, #39	@ 0x27
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01d      	beq.n	8002fb4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f7ff fe28 	bl	8002bd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	490e      	ldr	r1, [pc, #56]	@ (8002fc4 <I2C_IsErrorOccurred+0x1ec>)
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2241      	movs	r2, #65	@ 0x41
 8002fa0:	2120      	movs	r1, #32
 8002fa2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2242      	movs	r2, #66	@ 0x42
 8002fa8:	2100      	movs	r1, #0
 8002faa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2240      	movs	r2, #64	@ 0x40
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002fb4:	2327      	movs	r3, #39	@ 0x27
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	781b      	ldrb	r3, [r3, #0]
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b00a      	add	sp, #40	@ 0x28
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	fe00e800 	.word	0xfe00e800

08002fc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	0008      	movs	r0, r1
 8002fd2:	0011      	movs	r1, r2
 8002fd4:	607b      	str	r3, [r7, #4]
 8002fd6:	240a      	movs	r4, #10
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	1c02      	adds	r2, r0, #0
 8002fdc:	801a      	strh	r2, [r3, #0]
 8002fde:	2009      	movs	r0, #9
 8002fe0:	183b      	adds	r3, r7, r0
 8002fe2:	1c0a      	adds	r2, r1, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	059b      	lsls	r3, r3, #22
 8002fec:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fee:	183b      	adds	r3, r7, r0
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	0419      	lsls	r1, r3, #16
 8002ff4:	23ff      	movs	r3, #255	@ 0xff
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ffa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003002:	4313      	orrs	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003012:	0d51      	lsrs	r1, r2, #21
 8003014:	2280      	movs	r2, #128	@ 0x80
 8003016:	00d2      	lsls	r2, r2, #3
 8003018:	400a      	ands	r2, r1
 800301a:	4907      	ldr	r1, [pc, #28]	@ (8003038 <I2C_TransferConfig+0x70>)
 800301c:	430a      	orrs	r2, r1
 800301e:	43d2      	mvns	r2, r2
 8003020:	401a      	ands	r2, r3
 8003022:	0011      	movs	r1, r2
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800302e:	46c0      	nop			@ (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b007      	add	sp, #28
 8003034:	bd90      	pop	{r4, r7, pc}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	03ff63ff 	.word	0x03ff63ff

0800303c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2241      	movs	r2, #65	@ 0x41
 800304a:	5c9b      	ldrb	r3, [r3, r2]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	d138      	bne.n	80030c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2240      	movs	r2, #64	@ 0x40
 8003056:	5c9b      	ldrb	r3, [r3, r2]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800305c:	2302      	movs	r3, #2
 800305e:	e032      	b.n	80030c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2240      	movs	r2, #64	@ 0x40
 8003064:	2101      	movs	r1, #1
 8003066:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2241      	movs	r2, #65	@ 0x41
 800306c:	2124      	movs	r1, #36	@ 0x24
 800306e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2101      	movs	r1, #1
 800307c:	438a      	bics	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4911      	ldr	r1, [pc, #68]	@ (80030d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800308c:	400a      	ands	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2241      	movs	r2, #65	@ 0x41
 80030b4:	2120      	movs	r1, #32
 80030b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2240      	movs	r2, #64	@ 0x40
 80030bc:	2100      	movs	r1, #0
 80030be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	0018      	movs	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b002      	add	sp, #8
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			@ (mov r8, r8)
 80030d0:	ffffefff 	.word	0xffffefff

080030d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2241      	movs	r2, #65	@ 0x41
 80030e2:	5c9b      	ldrb	r3, [r3, r2]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d139      	bne.n	800315e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2240      	movs	r2, #64	@ 0x40
 80030ee:	5c9b      	ldrb	r3, [r3, r2]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e033      	b.n	8003160 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2240      	movs	r2, #64	@ 0x40
 80030fc:	2101      	movs	r1, #1
 80030fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2241      	movs	r2, #65	@ 0x41
 8003104:	2124      	movs	r1, #36	@ 0x24
 8003106:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2101      	movs	r1, #1
 8003114:	438a      	bics	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a11      	ldr	r2, [pc, #68]	@ (8003168 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2101      	movs	r1, #1
 8003146:	430a      	orrs	r2, r1
 8003148:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2241      	movs	r2, #65	@ 0x41
 800314e:	2120      	movs	r1, #32
 8003150:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2240      	movs	r2, #64	@ 0x40
 8003156:	2100      	movs	r1, #0
 8003158:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b004      	add	sp, #16
 8003166:	bd80      	pop	{r7, pc}
 8003168:	fffff0ff 	.word	0xfffff0ff

0800316c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003174:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a19      	ldr	r2, [pc, #100]	@ (80031e0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800317a:	4013      	ands	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	4b17      	ldr	r3, [pc, #92]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	2380      	movs	r3, #128	@ 0x80
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	429a      	cmp	r2, r3
 800318e:	d11f      	bne.n	80031d0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003190:	4b14      	ldr	r3, [pc, #80]	@ (80031e4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	0013      	movs	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	189b      	adds	r3, r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4912      	ldr	r1, [pc, #72]	@ (80031e8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800319e:	0018      	movs	r0, r3
 80031a0:	f7fc ffc2 	bl	8000128 <__udivsi3>
 80031a4:	0003      	movs	r3, r0
 80031a6:	3301      	adds	r3, #1
 80031a8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031aa:	e008      	b.n	80031be <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e001      	b.n	80031be <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e009      	b.n	80031d2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	2380      	movs	r3, #128	@ 0x80
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	401a      	ands	r2, r3
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d0ed      	beq.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b004      	add	sp, #16
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	40007000 	.word	0x40007000
 80031e0:	fffff9ff 	.word	0xfffff9ff
 80031e4:	20000010 	.word	0x20000010
 80031e8:	000f4240 	.word	0x000f4240

080031ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80031f0:	4b03      	ldr	r3, [pc, #12]	@ (8003200 <LL_RCC_GetAPB1Prescaler+0x14>)
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	23e0      	movs	r3, #224	@ 0xe0
 80031f6:	01db      	lsls	r3, r3, #7
 80031f8:	4013      	ands	r3, r2
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000

08003204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e2fe      	b.n	8003814 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	4013      	ands	r3, r2
 800321e:	d100      	bne.n	8003222 <HAL_RCC_OscConfig+0x1e>
 8003220:	e07c      	b.n	800331c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003222:	4bc3      	ldr	r3, [pc, #780]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2238      	movs	r2, #56	@ 0x38
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800322c:	4bc0      	ldr	r3, [pc, #768]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	2203      	movs	r2, #3
 8003232:	4013      	ands	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	2b10      	cmp	r3, #16
 800323a:	d102      	bne.n	8003242 <HAL_RCC_OscConfig+0x3e>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d002      	beq.n	8003248 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	4bb9      	ldr	r3, [pc, #740]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	029b      	lsls	r3, r3, #10
 8003250:	4013      	ands	r3, r2
 8003252:	d062      	beq.n	800331a <HAL_RCC_OscConfig+0x116>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d15e      	bne.n	800331a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e2d9      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	2380      	movs	r3, #128	@ 0x80
 8003266:	025b      	lsls	r3, r3, #9
 8003268:	429a      	cmp	r2, r3
 800326a:	d107      	bne.n	800327c <HAL_RCC_OscConfig+0x78>
 800326c:	4bb0      	ldr	r3, [pc, #704]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4baf      	ldr	r3, [pc, #700]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003272:	2180      	movs	r1, #128	@ 0x80
 8003274:	0249      	lsls	r1, r1, #9
 8003276:	430a      	orrs	r2, r1
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e020      	b.n	80032be <HAL_RCC_OscConfig+0xba>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	23a0      	movs	r3, #160	@ 0xa0
 8003282:	02db      	lsls	r3, r3, #11
 8003284:	429a      	cmp	r2, r3
 8003286:	d10e      	bne.n	80032a6 <HAL_RCC_OscConfig+0xa2>
 8003288:	4ba9      	ldr	r3, [pc, #676]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4ba8      	ldr	r3, [pc, #672]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800328e:	2180      	movs	r1, #128	@ 0x80
 8003290:	02c9      	lsls	r1, r1, #11
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	4ba6      	ldr	r3, [pc, #664]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4ba5      	ldr	r3, [pc, #660]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800329c:	2180      	movs	r1, #128	@ 0x80
 800329e:	0249      	lsls	r1, r1, #9
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e00b      	b.n	80032be <HAL_RCC_OscConfig+0xba>
 80032a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4ba1      	ldr	r3, [pc, #644]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80032ac:	49a1      	ldr	r1, [pc, #644]	@ (8003534 <HAL_RCC_OscConfig+0x330>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	4b9f      	ldr	r3, [pc, #636]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b9e      	ldr	r3, [pc, #632]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80032b8:	499f      	ldr	r1, [pc, #636]	@ (8003538 <HAL_RCC_OscConfig+0x334>)
 80032ba:	400a      	ands	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d014      	beq.n	80032f0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe faa5 	bl	8001814 <HAL_GetTick>
 80032ca:	0003      	movs	r3, r0
 80032cc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fe faa0 	bl	8001814 <HAL_GetTick>
 80032d4:	0002      	movs	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	@ 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e298      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e2:	4b93      	ldr	r3, [pc, #588]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	2380      	movs	r3, #128	@ 0x80
 80032e8:	029b      	lsls	r3, r3, #10
 80032ea:	4013      	ands	r3, r2
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0xcc>
 80032ee:	e015      	b.n	800331c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe fa90 	bl	8001814 <HAL_GetTick>
 80032f4:	0003      	movs	r3, r0
 80032f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fa:	f7fe fa8b 	bl	8001814 <HAL_GetTick>
 80032fe:	0002      	movs	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b64      	cmp	r3, #100	@ 0x64
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e283      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330c:	4b88      	ldr	r3, [pc, #544]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	@ 0x80
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	4013      	ands	r3, r2
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0xf6>
 8003318:	e000      	b.n	800331c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2202      	movs	r2, #2
 8003322:	4013      	ands	r3, r2
 8003324:	d100      	bne.n	8003328 <HAL_RCC_OscConfig+0x124>
 8003326:	e099      	b.n	800345c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003328:	4b81      	ldr	r3, [pc, #516]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2238      	movs	r2, #56	@ 0x38
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003332:	4b7f      	ldr	r3, [pc, #508]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2203      	movs	r2, #3
 8003338:	4013      	ands	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b10      	cmp	r3, #16
 8003340:	d102      	bne.n	8003348 <HAL_RCC_OscConfig+0x144>
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b02      	cmp	r3, #2
 8003346:	d002      	beq.n	800334e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d135      	bne.n	80033ba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800334e:	4b78      	ldr	r3, [pc, #480]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4013      	ands	r3, r2
 8003358:	d005      	beq.n	8003366 <HAL_RCC_OscConfig+0x162>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e256      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003366:	4b72      	ldr	r3, [pc, #456]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4a74      	ldr	r2, [pc, #464]	@ (800353c <HAL_RCC_OscConfig+0x338>)
 800336c:	4013      	ands	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	021a      	lsls	r2, r3, #8
 8003376:	4b6e      	ldr	r3, [pc, #440]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003378:	430a      	orrs	r2, r1
 800337a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d112      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003382:	4b6b      	ldr	r3, [pc, #428]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6e      	ldr	r2, [pc, #440]	@ (8003540 <HAL_RCC_OscConfig+0x33c>)
 8003388:	4013      	ands	r3, r2
 800338a:	0019      	movs	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	4b67      	ldr	r3, [pc, #412]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003396:	4b66      	ldr	r3, [pc, #408]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	0adb      	lsrs	r3, r3, #11
 800339c:	2207      	movs	r2, #7
 800339e:	4013      	ands	r3, r2
 80033a0:	4a68      	ldr	r2, [pc, #416]	@ (8003544 <HAL_RCC_OscConfig+0x340>)
 80033a2:	40da      	lsrs	r2, r3
 80033a4:	4b68      	ldr	r3, [pc, #416]	@ (8003548 <HAL_RCC_OscConfig+0x344>)
 80033a6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033a8:	4b68      	ldr	r3, [pc, #416]	@ (800354c <HAL_RCC_OscConfig+0x348>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7fe f9d5 	bl	800175c <HAL_InitTick>
 80033b2:	1e03      	subs	r3, r0, #0
 80033b4:	d051      	beq.n	800345a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e22c      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d030      	beq.n	8003424 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80033c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003540 <HAL_RCC_OscConfig+0x33c>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	4b57      	ldr	r3, [pc, #348]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80033d6:	4b56      	ldr	r3, [pc, #344]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b55      	ldr	r3, [pc, #340]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80033dc:	2180      	movs	r1, #128	@ 0x80
 80033de:	0049      	lsls	r1, r1, #1
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fe fa16 	bl	8001814 <HAL_GetTick>
 80033e8:	0003      	movs	r3, r0
 80033ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ee:	f7fe fa11 	bl	8001814 <HAL_GetTick>
 80033f2:	0002      	movs	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e209      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003400:	4b4b      	ldr	r3, [pc, #300]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4013      	ands	r3, r2
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340c:	4b48      	ldr	r3, [pc, #288]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a4a      	ldr	r2, [pc, #296]	@ (800353c <HAL_RCC_OscConfig+0x338>)
 8003412:	4013      	ands	r3, r2
 8003414:	0019      	movs	r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	021a      	lsls	r2, r3, #8
 800341c:	4b44      	ldr	r3, [pc, #272]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	e01b      	b.n	800345c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003424:	4b42      	ldr	r3, [pc, #264]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800342a:	4949      	ldr	r1, [pc, #292]	@ (8003550 <HAL_RCC_OscConfig+0x34c>)
 800342c:	400a      	ands	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fe f9f0 	bl	8001814 <HAL_GetTick>
 8003434:	0003      	movs	r3, r0
 8003436:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343a:	f7fe f9eb 	bl	8001814 <HAL_GetTick>
 800343e:	0002      	movs	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e1e3      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800344c:	4b38      	ldr	r3, [pc, #224]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	2380      	movs	r3, #128	@ 0x80
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4013      	ands	r3, r2
 8003456:	d1f0      	bne.n	800343a <HAL_RCC_OscConfig+0x236>
 8003458:	e000      	b.n	800345c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800345a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2208      	movs	r2, #8
 8003462:	4013      	ands	r3, r2
 8003464:	d047      	beq.n	80034f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003466:	4b32      	ldr	r3, [pc, #200]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2238      	movs	r2, #56	@ 0x38
 800346c:	4013      	ands	r3, r2
 800346e:	2b18      	cmp	r3, #24
 8003470:	d10a      	bne.n	8003488 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003472:	4b2f      	ldr	r3, [pc, #188]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003476:	2202      	movs	r2, #2
 8003478:	4013      	ands	r3, r2
 800347a:	d03c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x2f2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d138      	bne.n	80034f6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e1c5      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d019      	beq.n	80034c4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003490:	4b27      	ldr	r3, [pc, #156]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003492:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003494:	4b26      	ldr	r3, [pc, #152]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003496:	2101      	movs	r1, #1
 8003498:	430a      	orrs	r2, r1
 800349a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe f9ba 	bl	8001814 <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a6:	f7fe f9b5 	bl	8001814 <HAL_GetTick>
 80034aa:	0002      	movs	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1ad      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80034ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034bc:	2202      	movs	r2, #2
 80034be:	4013      	ands	r3, r2
 80034c0:	d0f1      	beq.n	80034a6 <HAL_RCC_OscConfig+0x2a2>
 80034c2:	e018      	b.n	80034f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80034c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80034c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80034c8:	4b19      	ldr	r3, [pc, #100]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80034ca:	2101      	movs	r1, #1
 80034cc:	438a      	bics	r2, r1
 80034ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe f9a0 	bl	8001814 <HAL_GetTick>
 80034d4:	0003      	movs	r3, r0
 80034d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034da:	f7fe f99b 	bl	8001814 <HAL_GetTick>
 80034de:	0002      	movs	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e193      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ec:	4b10      	ldr	r3, [pc, #64]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 80034ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f0:	2202      	movs	r2, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	d1f1      	bne.n	80034da <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2204      	movs	r2, #4
 80034fc:	4013      	ands	r3, r2
 80034fe:	d100      	bne.n	8003502 <HAL_RCC_OscConfig+0x2fe>
 8003500:	e0c6      	b.n	8003690 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	231f      	movs	r3, #31
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800350a:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2238      	movs	r2, #56	@ 0x38
 8003510:	4013      	ands	r3, r2
 8003512:	2b20      	cmp	r3, #32
 8003514:	d11e      	bne.n	8003554 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003516:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <HAL_RCC_OscConfig+0x32c>)
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	2202      	movs	r2, #2
 800351c:	4013      	ands	r3, r2
 800351e:	d100      	bne.n	8003522 <HAL_RCC_OscConfig+0x31e>
 8003520:	e0b6      	b.n	8003690 <HAL_RCC_OscConfig+0x48c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d000      	beq.n	800352c <HAL_RCC_OscConfig+0x328>
 800352a:	e0b1      	b.n	8003690 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e171      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
 8003530:	40021000 	.word	0x40021000
 8003534:	fffeffff 	.word	0xfffeffff
 8003538:	fffbffff 	.word	0xfffbffff
 800353c:	ffff80ff 	.word	0xffff80ff
 8003540:	ffffc7ff 	.word	0xffffc7ff
 8003544:	00f42400 	.word	0x00f42400
 8003548:	20000010 	.word	0x20000010
 800354c:	20000014 	.word	0x20000014
 8003550:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003554:	4bb1      	ldr	r3, [pc, #708]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003558:	2380      	movs	r3, #128	@ 0x80
 800355a:	055b      	lsls	r3, r3, #21
 800355c:	4013      	ands	r3, r2
 800355e:	d101      	bne.n	8003564 <HAL_RCC_OscConfig+0x360>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x362>
 8003564:	2300      	movs	r3, #0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d011      	beq.n	800358e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	4bac      	ldr	r3, [pc, #688]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 800356c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800356e:	4bab      	ldr	r3, [pc, #684]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003570:	2180      	movs	r1, #128	@ 0x80
 8003572:	0549      	lsls	r1, r1, #21
 8003574:	430a      	orrs	r2, r1
 8003576:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003578:	4ba8      	ldr	r3, [pc, #672]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 800357a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800357c:	2380      	movs	r3, #128	@ 0x80
 800357e:	055b      	lsls	r3, r3, #21
 8003580:	4013      	ands	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003586:	231f      	movs	r3, #31
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358e:	4ba4      	ldr	r3, [pc, #656]	@ (8003820 <HAL_RCC_OscConfig+0x61c>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4013      	ands	r3, r2
 8003598:	d11a      	bne.n	80035d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359a:	4ba1      	ldr	r3, [pc, #644]	@ (8003820 <HAL_RCC_OscConfig+0x61c>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4ba0      	ldr	r3, [pc, #640]	@ (8003820 <HAL_RCC_OscConfig+0x61c>)
 80035a0:	2180      	movs	r1, #128	@ 0x80
 80035a2:	0049      	lsls	r1, r1, #1
 80035a4:	430a      	orrs	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80035a8:	f7fe f934 	bl	8001814 <HAL_GetTick>
 80035ac:	0003      	movs	r3, r0
 80035ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fe f92f 	bl	8001814 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e127      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c4:	4b96      	ldr	r3, [pc, #600]	@ (8003820 <HAL_RCC_OscConfig+0x61c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	2380      	movs	r3, #128	@ 0x80
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4013      	ands	r3, r2
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3e2>
 80035d8:	4b90      	ldr	r3, [pc, #576]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 80035da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035dc:	4b8f      	ldr	r3, [pc, #572]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 80035de:	2101      	movs	r1, #1
 80035e0:	430a      	orrs	r2, r1
 80035e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035e4:	e01c      	b.n	8003620 <HAL_RCC_OscConfig+0x41c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x404>
 80035ee:	4b8b      	ldr	r3, [pc, #556]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 80035f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035f2:	4b8a      	ldr	r3, [pc, #552]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 80035f4:	2104      	movs	r1, #4
 80035f6:	430a      	orrs	r2, r1
 80035f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035fa:	4b88      	ldr	r3, [pc, #544]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 80035fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80035fe:	4b87      	ldr	r3, [pc, #540]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003600:	2101      	movs	r1, #1
 8003602:	430a      	orrs	r2, r1
 8003604:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0x41c>
 8003608:	4b84      	ldr	r3, [pc, #528]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 800360a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800360c:	4b83      	ldr	r3, [pc, #524]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 800360e:	2101      	movs	r1, #1
 8003610:	438a      	bics	r2, r1
 8003612:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003614:	4b81      	ldr	r3, [pc, #516]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003616:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003618:	4b80      	ldr	r3, [pc, #512]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 800361a:	2104      	movs	r1, #4
 800361c:	438a      	bics	r2, r1
 800361e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d014      	beq.n	8003652 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fe f8f4 	bl	8001814 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003630:	e009      	b.n	8003646 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7fe f8ef 	bl	8001814 <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	4a79      	ldr	r2, [pc, #484]	@ (8003824 <HAL_RCC_OscConfig+0x620>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0e6      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003646:	4b75      	ldr	r3, [pc, #468]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364a:	2202      	movs	r2, #2
 800364c:	4013      	ands	r3, r2
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x42e>
 8003650:	e013      	b.n	800367a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fe f8df 	bl	8001814 <HAL_GetTick>
 8003656:	0003      	movs	r3, r0
 8003658:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800365a:	e009      	b.n	8003670 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe f8da 	bl	8001814 <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	4a6f      	ldr	r2, [pc, #444]	@ (8003824 <HAL_RCC_OscConfig+0x620>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0d1      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003670:	4b6a      	ldr	r3, [pc, #424]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003674:	2202      	movs	r2, #2
 8003676:	4013      	ands	r3, r2
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800367a:	231f      	movs	r3, #31
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003684:	4b65      	ldr	r3, [pc, #404]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003688:	4b64      	ldr	r3, [pc, #400]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 800368a:	4967      	ldr	r1, [pc, #412]	@ (8003828 <HAL_RCC_OscConfig+0x624>)
 800368c:	400a      	ands	r2, r1
 800368e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d100      	bne.n	800369a <HAL_RCC_OscConfig+0x496>
 8003698:	e0bb      	b.n	8003812 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800369a:	4b60      	ldr	r3, [pc, #384]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2238      	movs	r2, #56	@ 0x38
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d100      	bne.n	80036a8 <HAL_RCC_OscConfig+0x4a4>
 80036a6:	e07b      	b.n	80037a0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d156      	bne.n	800375e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b0:	4b5a      	ldr	r3, [pc, #360]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b59      	ldr	r3, [pc, #356]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 80036b6:	495d      	ldr	r1, [pc, #372]	@ (800382c <HAL_RCC_OscConfig+0x628>)
 80036b8:	400a      	ands	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe f8aa 	bl	8001814 <HAL_GetTick>
 80036c0:	0003      	movs	r3, r0
 80036c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe f8a5 	bl	8001814 <HAL_GetTick>
 80036ca:	0002      	movs	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e09d      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d8:	4b50      	ldr	r3, [pc, #320]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	2380      	movs	r3, #128	@ 0x80
 80036de:	049b      	lsls	r3, r3, #18
 80036e0:	4013      	ands	r3, r2
 80036e2:	d1f0      	bne.n	80036c6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e4:	4b4d      	ldr	r3, [pc, #308]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a51      	ldr	r2, [pc, #324]	@ (8003830 <HAL_RCC_OscConfig+0x62c>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	0019      	movs	r1, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1a      	ldr	r2, [r3, #32]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fc:	021b      	lsls	r3, r3, #8
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003710:	431a      	orrs	r2, r3
 8003712:	4b42      	ldr	r3, [pc, #264]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003714:	430a      	orrs	r2, r1
 8003716:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003718:	4b40      	ldr	r3, [pc, #256]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b3f      	ldr	r3, [pc, #252]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 800371e:	2180      	movs	r1, #128	@ 0x80
 8003720:	0449      	lsls	r1, r1, #17
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003726:	4b3d      	ldr	r3, [pc, #244]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	4b3c      	ldr	r3, [pc, #240]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 800372c:	2180      	movs	r1, #128	@ 0x80
 800372e:	0549      	lsls	r1, r1, #21
 8003730:	430a      	orrs	r2, r1
 8003732:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe f86e 	bl	8001814 <HAL_GetTick>
 8003738:	0003      	movs	r3, r0
 800373a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373e:	f7fe f869 	bl	8001814 <HAL_GetTick>
 8003742:	0002      	movs	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e061      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003750:	4b32      	ldr	r3, [pc, #200]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	2380      	movs	r3, #128	@ 0x80
 8003756:	049b      	lsls	r3, r3, #18
 8003758:	4013      	ands	r3, r2
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x53a>
 800375c:	e059      	b.n	8003812 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b2f      	ldr	r3, [pc, #188]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4b2e      	ldr	r3, [pc, #184]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003764:	4931      	ldr	r1, [pc, #196]	@ (800382c <HAL_RCC_OscConfig+0x628>)
 8003766:	400a      	ands	r2, r1
 8003768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fe f853 	bl	8001814 <HAL_GetTick>
 800376e:	0003      	movs	r3, r0
 8003770:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe f84e 	bl	8001814 <HAL_GetTick>
 8003778:	0002      	movs	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e046      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003786:	4b25      	ldr	r3, [pc, #148]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	049b      	lsls	r3, r3, #18
 800378e:	4013      	ands	r3, r2
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003792:	4b22      	ldr	r3, [pc, #136]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	4b21      	ldr	r3, [pc, #132]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 8003798:	4926      	ldr	r1, [pc, #152]	@ (8003834 <HAL_RCC_OscConfig+0x630>)
 800379a:	400a      	ands	r2, r1
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	e038      	b.n	8003812 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e033      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80037ac:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <HAL_RCC_OscConfig+0x618>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2203      	movs	r2, #3
 80037b6:	401a      	ands	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d126      	bne.n	800380e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2270      	movs	r2, #112	@ 0x70
 80037c4:	401a      	ands	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d11f      	bne.n	800380e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	23fe      	movs	r3, #254	@ 0xfe
 80037d2:	01db      	lsls	r3, r3, #7
 80037d4:	401a      	ands	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d116      	bne.n	800380e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	23f8      	movs	r3, #248	@ 0xf8
 80037e4:	039b      	lsls	r3, r3, #14
 80037e6:	401a      	ands	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d10e      	bne.n	800380e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	23e0      	movs	r3, #224	@ 0xe0
 80037f4:	051b      	lsls	r3, r3, #20
 80037f6:	401a      	ands	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	0f5b      	lsrs	r3, r3, #29
 8003804:	075a      	lsls	r2, r3, #29
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	0018      	movs	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	b008      	add	sp, #32
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	40007000 	.word	0x40007000
 8003824:	00001388 	.word	0x00001388
 8003828:	efffffff 	.word	0xefffffff
 800382c:	feffffff 	.word	0xfeffffff
 8003830:	11c1808c 	.word	0x11c1808c
 8003834:	eefefffc 	.word	0xeefefffc

08003838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0e9      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b76      	ldr	r3, [pc, #472]	@ (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2207      	movs	r2, #7
 8003852:	4013      	ands	r3, r2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d91e      	bls.n	8003898 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b73      	ldr	r3, [pc, #460]	@ (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2207      	movs	r2, #7
 8003860:	4393      	bics	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	4b70      	ldr	r3, [pc, #448]	@ (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800386c:	f7fd ffd2 	bl	8001814 <HAL_GetTick>
 8003870:	0003      	movs	r3, r0
 8003872:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003874:	e009      	b.n	800388a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003876:	f7fd ffcd 	bl	8001814 <HAL_GetTick>
 800387a:	0002      	movs	r2, r0
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	4a6a      	ldr	r2, [pc, #424]	@ (8003a2c <HAL_RCC_ClockConfig+0x1f4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0ca      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800388a:	4b67      	ldr	r3, [pc, #412]	@ (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2207      	movs	r2, #7
 8003890:	4013      	ands	r3, r2
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d1ee      	bne.n	8003876 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2202      	movs	r2, #2
 800389e:	4013      	ands	r3, r2
 80038a0:	d015      	beq.n	80038ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2204      	movs	r2, #4
 80038a8:	4013      	ands	r3, r2
 80038aa:	d006      	beq.n	80038ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80038ac:	4b60      	ldr	r3, [pc, #384]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	4b5f      	ldr	r3, [pc, #380]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038b2:	21e0      	movs	r1, #224	@ 0xe0
 80038b4:	01c9      	lsls	r1, r1, #7
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4a5d      	ldr	r2, [pc, #372]	@ (8003a34 <HAL_RCC_ClockConfig+0x1fc>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	0019      	movs	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	4b59      	ldr	r3, [pc, #356]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038ca:	430a      	orrs	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	d057      	beq.n	8003988 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e0:	4b53      	ldr	r3, [pc, #332]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	2380      	movs	r3, #128	@ 0x80
 80038e6:	029b      	lsls	r3, r3, #10
 80038e8:	4013      	ands	r3, r2
 80038ea:	d12b      	bne.n	8003944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e097      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2380      	movs	r3, #128	@ 0x80
 80038fe:	049b      	lsls	r3, r3, #18
 8003900:	4013      	ands	r3, r2
 8003902:	d11f      	bne.n	8003944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e08b      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003910:	4b47      	ldr	r3, [pc, #284]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2380      	movs	r3, #128	@ 0x80
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4013      	ands	r3, r2
 800391a:	d113      	bne.n	8003944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e07f      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d106      	bne.n	8003936 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003928:	4b41      	ldr	r3, [pc, #260]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 800392a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392c:	2202      	movs	r2, #2
 800392e:	4013      	ands	r3, r2
 8003930:	d108      	bne.n	8003944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e074      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003936:	4b3e      	ldr	r3, [pc, #248]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 8003938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393a:	2202      	movs	r2, #2
 800393c:	4013      	ands	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e06d      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003944:	4b3a      	ldr	r3, [pc, #232]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2207      	movs	r2, #7
 800394a:	4393      	bics	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4b37      	ldr	r3, [pc, #220]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 8003954:	430a      	orrs	r2, r1
 8003956:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003958:	f7fd ff5c 	bl	8001814 <HAL_GetTick>
 800395c:	0003      	movs	r3, r0
 800395e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003960:	e009      	b.n	8003976 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003962:	f7fd ff57 	bl	8001814 <HAL_GetTick>
 8003966:	0002      	movs	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	4a2f      	ldr	r2, [pc, #188]	@ (8003a2c <HAL_RCC_ClockConfig+0x1f4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e054      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2e      	ldr	r3, [pc, #184]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2238      	movs	r2, #56	@ 0x38
 800397c:	401a      	ands	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	429a      	cmp	r2, r3
 8003986:	d1ec      	bne.n	8003962 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b27      	ldr	r3, [pc, #156]	@ (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2207      	movs	r2, #7
 800398e:	4013      	ands	r3, r2
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d21e      	bcs.n	80039d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b24      	ldr	r3, [pc, #144]	@ (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2207      	movs	r2, #7
 800399c:	4393      	bics	r3, r2
 800399e:	0019      	movs	r1, r3
 80039a0:	4b21      	ldr	r3, [pc, #132]	@ (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039a8:	f7fd ff34 	bl	8001814 <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039b0:	e009      	b.n	80039c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b2:	f7fd ff2f 	bl	8001814 <HAL_GetTick>
 80039b6:	0002      	movs	r2, r0
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a2c <HAL_RCC_ClockConfig+0x1f4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e02c      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039c6:	4b18      	ldr	r3, [pc, #96]	@ (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2207      	movs	r2, #7
 80039cc:	4013      	ands	r3, r2
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1ee      	bne.n	80039b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2204      	movs	r2, #4
 80039da:	4013      	ands	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80039de:	4b14      	ldr	r3, [pc, #80]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4a15      	ldr	r2, [pc, #84]	@ (8003a38 <HAL_RCC_ClockConfig+0x200>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	4b10      	ldr	r3, [pc, #64]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80039f2:	f000 f829 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 80039f6:	0001      	movs	r1, r0
 80039f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	220f      	movs	r2, #15
 8003a00:	401a      	ands	r2, r3
 8003a02:	4b0e      	ldr	r3, [pc, #56]	@ (8003a3c <HAL_RCC_ClockConfig+0x204>)
 8003a04:	0092      	lsls	r2, r2, #2
 8003a06:	58d3      	ldr	r3, [r2, r3]
 8003a08:	221f      	movs	r2, #31
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	000a      	movs	r2, r1
 8003a0e:	40da      	lsrs	r2, r3
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_RCC_ClockConfig+0x208>)
 8003a12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a14:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <HAL_RCC_ClockConfig+0x20c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7fd fe9f 	bl	800175c <HAL_InitTick>
 8003a1e:	0003      	movs	r3, r0
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b004      	add	sp, #16
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	00001388 	.word	0x00001388
 8003a30:	40021000 	.word	0x40021000
 8003a34:	fffff0ff 	.word	0xfffff0ff
 8003a38:	ffff8fff 	.word	0xffff8fff
 8003a3c:	08006608 	.word	0x08006608
 8003a40:	20000010 	.word	0x20000010
 8003a44:	20000014 	.word	0x20000014

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2238      	movs	r2, #56	@ 0x38
 8003a54:	4013      	ands	r3, r2
 8003a56:	d10f      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003a58:	4b39      	ldr	r3, [pc, #228]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	0adb      	lsrs	r3, r3, #11
 8003a5e:	2207      	movs	r2, #7
 8003a60:	4013      	ands	r3, r2
 8003a62:	2201      	movs	r2, #1
 8003a64:	409a      	lsls	r2, r3
 8003a66:	0013      	movs	r3, r2
 8003a68:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003a6a:	6839      	ldr	r1, [r7, #0]
 8003a6c:	4835      	ldr	r0, [pc, #212]	@ (8003b44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a6e:	f7fc fb5b 	bl	8000128 <__udivsi3>
 8003a72:	0003      	movs	r3, r0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	e05d      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a78:	4b31      	ldr	r3, [pc, #196]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2238      	movs	r2, #56	@ 0x38
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d102      	bne.n	8003a8a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a84:	4b30      	ldr	r3, [pc, #192]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	e054      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2238      	movs	r2, #56	@ 0x38
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d138      	bne.n	8003b08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a96:	4b2a      	ldr	r3, [pc, #168]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aa0:	4b27      	ldr	r3, [pc, #156]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	2207      	movs	r2, #7
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	4824      	ldr	r0, [pc, #144]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ab8:	f7fc fb36 	bl	8000128 <__udivsi3>
 8003abc:	0003      	movs	r3, r0
 8003abe:	0019      	movs	r1, r3
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	227f      	movs	r2, #127	@ 0x7f
 8003ac8:	4013      	ands	r3, r2
 8003aca:	434b      	muls	r3, r1
 8003acc:	617b      	str	r3, [r7, #20]
        break;
 8003ace:	e00d      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	481c      	ldr	r0, [pc, #112]	@ (8003b44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ad4:	f7fc fb28 	bl	8000128 <__udivsi3>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	0019      	movs	r1, r3
 8003adc:	4b18      	ldr	r3, [pc, #96]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	227f      	movs	r2, #127	@ 0x7f
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	434b      	muls	r3, r1
 8003ae8:	617b      	str	r3, [r7, #20]
        break;
 8003aea:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003aec:	4b14      	ldr	r3, [pc, #80]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	0f5b      	lsrs	r3, r3, #29
 8003af2:	2207      	movs	r2, #7
 8003af4:	4013      	ands	r3, r2
 8003af6:	3301      	adds	r3, #1
 8003af8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	6978      	ldr	r0, [r7, #20]
 8003afe:	f7fc fb13 	bl	8000128 <__udivsi3>
 8003b02:	0003      	movs	r3, r0
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e015      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b08:	4b0d      	ldr	r3, [pc, #52]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2238      	movs	r2, #56	@ 0x38
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d103      	bne.n	8003b1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2238      	movs	r2, #56	@ 0x38
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b18      	cmp	r3, #24
 8003b26:	d103      	bne.n	8003b30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003b28:	23fa      	movs	r3, #250	@ 0xfa
 8003b2a:	01db      	lsls	r3, r3, #7
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	e001      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b34:	693b      	ldr	r3, [r7, #16]
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b006      	add	sp, #24
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	40021000 	.word	0x40021000
 8003b44:	00f42400 	.word	0x00f42400
 8003b48:	007a1200 	.word	0x007a1200

08003b4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b50:	4b02      	ldr	r3, [pc, #8]	@ (8003b5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			@ (mov r8, r8)
 8003b5c:	20000010 	.word	0x20000010

08003b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b60:	b5b0      	push	{r4, r5, r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b64:	f7ff fff2 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b68:	0004      	movs	r4, r0
 8003b6a:	f7ff fb3f 	bl	80031ec <LL_RCC_GetAPB1Prescaler>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	0b1a      	lsrs	r2, r3, #12
 8003b72:	4b05      	ldr	r3, [pc, #20]	@ (8003b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b74:	0092      	lsls	r2, r2, #2
 8003b76:	58d3      	ldr	r3, [r2, r3]
 8003b78:	221f      	movs	r2, #31
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	40dc      	lsrs	r4, r3
 8003b7e:	0023      	movs	r3, r4
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bdb0      	pop	{r4, r5, r7, pc}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	08006648 	.word	0x08006648

08003b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003b94:	2313      	movs	r3, #19
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b9c:	2312      	movs	r3, #18
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2380      	movs	r3, #128	@ 0x80
 8003baa:	029b      	lsls	r3, r3, #10
 8003bac:	4013      	ands	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003bb0:	e0a3      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb2:	2011      	movs	r0, #17
 8003bb4:	183b      	adds	r3, r7, r0
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bba:	4bc3      	ldr	r3, [pc, #780]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bbe:	2380      	movs	r3, #128	@ 0x80
 8003bc0:	055b      	lsls	r3, r3, #21
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d110      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	4bc0      	ldr	r3, [pc, #768]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bca:	4bbf      	ldr	r3, [pc, #764]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bcc:	2180      	movs	r1, #128	@ 0x80
 8003bce:	0549      	lsls	r1, r1, #21
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003bd4:	4bbc      	ldr	r3, [pc, #752]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	055b      	lsls	r3, r3, #21
 8003bdc:	4013      	ands	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be2:	183b      	adds	r3, r7, r0
 8003be4:	2201      	movs	r2, #1
 8003be6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be8:	4bb8      	ldr	r3, [pc, #736]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4bb7      	ldr	r3, [pc, #732]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003bee:	2180      	movs	r1, #128	@ 0x80
 8003bf0:	0049      	lsls	r1, r1, #1
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf6:	f7fd fe0d 	bl	8001814 <HAL_GetTick>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c00:	f7fd fe08 	bl	8001814 <HAL_GetTick>
 8003c04:	0002      	movs	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d904      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003c0e:	2313      	movs	r3, #19
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	2203      	movs	r2, #3
 8003c14:	701a      	strb	r2, [r3, #0]
        break;
 8003c16:	e005      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c18:	4bac      	ldr	r3, [pc, #688]	@ (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	@ 0x80
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4013      	ands	r3, r2
 8003c22:	d0ed      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003c24:	2313      	movs	r3, #19
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d154      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c2e:	4ba6      	ldr	r3, [pc, #664]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c32:	23c0      	movs	r3, #192	@ 0xc0
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4013      	ands	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d019      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d014      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c4a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4e:	4aa0      	ldr	r2, [pc, #640]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c54:	4b9c      	ldr	r3, [pc, #624]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c58:	4b9b      	ldr	r3, [pc, #620]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c5a:	2180      	movs	r1, #128	@ 0x80
 8003c5c:	0249      	lsls	r1, r1, #9
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c62:	4b99      	ldr	r3, [pc, #612]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c66:	4b98      	ldr	r3, [pc, #608]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c68:	499a      	ldr	r1, [pc, #616]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003c6a:	400a      	ands	r2, r1
 8003c6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c6e:	4b96      	ldr	r3, [pc, #600]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2201      	movs	r2, #1
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d016      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd fdca 	bl	8001814 <HAL_GetTick>
 8003c80:	0003      	movs	r3, r0
 8003c82:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c84:	e00c      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fd fdc5 	bl	8001814 <HAL_GetTick>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	4a91      	ldr	r2, [pc, #580]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d904      	bls.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003c96:	2313      	movs	r3, #19
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	701a      	strb	r2, [r3, #0]
            break;
 8003c9e:	e004      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca0:	4b89      	ldr	r3, [pc, #548]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d0ed      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003caa:	2313      	movs	r3, #19
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb4:	4b84      	ldr	r3, [pc, #528]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb8:	4a85      	ldr	r2, [pc, #532]	@ (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003cba:	4013      	ands	r3, r2
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cc2:	4b81      	ldr	r3, [pc, #516]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cc8:	e00c      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cca:	2312      	movs	r3, #18
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	2213      	movs	r2, #19
 8003cd0:	18ba      	adds	r2, r7, r2
 8003cd2:	7812      	ldrb	r2, [r2, #0]
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	2312      	movs	r3, #18
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	2213      	movs	r2, #19
 8003cde:	18ba      	adds	r2, r7, r2
 8003ce0:	7812      	ldrb	r2, [r2, #0]
 8003ce2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ce4:	2311      	movs	r3, #17
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d105      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cee:	4b76      	ldr	r3, [pc, #472]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cf2:	4b75      	ldr	r3, [pc, #468]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003cf4:	4979      	ldr	r1, [pc, #484]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003cf6:	400a      	ands	r2, r1
 8003cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4013      	ands	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d04:	4b70      	ldr	r3, [pc, #448]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	2203      	movs	r2, #3
 8003d0a:	4393      	bics	r3, r2
 8003d0c:	0019      	movs	r1, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d14:	430a      	orrs	r2, r1
 8003d16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d22:	4b69      	ldr	r3, [pc, #420]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	220c      	movs	r2, #12
 8003d28:	4393      	bics	r3, r2
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	4b65      	ldr	r3, [pc, #404]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d32:	430a      	orrs	r2, r1
 8003d34:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2210      	movs	r2, #16
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d40:	4b61      	ldr	r3, [pc, #388]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d44:	4a66      	ldr	r2, [pc, #408]	@ (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d50:	430a      	orrs	r2, r1
 8003d52:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d009      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d60:	4b59      	ldr	r3, [pc, #356]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d64:	4a5f      	ldr	r2, [pc, #380]	@ (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	0019      	movs	r1, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	4b56      	ldr	r3, [pc, #344]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d70:	430a      	orrs	r2, r1
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2380      	movs	r3, #128	@ 0x80
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d80:	4b51      	ldr	r3, [pc, #324]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d84:	4a58      	ldr	r2, [pc, #352]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	0019      	movs	r1, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69da      	ldr	r2, [r3, #28]
 8003d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003d90:	430a      	orrs	r2, r1
 8003d92:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da2:	4a52      	ldr	r2, [pc, #328]	@ (8003eec <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	0019      	movs	r1, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	4b46      	ldr	r3, [pc, #280]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dae:	430a      	orrs	r2, r1
 8003db0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	2380      	movs	r3, #128	@ 0x80
 8003db8:	01db      	lsls	r3, r3, #7
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d015      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dbe:	4b42      	ldr	r3, [pc, #264]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	0899      	lsrs	r1, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	4b3f      	ldr	r3, [pc, #252]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1a      	ldr	r2, [r3, #32]
 8003dd4:	2380      	movs	r3, #128	@ 0x80
 8003dd6:	05db      	lsls	r3, r3, #23
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d106      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	4b39      	ldr	r3, [pc, #228]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003de2:	2180      	movs	r1, #128	@ 0x80
 8003de4:	0249      	lsls	r1, r1, #9
 8003de6:	430a      	orrs	r2, r1
 8003de8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	031b      	lsls	r3, r3, #12
 8003df2:	4013      	ands	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003df6:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfa:	2240      	movs	r2, #64	@ 0x40
 8003dfc:	4393      	bics	r3, r2
 8003dfe:	0019      	movs	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e04:	4b30      	ldr	r3, [pc, #192]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e06:	430a      	orrs	r2, r1
 8003e08:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	2380      	movs	r3, #128	@ 0x80
 8003e10:	039b      	lsls	r3, r3, #14
 8003e12:	4013      	ands	r3, r2
 8003e14:	d016      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e16:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1a:	4a35      	ldr	r2, [pc, #212]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e24:	4b28      	ldr	r3, [pc, #160]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e26:	430a      	orrs	r2, r1
 8003e28:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e2e:	2380      	movs	r3, #128	@ 0x80
 8003e30:	03db      	lsls	r3, r3, #15
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d106      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e36:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	4b23      	ldr	r3, [pc, #140]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e3c:	2180      	movs	r1, #128	@ 0x80
 8003e3e:	0449      	lsls	r1, r1, #17
 8003e40:	430a      	orrs	r2, r1
 8003e42:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	03db      	lsls	r3, r3, #15
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d016      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e50:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e54:	4a27      	ldr	r2, [pc, #156]	@ (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e60:	430a      	orrs	r2, r1
 8003e62:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	045b      	lsls	r3, r3, #17
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e70:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	4b14      	ldr	r3, [pc, #80]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e76:	2180      	movs	r1, #128	@ 0x80
 8003e78:	0449      	lsls	r1, r1, #17
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	4013      	ands	r3, r2
 8003e88:	d016      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	0019      	movs	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	01db      	lsls	r3, r3, #7
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003eaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003eb0:	2180      	movs	r1, #128	@ 0x80
 8003eb2:	0249      	lsls	r1, r1, #9
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003eb8:	2312      	movs	r3, #18
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	781b      	ldrb	r3, [r3, #0]
}
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b006      	add	sp, #24
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40007000 	.word	0x40007000
 8003ed0:	fffffcff 	.word	0xfffffcff
 8003ed4:	fffeffff 	.word	0xfffeffff
 8003ed8:	00001388 	.word	0x00001388
 8003edc:	efffffff 	.word	0xefffffff
 8003ee0:	fffff3ff 	.word	0xfffff3ff
 8003ee4:	fff3ffff 	.word	0xfff3ffff
 8003ee8:	ffcfffff 	.word	0xffcfffff
 8003eec:	ffffcfff 	.word	0xffffcfff
 8003ef0:	ffbfffff 	.word	0xffbfffff
 8003ef4:	feffffff 	.word	0xfeffffff
 8003ef8:	ffff3fff 	.word	0xffff3fff

08003efc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e04a      	b.n	8003fa4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	223d      	movs	r2, #61	@ 0x3d
 8003f12:	5c9b      	ldrb	r3, [r3, r2]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d107      	bne.n	8003f2a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	223c      	movs	r2, #60	@ 0x3c
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7fd faa5 	bl	8001474 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	223d      	movs	r2, #61	@ 0x3d
 8003f2e:	2102      	movs	r1, #2
 8003f30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	0010      	movs	r0, r2
 8003f3e:	f000 fa1f 	bl	8004380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2248      	movs	r2, #72	@ 0x48
 8003f46:	2101      	movs	r1, #1
 8003f48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	223e      	movs	r2, #62	@ 0x3e
 8003f4e:	2101      	movs	r1, #1
 8003f50:	5499      	strb	r1, [r3, r2]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	223f      	movs	r2, #63	@ 0x3f
 8003f56:	2101      	movs	r1, #1
 8003f58:	5499      	strb	r1, [r3, r2]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2240      	movs	r2, #64	@ 0x40
 8003f5e:	2101      	movs	r1, #1
 8003f60:	5499      	strb	r1, [r3, r2]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2241      	movs	r2, #65	@ 0x41
 8003f66:	2101      	movs	r1, #1
 8003f68:	5499      	strb	r1, [r3, r2]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2242      	movs	r2, #66	@ 0x42
 8003f6e:	2101      	movs	r1, #1
 8003f70:	5499      	strb	r1, [r3, r2]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2243      	movs	r2, #67	@ 0x43
 8003f76:	2101      	movs	r1, #1
 8003f78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2244      	movs	r2, #68	@ 0x44
 8003f7e:	2101      	movs	r1, #1
 8003f80:	5499      	strb	r1, [r3, r2]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2245      	movs	r2, #69	@ 0x45
 8003f86:	2101      	movs	r1, #1
 8003f88:	5499      	strb	r1, [r3, r2]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2246      	movs	r2, #70	@ 0x46
 8003f8e:	2101      	movs	r1, #1
 8003f90:	5499      	strb	r1, [r3, r2]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2247      	movs	r2, #71	@ 0x47
 8003f96:	2101      	movs	r1, #1
 8003f98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	223d      	movs	r2, #61	@ 0x3d
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <HAL_TIM_PWM_Start+0x22>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	223e      	movs	r2, #62	@ 0x3e
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	1e5a      	subs	r2, r3, #1
 8003fc8:	4193      	sbcs	r3, r2
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	e037      	b.n	800403e <HAL_TIM_PWM_Start+0x92>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d108      	bne.n	8003fe6 <HAL_TIM_PWM_Start+0x3a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	223f      	movs	r2, #63	@ 0x3f
 8003fd8:	5c9b      	ldrb	r3, [r3, r2]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	1e5a      	subs	r2, r3, #1
 8003fe0:	4193      	sbcs	r3, r2
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	e02b      	b.n	800403e <HAL_TIM_PWM_Start+0x92>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d108      	bne.n	8003ffe <HAL_TIM_PWM_Start+0x52>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2240      	movs	r2, #64	@ 0x40
 8003ff0:	5c9b      	ldrb	r3, [r3, r2]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	1e5a      	subs	r2, r3, #1
 8003ff8:	4193      	sbcs	r3, r2
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	e01f      	b.n	800403e <HAL_TIM_PWM_Start+0x92>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b0c      	cmp	r3, #12
 8004002:	d108      	bne.n	8004016 <HAL_TIM_PWM_Start+0x6a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2241      	movs	r2, #65	@ 0x41
 8004008:	5c9b      	ldrb	r3, [r3, r2]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	1e5a      	subs	r2, r3, #1
 8004010:	4193      	sbcs	r3, r2
 8004012:	b2db      	uxtb	r3, r3
 8004014:	e013      	b.n	800403e <HAL_TIM_PWM_Start+0x92>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b10      	cmp	r3, #16
 800401a:	d108      	bne.n	800402e <HAL_TIM_PWM_Start+0x82>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2242      	movs	r2, #66	@ 0x42
 8004020:	5c9b      	ldrb	r3, [r3, r2]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	1e5a      	subs	r2, r3, #1
 8004028:	4193      	sbcs	r3, r2
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e007      	b.n	800403e <HAL_TIM_PWM_Start+0x92>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2243      	movs	r2, #67	@ 0x43
 8004032:	5c9b      	ldrb	r3, [r3, r2]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	1e5a      	subs	r2, r3, #1
 800403a:	4193      	sbcs	r3, r2
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e08b      	b.n	800415e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <HAL_TIM_PWM_Start+0xaa>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	223e      	movs	r2, #62	@ 0x3e
 8004050:	2102      	movs	r1, #2
 8004052:	5499      	strb	r1, [r3, r2]
 8004054:	e023      	b.n	800409e <HAL_TIM_PWM_Start+0xf2>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d104      	bne.n	8004066 <HAL_TIM_PWM_Start+0xba>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	223f      	movs	r2, #63	@ 0x3f
 8004060:	2102      	movs	r1, #2
 8004062:	5499      	strb	r1, [r3, r2]
 8004064:	e01b      	b.n	800409e <HAL_TIM_PWM_Start+0xf2>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d104      	bne.n	8004076 <HAL_TIM_PWM_Start+0xca>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2240      	movs	r2, #64	@ 0x40
 8004070:	2102      	movs	r1, #2
 8004072:	5499      	strb	r1, [r3, r2]
 8004074:	e013      	b.n	800409e <HAL_TIM_PWM_Start+0xf2>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b0c      	cmp	r3, #12
 800407a:	d104      	bne.n	8004086 <HAL_TIM_PWM_Start+0xda>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2241      	movs	r2, #65	@ 0x41
 8004080:	2102      	movs	r1, #2
 8004082:	5499      	strb	r1, [r3, r2]
 8004084:	e00b      	b.n	800409e <HAL_TIM_PWM_Start+0xf2>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b10      	cmp	r3, #16
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Start+0xea>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2242      	movs	r2, #66	@ 0x42
 8004090:	2102      	movs	r1, #2
 8004092:	5499      	strb	r1, [r3, r2]
 8004094:	e003      	b.n	800409e <HAL_TIM_PWM_Start+0xf2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2243      	movs	r2, #67	@ 0x43
 800409a:	2102      	movs	r1, #2
 800409c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6839      	ldr	r1, [r7, #0]
 80040a4:	2201      	movs	r2, #1
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 fcbc 	bl	8004a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004168 <HAL_TIM_PWM_Start+0x1bc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00e      	beq.n	80040d4 <HAL_TIM_PWM_Start+0x128>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a2c      	ldr	r2, [pc, #176]	@ (800416c <HAL_TIM_PWM_Start+0x1c0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_TIM_PWM_Start+0x128>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004170 <HAL_TIM_PWM_Start+0x1c4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_TIM_PWM_Start+0x128>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a29      	ldr	r2, [pc, #164]	@ (8004174 <HAL_TIM_PWM_Start+0x1c8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <HAL_TIM_PWM_Start+0x12c>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_TIM_PWM_Start+0x12e>
 80040d8:	2300      	movs	r3, #0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2180      	movs	r1, #128	@ 0x80
 80040ea:	0209      	lsls	r1, r1, #8
 80040ec:	430a      	orrs	r2, r1
 80040ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004168 <HAL_TIM_PWM_Start+0x1bc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00f      	beq.n	800411a <HAL_TIM_PWM_Start+0x16e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	2380      	movs	r3, #128	@ 0x80
 8004100:	05db      	lsls	r3, r3, #23
 8004102:	429a      	cmp	r2, r3
 8004104:	d009      	beq.n	800411a <HAL_TIM_PWM_Start+0x16e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1b      	ldr	r2, [pc, #108]	@ (8004178 <HAL_TIM_PWM_Start+0x1cc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_TIM_PWM_Start+0x16e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a15      	ldr	r2, [pc, #84]	@ (800416c <HAL_TIM_PWM_Start+0x1c0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d116      	bne.n	8004148 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a16      	ldr	r2, [pc, #88]	@ (800417c <HAL_TIM_PWM_Start+0x1d0>)
 8004122:	4013      	ands	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b06      	cmp	r3, #6
 800412a:	d016      	beq.n	800415a <HAL_TIM_PWM_Start+0x1ae>
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	2380      	movs	r3, #128	@ 0x80
 8004130:	025b      	lsls	r3, r3, #9
 8004132:	429a      	cmp	r2, r3
 8004134:	d011      	beq.n	800415a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2101      	movs	r1, #1
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004146:	e008      	b.n	800415a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2101      	movs	r1, #1
 8004154:	430a      	orrs	r2, r1
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e000      	b.n	800415c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	b004      	add	sp, #16
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800
 8004178:	40000400 	.word	0x40000400
 800417c:	00010007 	.word	0x00010007

08004180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800418c:	2317      	movs	r3, #23
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	223c      	movs	r2, #60	@ 0x3c
 8004198:	5c9b      	ldrb	r3, [r3, r2]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x22>
 800419e:	2302      	movs	r3, #2
 80041a0:	e0e5      	b.n	800436e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	223c      	movs	r2, #60	@ 0x3c
 80041a6:	2101      	movs	r1, #1
 80041a8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b14      	cmp	r3, #20
 80041ae:	d900      	bls.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80041b0:	e0d1      	b.n	8004356 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	009a      	lsls	r2, r3, #2
 80041b6:	4b70      	ldr	r3, [pc, #448]	@ (8004378 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80041b8:	18d3      	adds	r3, r2, r3
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	0011      	movs	r1, r2
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 f968 	bl	800449c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2108      	movs	r1, #8
 80041d8:	430a      	orrs	r2, r1
 80041da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2104      	movs	r1, #4
 80041e8:	438a      	bics	r2, r1
 80041ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6999      	ldr	r1, [r3, #24]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	619a      	str	r2, [r3, #24]
      break;
 80041fe:	e0af      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	0011      	movs	r1, r2
 8004208:	0018      	movs	r0, r3
 800420a:	f000 f9d1 	bl	80045b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2180      	movs	r1, #128	@ 0x80
 800421a:	0109      	lsls	r1, r1, #4
 800421c:	430a      	orrs	r2, r1
 800421e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4954      	ldr	r1, [pc, #336]	@ (800437c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800422c:	400a      	ands	r2, r1
 800422e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6999      	ldr	r1, [r3, #24]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	021a      	lsls	r2, r3, #8
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	619a      	str	r2, [r3, #24]
      break;
 8004244:	e08c      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	0011      	movs	r1, r2
 800424e:	0018      	movs	r0, r3
 8004250:	f000 fa32 	bl	80046b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2108      	movs	r1, #8
 8004260:	430a      	orrs	r2, r1
 8004262:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2104      	movs	r1, #4
 8004270:	438a      	bics	r2, r1
 8004272:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69d9      	ldr	r1, [r3, #28]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691a      	ldr	r2, [r3, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	61da      	str	r2, [r3, #28]
      break;
 8004286:	e06b      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	0011      	movs	r1, r2
 8004290:	0018      	movs	r0, r3
 8004292:	f000 fa99 	bl	80047c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2180      	movs	r1, #128	@ 0x80
 80042a2:	0109      	lsls	r1, r1, #4
 80042a4:	430a      	orrs	r2, r1
 80042a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4932      	ldr	r1, [pc, #200]	@ (800437c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80042b4:	400a      	ands	r2, r1
 80042b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	69d9      	ldr	r1, [r3, #28]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	61da      	str	r2, [r3, #28]
      break;
 80042cc:	e048      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 fae0 	bl	800489c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2108      	movs	r1, #8
 80042e8:	430a      	orrs	r2, r1
 80042ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2104      	movs	r1, #4
 80042f8:	438a      	bics	r2, r1
 80042fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800430e:	e027      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	0011      	movs	r1, r2
 8004318:	0018      	movs	r0, r3
 800431a:	f000 fb1f 	bl	800495c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	0109      	lsls	r1, r1, #4
 800432c:	430a      	orrs	r2, r1
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4910      	ldr	r1, [pc, #64]	@ (800437c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800433c:	400a      	ands	r2, r1
 800433e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	021a      	lsls	r2, r3, #8
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004354:	e004      	b.n	8004360 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004356:	2317      	movs	r3, #23
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]
      break;
 800435e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	223c      	movs	r2, #60	@ 0x3c
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]

  return status;
 8004368:	2317      	movs	r3, #23
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	781b      	ldrb	r3, [r3, #0]
}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b006      	add	sp, #24
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	08006668 	.word	0x08006668
 800437c:	fffffbff 	.word	0xfffffbff

08004380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a3b      	ldr	r2, [pc, #236]	@ (8004480 <TIM_Base_SetConfig+0x100>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d008      	beq.n	80043aa <TIM_Base_SetConfig+0x2a>
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	2380      	movs	r3, #128	@ 0x80
 800439c:	05db      	lsls	r3, r3, #23
 800439e:	429a      	cmp	r2, r3
 80043a0:	d003      	beq.n	80043aa <TIM_Base_SetConfig+0x2a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a37      	ldr	r2, [pc, #220]	@ (8004484 <TIM_Base_SetConfig+0x104>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d108      	bne.n	80043bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2270      	movs	r2, #112	@ 0x70
 80043ae:	4393      	bics	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a30      	ldr	r2, [pc, #192]	@ (8004480 <TIM_Base_SetConfig+0x100>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d018      	beq.n	80043f6 <TIM_Base_SetConfig+0x76>
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	2380      	movs	r3, #128	@ 0x80
 80043c8:	05db      	lsls	r3, r3, #23
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d013      	beq.n	80043f6 <TIM_Base_SetConfig+0x76>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004484 <TIM_Base_SetConfig+0x104>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00f      	beq.n	80043f6 <TIM_Base_SetConfig+0x76>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004488 <TIM_Base_SetConfig+0x108>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <TIM_Base_SetConfig+0x76>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2a      	ldr	r2, [pc, #168]	@ (800448c <TIM_Base_SetConfig+0x10c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d007      	beq.n	80043f6 <TIM_Base_SetConfig+0x76>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a29      	ldr	r2, [pc, #164]	@ (8004490 <TIM_Base_SetConfig+0x110>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d003      	beq.n	80043f6 <TIM_Base_SetConfig+0x76>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a28      	ldr	r2, [pc, #160]	@ (8004494 <TIM_Base_SetConfig+0x114>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d108      	bne.n	8004408 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a27      	ldr	r2, [pc, #156]	@ (8004498 <TIM_Base_SetConfig+0x118>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2280      	movs	r2, #128	@ 0x80
 800440c:	4393      	bics	r3, r2
 800440e:	001a      	movs	r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a13      	ldr	r2, [pc, #76]	@ (8004480 <TIM_Base_SetConfig+0x100>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00b      	beq.n	800444e <TIM_Base_SetConfig+0xce>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a14      	ldr	r2, [pc, #80]	@ (800448c <TIM_Base_SetConfig+0x10c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_Base_SetConfig+0xce>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a13      	ldr	r2, [pc, #76]	@ (8004490 <TIM_Base_SetConfig+0x110>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_Base_SetConfig+0xce>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a12      	ldr	r2, [pc, #72]	@ (8004494 <TIM_Base_SetConfig+0x114>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d103      	bne.n	8004456 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	691a      	ldr	r2, [r3, #16]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2201      	movs	r2, #1
 8004462:	4013      	ands	r3, r2
 8004464:	2b01      	cmp	r3, #1
 8004466:	d106      	bne.n	8004476 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2201      	movs	r2, #1
 800446e:	4393      	bics	r3, r2
 8004470:	001a      	movs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	611a      	str	r2, [r3, #16]
  }
}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b004      	add	sp, #16
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40000400 	.word	0x40000400
 8004488:	40002000 	.word	0x40002000
 800448c:	40014000 	.word	0x40014000
 8004490:	40014400 	.word	0x40014400
 8004494:	40014800 	.word	0x40014800
 8004498:	fffffcff 	.word	0xfffffcff

0800449c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	2201      	movs	r2, #1
 80044b2:	4393      	bics	r3, r2
 80044b4:	001a      	movs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a32      	ldr	r2, [pc, #200]	@ (8004594 <TIM_OC1_SetConfig+0xf8>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2203      	movs	r2, #3
 80044d2:	4393      	bics	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2202      	movs	r2, #2
 80044e4:	4393      	bics	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a28      	ldr	r2, [pc, #160]	@ (8004598 <TIM_OC1_SetConfig+0xfc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00b      	beq.n	8004512 <TIM_OC1_SetConfig+0x76>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a27      	ldr	r2, [pc, #156]	@ (800459c <TIM_OC1_SetConfig+0x100>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d007      	beq.n	8004512 <TIM_OC1_SetConfig+0x76>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a26      	ldr	r2, [pc, #152]	@ (80045a0 <TIM_OC1_SetConfig+0x104>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_OC1_SetConfig+0x76>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a25      	ldr	r2, [pc, #148]	@ (80045a4 <TIM_OC1_SetConfig+0x108>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d10c      	bne.n	800452c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2208      	movs	r2, #8
 8004516:	4393      	bics	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2204      	movs	r2, #4
 8004528:	4393      	bics	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a1a      	ldr	r2, [pc, #104]	@ (8004598 <TIM_OC1_SetConfig+0xfc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00b      	beq.n	800454c <TIM_OC1_SetConfig+0xb0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a19      	ldr	r2, [pc, #100]	@ (800459c <TIM_OC1_SetConfig+0x100>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d007      	beq.n	800454c <TIM_OC1_SetConfig+0xb0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a18      	ldr	r2, [pc, #96]	@ (80045a0 <TIM_OC1_SetConfig+0x104>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <TIM_OC1_SetConfig+0xb0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a17      	ldr	r2, [pc, #92]	@ (80045a4 <TIM_OC1_SetConfig+0x108>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d111      	bne.n	8004570 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4a16      	ldr	r2, [pc, #88]	@ (80045a8 <TIM_OC1_SetConfig+0x10c>)
 8004550:	4013      	ands	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4a15      	ldr	r2, [pc, #84]	@ (80045ac <TIM_OC1_SetConfig+0x110>)
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	46bd      	mov	sp, r7
 800458e:	b006      	add	sp, #24
 8004590:	bd80      	pop	{r7, pc}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	fffeff8f 	.word	0xfffeff8f
 8004598:	40012c00 	.word	0x40012c00
 800459c:	40014000 	.word	0x40014000
 80045a0:	40014400 	.word	0x40014400
 80045a4:	40014800 	.word	0x40014800
 80045a8:	fffffeff 	.word	0xfffffeff
 80045ac:	fffffdff 	.word	0xfffffdff

080045b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	2210      	movs	r2, #16
 80045c6:	4393      	bics	r3, r2
 80045c8:	001a      	movs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004698 <TIM_OC2_SetConfig+0xe8>)
 80045de:	4013      	ands	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a2d      	ldr	r2, [pc, #180]	@ (800469c <TIM_OC2_SetConfig+0xec>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	021b      	lsls	r3, r3, #8
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2220      	movs	r2, #32
 80045fa:	4393      	bics	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a24      	ldr	r2, [pc, #144]	@ (80046a0 <TIM_OC2_SetConfig+0xf0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d10d      	bne.n	800462e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2280      	movs	r2, #128	@ 0x80
 8004616:	4393      	bics	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2240      	movs	r2, #64	@ 0x40
 800462a:	4393      	bics	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1b      	ldr	r2, [pc, #108]	@ (80046a0 <TIM_OC2_SetConfig+0xf0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00b      	beq.n	800464e <TIM_OC2_SetConfig+0x9e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1a      	ldr	r2, [pc, #104]	@ (80046a4 <TIM_OC2_SetConfig+0xf4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <TIM_OC2_SetConfig+0x9e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a19      	ldr	r2, [pc, #100]	@ (80046a8 <TIM_OC2_SetConfig+0xf8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d003      	beq.n	800464e <TIM_OC2_SetConfig+0x9e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a18      	ldr	r2, [pc, #96]	@ (80046ac <TIM_OC2_SetConfig+0xfc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d113      	bne.n	8004676 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4a17      	ldr	r2, [pc, #92]	@ (80046b0 <TIM_OC2_SetConfig+0x100>)
 8004652:	4013      	ands	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4a16      	ldr	r2, [pc, #88]	@ (80046b4 <TIM_OC2_SetConfig+0x104>)
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	621a      	str	r2, [r3, #32]
}
 8004690:	46c0      	nop			@ (mov r8, r8)
 8004692:	46bd      	mov	sp, r7
 8004694:	b006      	add	sp, #24
 8004696:	bd80      	pop	{r7, pc}
 8004698:	feff8fff 	.word	0xfeff8fff
 800469c:	fffffcff 	.word	0xfffffcff
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40014000 	.word	0x40014000
 80046a8:	40014400 	.word	0x40014400
 80046ac:	40014800 	.word	0x40014800
 80046b0:	fffffbff 	.word	0xfffffbff
 80046b4:	fffff7ff 	.word	0xfffff7ff

080046b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	4a33      	ldr	r2, [pc, #204]	@ (800479c <TIM_OC3_SetConfig+0xe4>)
 80046ce:	401a      	ands	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a2f      	ldr	r2, [pc, #188]	@ (80047a0 <TIM_OC3_SetConfig+0xe8>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2203      	movs	r2, #3
 80046ec:	4393      	bics	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	4a29      	ldr	r2, [pc, #164]	@ (80047a4 <TIM_OC3_SetConfig+0xec>)
 80046fe:	4013      	ands	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a25      	ldr	r2, [pc, #148]	@ (80047a8 <TIM_OC3_SetConfig+0xf0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d10d      	bne.n	8004732 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	4a24      	ldr	r2, [pc, #144]	@ (80047ac <TIM_OC3_SetConfig+0xf4>)
 800471a:	4013      	ands	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	4a20      	ldr	r2, [pc, #128]	@ (80047b0 <TIM_OC3_SetConfig+0xf8>)
 800472e:	4013      	ands	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a1c      	ldr	r2, [pc, #112]	@ (80047a8 <TIM_OC3_SetConfig+0xf0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00b      	beq.n	8004752 <TIM_OC3_SetConfig+0x9a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1d      	ldr	r2, [pc, #116]	@ (80047b4 <TIM_OC3_SetConfig+0xfc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d007      	beq.n	8004752 <TIM_OC3_SetConfig+0x9a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1c      	ldr	r2, [pc, #112]	@ (80047b8 <TIM_OC3_SetConfig+0x100>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC3_SetConfig+0x9a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1b      	ldr	r2, [pc, #108]	@ (80047bc <TIM_OC3_SetConfig+0x104>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d113      	bne.n	800477a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4a1a      	ldr	r2, [pc, #104]	@ (80047c0 <TIM_OC3_SetConfig+0x108>)
 8004756:	4013      	ands	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4a19      	ldr	r2, [pc, #100]	@ (80047c4 <TIM_OC3_SetConfig+0x10c>)
 800475e:	4013      	ands	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	621a      	str	r2, [r3, #32]
}
 8004794:	46c0      	nop			@ (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b006      	add	sp, #24
 800479a:	bd80      	pop	{r7, pc}
 800479c:	fffffeff 	.word	0xfffffeff
 80047a0:	fffeff8f 	.word	0xfffeff8f
 80047a4:	fffffdff 	.word	0xfffffdff
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	fffff7ff 	.word	0xfffff7ff
 80047b0:	fffffbff 	.word	0xfffffbff
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800
 80047c0:	ffffefff 	.word	0xffffefff
 80047c4:	ffffdfff 	.word	0xffffdfff

080047c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	4a26      	ldr	r2, [pc, #152]	@ (8004878 <TIM_OC4_SetConfig+0xb0>)
 80047de:	401a      	ands	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4a22      	ldr	r2, [pc, #136]	@ (800487c <TIM_OC4_SetConfig+0xb4>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a21      	ldr	r2, [pc, #132]	@ (8004880 <TIM_OC4_SetConfig+0xb8>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4a1d      	ldr	r2, [pc, #116]	@ (8004884 <TIM_OC4_SetConfig+0xbc>)
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	031b      	lsls	r3, r3, #12
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a19      	ldr	r2, [pc, #100]	@ (8004888 <TIM_OC4_SetConfig+0xc0>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00b      	beq.n	8004840 <TIM_OC4_SetConfig+0x78>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a18      	ldr	r2, [pc, #96]	@ (800488c <TIM_OC4_SetConfig+0xc4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d007      	beq.n	8004840 <TIM_OC4_SetConfig+0x78>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a17      	ldr	r2, [pc, #92]	@ (8004890 <TIM_OC4_SetConfig+0xc8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_OC4_SetConfig+0x78>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a16      	ldr	r2, [pc, #88]	@ (8004894 <TIM_OC4_SetConfig+0xcc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d109      	bne.n	8004854 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	4a15      	ldr	r2, [pc, #84]	@ (8004898 <TIM_OC4_SetConfig+0xd0>)
 8004844:	4013      	ands	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	019b      	lsls	r3, r3, #6
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	46c0      	nop			@ (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	b006      	add	sp, #24
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			@ (mov r8, r8)
 8004878:	ffffefff 	.word	0xffffefff
 800487c:	feff8fff 	.word	0xfeff8fff
 8004880:	fffffcff 	.word	0xfffffcff
 8004884:	ffffdfff 	.word	0xffffdfff
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800
 8004898:	ffffbfff 	.word	0xffffbfff

0800489c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	4a23      	ldr	r2, [pc, #140]	@ (8004940 <TIM_OC5_SetConfig+0xa4>)
 80048b2:	401a      	ands	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004944 <TIM_OC5_SetConfig+0xa8>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <TIM_OC5_SetConfig+0xac>)
 80048da:	4013      	ands	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a17      	ldr	r2, [pc, #92]	@ (800494c <TIM_OC5_SetConfig+0xb0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00b      	beq.n	800490a <TIM_OC5_SetConfig+0x6e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a16      	ldr	r2, [pc, #88]	@ (8004950 <TIM_OC5_SetConfig+0xb4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <TIM_OC5_SetConfig+0x6e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a15      	ldr	r2, [pc, #84]	@ (8004954 <TIM_OC5_SetConfig+0xb8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d003      	beq.n	800490a <TIM_OC5_SetConfig+0x6e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a14      	ldr	r2, [pc, #80]	@ (8004958 <TIM_OC5_SetConfig+0xbc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d109      	bne.n	800491e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	4a0c      	ldr	r2, [pc, #48]	@ (8004940 <TIM_OC5_SetConfig+0xa4>)
 800490e:	4013      	ands	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	021b      	lsls	r3, r3, #8
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	621a      	str	r2, [r3, #32]
}
 8004938:	46c0      	nop			@ (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	b006      	add	sp, #24
 800493e:	bd80      	pop	{r7, pc}
 8004940:	fffeffff 	.word	0xfffeffff
 8004944:	fffeff8f 	.word	0xfffeff8f
 8004948:	fffdffff 	.word	0xfffdffff
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400
 8004958:	40014800 	.word	0x40014800

0800495c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	4a24      	ldr	r2, [pc, #144]	@ (8004a04 <TIM_OC6_SetConfig+0xa8>)
 8004972:	401a      	ands	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a20      	ldr	r2, [pc, #128]	@ (8004a08 <TIM_OC6_SetConfig+0xac>)
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a0c <TIM_OC6_SetConfig+0xb0>)
 800499c:	4013      	ands	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	051b      	lsls	r3, r3, #20
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a18      	ldr	r2, [pc, #96]	@ (8004a10 <TIM_OC6_SetConfig+0xb4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00b      	beq.n	80049cc <TIM_OC6_SetConfig+0x70>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a17      	ldr	r2, [pc, #92]	@ (8004a14 <TIM_OC6_SetConfig+0xb8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_OC6_SetConfig+0x70>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a16      	ldr	r2, [pc, #88]	@ (8004a18 <TIM_OC6_SetConfig+0xbc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_OC6_SetConfig+0x70>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a15      	ldr	r2, [pc, #84]	@ (8004a1c <TIM_OC6_SetConfig+0xc0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d109      	bne.n	80049e0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	4a14      	ldr	r2, [pc, #80]	@ (8004a20 <TIM_OC6_SetConfig+0xc4>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	029b      	lsls	r3, r3, #10
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	621a      	str	r2, [r3, #32]
}
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b006      	add	sp, #24
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	ffefffff 	.word	0xffefffff
 8004a08:	feff8fff 	.word	0xfeff8fff
 8004a0c:	ffdfffff 	.word	0xffdfffff
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800
 8004a20:	fffbffff 	.word	0xfffbffff

08004a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	221f      	movs	r2, #31
 8004a34:	4013      	ands	r3, r2
 8004a36:	2201      	movs	r2, #1
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	0013      	movs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	43d2      	mvns	r2, r2
 8004a46:	401a      	ands	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	211f      	movs	r1, #31
 8004a54:	400b      	ands	r3, r1
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4099      	lsls	r1, r3
 8004a5a:	000b      	movs	r3, r1
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	46c0      	nop			@ (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b006      	add	sp, #24
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	223c      	movs	r2, #60	@ 0x3c
 8004a7a:	5c9b      	ldrb	r3, [r3, r2]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e055      	b.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	223c      	movs	r2, #60	@ 0x3c
 8004a88:	2101      	movs	r1, #1
 8004a8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	223d      	movs	r2, #61	@ 0x3d
 8004a90:	2102      	movs	r1, #2
 8004a92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a23      	ldr	r2, [pc, #140]	@ (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d108      	bne.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a22      	ldr	r2, [pc, #136]	@ (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2270      	movs	r2, #112	@ 0x70
 8004ac4:	4393      	bics	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a16      	ldr	r2, [pc, #88]	@ (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00f      	beq.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	2380      	movs	r3, #128	@ 0x80
 8004aea:	05db      	lsls	r3, r3, #23
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d009      	beq.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a12      	ldr	r2, [pc, #72]	@ (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a11      	ldr	r2, [pc, #68]	@ (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10c      	bne.n	8004b1e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2280      	movs	r2, #128	@ 0x80
 8004b08:	4393      	bics	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	223d      	movs	r2, #61	@ 0x3d
 8004b22:	2101      	movs	r1, #1
 8004b24:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	223c      	movs	r2, #60	@ 0x3c
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	0018      	movs	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b004      	add	sp, #16
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40012c00 	.word	0x40012c00
 8004b3c:	ff0fffff 	.word	0xff0fffff
 8004b40:	40000400 	.word	0x40000400
 8004b44:	40014000 	.word	0x40014000

08004b48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	223c      	movs	r2, #60	@ 0x3c
 8004b5a:	5c9b      	ldrb	r3, [r3, r2]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e06f      	b.n	8004c44 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	223c      	movs	r2, #60	@ 0x3c
 8004b68:	2101      	movs	r1, #1
 8004b6a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	22ff      	movs	r2, #255	@ 0xff
 8004b70:	4393      	bics	r3, r2
 8004b72:	001a      	movs	r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a33      	ldr	r2, [pc, #204]	@ (8004c4c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004b80:	401a      	ands	r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4a30      	ldr	r2, [pc, #192]	@ (8004c50 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004b8e:	401a      	ands	r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8004c54 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8004c58 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004baa:	401a      	ands	r2, r3
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a29      	ldr	r2, [pc, #164]	@ (8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004bb8:	401a      	ands	r2, r3
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a26      	ldr	r2, [pc, #152]	@ (8004c60 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a24      	ldr	r2, [pc, #144]	@ (8004c64 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004bd4:	401a      	ands	r2, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a21      	ldr	r2, [pc, #132]	@ (8004c68 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004be4:	401a      	ands	r2, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c6c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d11c      	bne.n	8004c32 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8004c70 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004bfc:	401a      	ands	r2, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c02:	051b      	lsls	r3, r3, #20
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c74 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004c0c:	401a      	ands	r2, r3
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a17      	ldr	r2, [pc, #92]	@ (8004c78 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a15      	ldr	r2, [pc, #84]	@ (8004c7c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004c28:	401a      	ands	r2, r3
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	223c      	movs	r2, #60	@ 0x3c
 8004c3e:	2100      	movs	r1, #0
 8004c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b004      	add	sp, #16
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	fffffcff 	.word	0xfffffcff
 8004c50:	fffffbff 	.word	0xfffffbff
 8004c54:	fffff7ff 	.word	0xfffff7ff
 8004c58:	ffffefff 	.word	0xffffefff
 8004c5c:	ffffdfff 	.word	0xffffdfff
 8004c60:	ffffbfff 	.word	0xffffbfff
 8004c64:	fff0ffff 	.word	0xfff0ffff
 8004c68:	efffffff 	.word	0xefffffff
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	ff0fffff 	.word	0xff0fffff
 8004c74:	feffffff 	.word	0xfeffffff
 8004c78:	fdffffff 	.word	0xfdffffff
 8004c7c:	dfffffff 	.word	0xdfffffff

08004c80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e046      	b.n	8004d20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2288      	movs	r2, #136	@ 0x88
 8004c96:	589b      	ldr	r3, [r3, r2]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d107      	bne.n	8004cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2284      	movs	r2, #132	@ 0x84
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f7fc fc58 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2288      	movs	r2, #136	@ 0x88
 8004cb0:	2124      	movs	r1, #36	@ 0x24
 8004cb2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	438a      	bics	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 fc74 	bl	80055bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f000 f9b2 	bl	8005040 <UART_SetConfig>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e01c      	b.n	8004d20 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	490d      	ldr	r1, [pc, #52]	@ (8004d28 <HAL_UART_Init+0xa8>)
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	212a      	movs	r1, #42	@ 0x2a
 8004d02:	438a      	bics	r2, r1
 8004d04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2101      	movs	r1, #1
 8004d12:	430a      	orrs	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f000 fd03 	bl	8005724 <UART_CheckIdleState>
 8004d1e:	0003      	movs	r3, r0
}
 8004d20:	0018      	movs	r0, r3
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	ffffb7ff 	.word	0xffffb7ff

08004d2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	@ 0x28
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	1dbb      	adds	r3, r7, #6
 8004d3a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2288      	movs	r2, #136	@ 0x88
 8004d40:	589b      	ldr	r3, [r3, r2]
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d000      	beq.n	8004d48 <HAL_UART_Transmit+0x1c>
 8004d46:	e090      	b.n	8004e6a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_UART_Transmit+0x2a>
 8004d4e:	1dbb      	adds	r3, r7, #6
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e088      	b.n	8004e6c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	2380      	movs	r3, #128	@ 0x80
 8004d60:	015b      	lsls	r3, r3, #5
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d109      	bne.n	8004d7a <HAL_UART_Transmit+0x4e>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d105      	bne.n	8004d7a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2201      	movs	r2, #1
 8004d72:	4013      	ands	r3, r2
 8004d74:	d001      	beq.n	8004d7a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e078      	b.n	8004e6c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2290      	movs	r2, #144	@ 0x90
 8004d7e:	2100      	movs	r1, #0
 8004d80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2288      	movs	r2, #136	@ 0x88
 8004d86:	2121      	movs	r1, #33	@ 0x21
 8004d88:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d8a:	f7fc fd43 	bl	8001814 <HAL_GetTick>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1dba      	adds	r2, r7, #6
 8004d96:	2154      	movs	r1, #84	@ 0x54
 8004d98:	8812      	ldrh	r2, [r2, #0]
 8004d9a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1dba      	adds	r2, r7, #6
 8004da0:	2156      	movs	r1, #86	@ 0x56
 8004da2:	8812      	ldrh	r2, [r2, #0]
 8004da4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	2380      	movs	r3, #128	@ 0x80
 8004dac:	015b      	lsls	r3, r3, #5
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d108      	bne.n	8004dc4 <HAL_UART_Transmit+0x98>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	e003      	b.n	8004dcc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dcc:	e030      	b.n	8004e30 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	0013      	movs	r3, r2
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2180      	movs	r1, #128	@ 0x80
 8004ddc:	f000 fd4c 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 8004de0:	1e03      	subs	r3, r0, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2288      	movs	r2, #136	@ 0x88
 8004de8:	2120      	movs	r1, #32
 8004dea:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e03d      	b.n	8004e6c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	001a      	movs	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	05d2      	lsls	r2, r2, #23
 8004e02:	0dd2      	lsrs	r2, r2, #23
 8004e04:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	3302      	adds	r3, #2
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	e007      	b.n	8004e1e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2256      	movs	r2, #86	@ 0x56
 8004e22:	5a9b      	ldrh	r3, [r3, r2]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b299      	uxth	r1, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2256      	movs	r2, #86	@ 0x56
 8004e2e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2256      	movs	r2, #86	@ 0x56
 8004e34:	5a9b      	ldrh	r3, [r3, r2]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1c8      	bne.n	8004dce <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	0013      	movs	r3, r2
 8004e46:	2200      	movs	r2, #0
 8004e48:	2140      	movs	r1, #64	@ 0x40
 8004e4a:	f000 fd15 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 8004e4e:	1e03      	subs	r3, r0, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2288      	movs	r2, #136	@ 0x88
 8004e56:	2120      	movs	r1, #32
 8004e58:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e006      	b.n	8004e6c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2288      	movs	r2, #136	@ 0x88
 8004e62:	2120      	movs	r1, #32
 8004e64:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e000      	b.n	8004e6c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
  }
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b008      	add	sp, #32
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	@ 0x28
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	1dbb      	adds	r3, r7, #6
 8004e82:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	228c      	movs	r2, #140	@ 0x8c
 8004e88:	589b      	ldr	r3, [r3, r2]
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d000      	beq.n	8004e90 <HAL_UART_Receive+0x1c>
 8004e8e:	e0d0      	b.n	8005032 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_UART_Receive+0x2a>
 8004e96:	1dbb      	adds	r3, r7, #6
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0c8      	b.n	8005034 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	2380      	movs	r3, #128	@ 0x80
 8004ea8:	015b      	lsls	r3, r3, #5
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d109      	bne.n	8004ec2 <HAL_UART_Receive+0x4e>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d001      	beq.n	8004ec2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e0b8      	b.n	8005034 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2290      	movs	r2, #144	@ 0x90
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	228c      	movs	r2, #140	@ 0x8c
 8004ece:	2122      	movs	r1, #34	@ 0x22
 8004ed0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ed8:	f7fc fc9c 	bl	8001814 <HAL_GetTick>
 8004edc:	0003      	movs	r3, r0
 8004ede:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	1dba      	adds	r2, r7, #6
 8004ee4:	215c      	movs	r1, #92	@ 0x5c
 8004ee6:	8812      	ldrh	r2, [r2, #0]
 8004ee8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1dba      	adds	r2, r7, #6
 8004eee:	215e      	movs	r1, #94	@ 0x5e
 8004ef0:	8812      	ldrh	r2, [r2, #0]
 8004ef2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	015b      	lsls	r3, r3, #5
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d10d      	bne.n	8004f1c <HAL_UART_Receive+0xa8>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d104      	bne.n	8004f12 <HAL_UART_Receive+0x9e>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2260      	movs	r2, #96	@ 0x60
 8004f0c:	494b      	ldr	r1, [pc, #300]	@ (800503c <HAL_UART_Receive+0x1c8>)
 8004f0e:	5299      	strh	r1, [r3, r2]
 8004f10:	e02e      	b.n	8004f70 <HAL_UART_Receive+0xfc>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2260      	movs	r2, #96	@ 0x60
 8004f16:	21ff      	movs	r1, #255	@ 0xff
 8004f18:	5299      	strh	r1, [r3, r2]
 8004f1a:	e029      	b.n	8004f70 <HAL_UART_Receive+0xfc>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10d      	bne.n	8004f40 <HAL_UART_Receive+0xcc>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <HAL_UART_Receive+0xc2>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2260      	movs	r2, #96	@ 0x60
 8004f30:	21ff      	movs	r1, #255	@ 0xff
 8004f32:	5299      	strh	r1, [r3, r2]
 8004f34:	e01c      	b.n	8004f70 <HAL_UART_Receive+0xfc>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2260      	movs	r2, #96	@ 0x60
 8004f3a:	217f      	movs	r1, #127	@ 0x7f
 8004f3c:	5299      	strh	r1, [r3, r2]
 8004f3e:	e017      	b.n	8004f70 <HAL_UART_Receive+0xfc>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	2380      	movs	r3, #128	@ 0x80
 8004f46:	055b      	lsls	r3, r3, #21
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d10d      	bne.n	8004f68 <HAL_UART_Receive+0xf4>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <HAL_UART_Receive+0xea>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2260      	movs	r2, #96	@ 0x60
 8004f58:	217f      	movs	r1, #127	@ 0x7f
 8004f5a:	5299      	strh	r1, [r3, r2]
 8004f5c:	e008      	b.n	8004f70 <HAL_UART_Receive+0xfc>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2260      	movs	r2, #96	@ 0x60
 8004f62:	213f      	movs	r1, #63	@ 0x3f
 8004f64:	5299      	strh	r1, [r3, r2]
 8004f66:	e003      	b.n	8004f70 <HAL_UART_Receive+0xfc>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2260      	movs	r2, #96	@ 0x60
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004f70:	2312      	movs	r3, #18
 8004f72:	18fb      	adds	r3, r7, r3
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	2160      	movs	r1, #96	@ 0x60
 8004f78:	5a52      	ldrh	r2, [r2, r1]
 8004f7a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	2380      	movs	r3, #128	@ 0x80
 8004f82:	015b      	lsls	r3, r3, #5
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d108      	bne.n	8004f9a <HAL_UART_Receive+0x126>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	e003      	b.n	8004fa2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004fa2:	e03a      	b.n	800501a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	0013      	movs	r3, r2
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2120      	movs	r1, #32
 8004fb2:	f000 fc61 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 8004fb6:	1e03      	subs	r3, r0, #0
 8004fb8:	d005      	beq.n	8004fc6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	228c      	movs	r2, #140	@ 0x8c
 8004fbe:	2120      	movs	r1, #32
 8004fc0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e036      	b.n	8005034 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10e      	bne.n	8004fea <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2212      	movs	r2, #18
 8004fd6:	18ba      	adds	r2, r7, r2
 8004fd8:	8812      	ldrh	r2, [r2, #0]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	61bb      	str	r3, [r7, #24]
 8004fe8:	e00e      	b.n	8005008 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2212      	movs	r2, #18
 8004ff4:	18ba      	adds	r2, r7, r2
 8004ff6:	8812      	ldrh	r2, [r2, #0]
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	3301      	adds	r3, #1
 8005006:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	225e      	movs	r2, #94	@ 0x5e
 800500c:	5a9b      	ldrh	r3, [r3, r2]
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b299      	uxth	r1, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	225e      	movs	r2, #94	@ 0x5e
 8005018:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	225e      	movs	r2, #94	@ 0x5e
 800501e:	5a9b      	ldrh	r3, [r3, r2]
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1be      	bne.n	8004fa4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	228c      	movs	r2, #140	@ 0x8c
 800502a:	2120      	movs	r1, #32
 800502c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005032:	2302      	movs	r3, #2
  }
}
 8005034:	0018      	movs	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	b008      	add	sp, #32
 800503a:	bd80      	pop	{r7, pc}
 800503c:	000001ff 	.word	0x000001ff

08005040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005040:	b5b0      	push	{r4, r5, r7, lr}
 8005042:	b090      	sub	sp, #64	@ 0x40
 8005044:	af00      	add	r7, sp, #0
 8005046:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005048:	231a      	movs	r3, #26
 800504a:	2220      	movs	r2, #32
 800504c:	189b      	adds	r3, r3, r2
 800504e:	19db      	adds	r3, r3, r7
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	431a      	orrs	r2, r3
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	431a      	orrs	r2, r3
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	4313      	orrs	r3, r2
 800506a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4aaf      	ldr	r2, [pc, #700]	@ (8005330 <UART_SetConfig+0x2f0>)
 8005074:	4013      	ands	r3, r2
 8005076:	0019      	movs	r1, r3
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507e:	430b      	orrs	r3, r1
 8005080:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	4aaa      	ldr	r2, [pc, #680]	@ (8005334 <UART_SetConfig+0x2f4>)
 800508a:	4013      	ands	r3, r2
 800508c:	0018      	movs	r0, r3
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	68d9      	ldr	r1, [r3, #12]
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	0003      	movs	r3, r0
 8005098:	430b      	orrs	r3, r1
 800509a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4aa4      	ldr	r2, [pc, #656]	@ (8005338 <UART_SetConfig+0x2f8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050b2:	4313      	orrs	r3, r2
 80050b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a9f      	ldr	r2, [pc, #636]	@ (800533c <UART_SetConfig+0x2fc>)
 80050be:	4013      	ands	r3, r2
 80050c0:	0019      	movs	r1, r3
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	220f      	movs	r2, #15
 80050d4:	4393      	bics	r3, r2
 80050d6:	0018      	movs	r0, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	0003      	movs	r3, r0
 80050e2:	430b      	orrs	r3, r1
 80050e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a95      	ldr	r2, [pc, #596]	@ (8005340 <UART_SetConfig+0x300>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d131      	bne.n	8005154 <UART_SetConfig+0x114>
 80050f0:	4b94      	ldr	r3, [pc, #592]	@ (8005344 <UART_SetConfig+0x304>)
 80050f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f4:	2203      	movs	r2, #3
 80050f6:	4013      	ands	r3, r2
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d01d      	beq.n	8005138 <UART_SetConfig+0xf8>
 80050fc:	d823      	bhi.n	8005146 <UART_SetConfig+0x106>
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d00c      	beq.n	800511c <UART_SetConfig+0xdc>
 8005102:	d820      	bhi.n	8005146 <UART_SetConfig+0x106>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d002      	beq.n	800510e <UART_SetConfig+0xce>
 8005108:	2b01      	cmp	r3, #1
 800510a:	d00e      	beq.n	800512a <UART_SetConfig+0xea>
 800510c:	e01b      	b.n	8005146 <UART_SetConfig+0x106>
 800510e:	231b      	movs	r3, #27
 8005110:	2220      	movs	r2, #32
 8005112:	189b      	adds	r3, r3, r2
 8005114:	19db      	adds	r3, r3, r7
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	e0b4      	b.n	8005286 <UART_SetConfig+0x246>
 800511c:	231b      	movs	r3, #27
 800511e:	2220      	movs	r2, #32
 8005120:	189b      	adds	r3, r3, r2
 8005122:	19db      	adds	r3, r3, r7
 8005124:	2202      	movs	r2, #2
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e0ad      	b.n	8005286 <UART_SetConfig+0x246>
 800512a:	231b      	movs	r3, #27
 800512c:	2220      	movs	r2, #32
 800512e:	189b      	adds	r3, r3, r2
 8005130:	19db      	adds	r3, r3, r7
 8005132:	2204      	movs	r2, #4
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	e0a6      	b.n	8005286 <UART_SetConfig+0x246>
 8005138:	231b      	movs	r3, #27
 800513a:	2220      	movs	r2, #32
 800513c:	189b      	adds	r3, r3, r2
 800513e:	19db      	adds	r3, r3, r7
 8005140:	2208      	movs	r2, #8
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	e09f      	b.n	8005286 <UART_SetConfig+0x246>
 8005146:	231b      	movs	r3, #27
 8005148:	2220      	movs	r2, #32
 800514a:	189b      	adds	r3, r3, r2
 800514c:	19db      	adds	r3, r3, r7
 800514e:	2210      	movs	r2, #16
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e098      	b.n	8005286 <UART_SetConfig+0x246>
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a7b      	ldr	r2, [pc, #492]	@ (8005348 <UART_SetConfig+0x308>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d131      	bne.n	80051c2 <UART_SetConfig+0x182>
 800515e:	4b79      	ldr	r3, [pc, #484]	@ (8005344 <UART_SetConfig+0x304>)
 8005160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005162:	220c      	movs	r2, #12
 8005164:	4013      	ands	r3, r2
 8005166:	2b0c      	cmp	r3, #12
 8005168:	d01d      	beq.n	80051a6 <UART_SetConfig+0x166>
 800516a:	d823      	bhi.n	80051b4 <UART_SetConfig+0x174>
 800516c:	2b08      	cmp	r3, #8
 800516e:	d00c      	beq.n	800518a <UART_SetConfig+0x14a>
 8005170:	d820      	bhi.n	80051b4 <UART_SetConfig+0x174>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <UART_SetConfig+0x13c>
 8005176:	2b04      	cmp	r3, #4
 8005178:	d00e      	beq.n	8005198 <UART_SetConfig+0x158>
 800517a:	e01b      	b.n	80051b4 <UART_SetConfig+0x174>
 800517c:	231b      	movs	r3, #27
 800517e:	2220      	movs	r2, #32
 8005180:	189b      	adds	r3, r3, r2
 8005182:	19db      	adds	r3, r3, r7
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	e07d      	b.n	8005286 <UART_SetConfig+0x246>
 800518a:	231b      	movs	r3, #27
 800518c:	2220      	movs	r2, #32
 800518e:	189b      	adds	r3, r3, r2
 8005190:	19db      	adds	r3, r3, r7
 8005192:	2202      	movs	r2, #2
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e076      	b.n	8005286 <UART_SetConfig+0x246>
 8005198:	231b      	movs	r3, #27
 800519a:	2220      	movs	r2, #32
 800519c:	189b      	adds	r3, r3, r2
 800519e:	19db      	adds	r3, r3, r7
 80051a0:	2204      	movs	r2, #4
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e06f      	b.n	8005286 <UART_SetConfig+0x246>
 80051a6:	231b      	movs	r3, #27
 80051a8:	2220      	movs	r2, #32
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	19db      	adds	r3, r3, r7
 80051ae:	2208      	movs	r2, #8
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	e068      	b.n	8005286 <UART_SetConfig+0x246>
 80051b4:	231b      	movs	r3, #27
 80051b6:	2220      	movs	r2, #32
 80051b8:	189b      	adds	r3, r3, r2
 80051ba:	19db      	adds	r3, r3, r7
 80051bc:	2210      	movs	r2, #16
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	e061      	b.n	8005286 <UART_SetConfig+0x246>
 80051c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a61      	ldr	r2, [pc, #388]	@ (800534c <UART_SetConfig+0x30c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d106      	bne.n	80051da <UART_SetConfig+0x19a>
 80051cc:	231b      	movs	r3, #27
 80051ce:	2220      	movs	r2, #32
 80051d0:	189b      	adds	r3, r3, r2
 80051d2:	19db      	adds	r3, r3, r7
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	e055      	b.n	8005286 <UART_SetConfig+0x246>
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a5c      	ldr	r2, [pc, #368]	@ (8005350 <UART_SetConfig+0x310>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d106      	bne.n	80051f2 <UART_SetConfig+0x1b2>
 80051e4:	231b      	movs	r3, #27
 80051e6:	2220      	movs	r2, #32
 80051e8:	189b      	adds	r3, r3, r2
 80051ea:	19db      	adds	r3, r3, r7
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e049      	b.n	8005286 <UART_SetConfig+0x246>
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a50      	ldr	r2, [pc, #320]	@ (8005338 <UART_SetConfig+0x2f8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d13e      	bne.n	800527a <UART_SetConfig+0x23a>
 80051fc:	4b51      	ldr	r3, [pc, #324]	@ (8005344 <UART_SetConfig+0x304>)
 80051fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005200:	23c0      	movs	r3, #192	@ 0xc0
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	4013      	ands	r3, r2
 8005206:	22c0      	movs	r2, #192	@ 0xc0
 8005208:	0112      	lsls	r2, r2, #4
 800520a:	4293      	cmp	r3, r2
 800520c:	d027      	beq.n	800525e <UART_SetConfig+0x21e>
 800520e:	22c0      	movs	r2, #192	@ 0xc0
 8005210:	0112      	lsls	r2, r2, #4
 8005212:	4293      	cmp	r3, r2
 8005214:	d82a      	bhi.n	800526c <UART_SetConfig+0x22c>
 8005216:	2280      	movs	r2, #128	@ 0x80
 8005218:	0112      	lsls	r2, r2, #4
 800521a:	4293      	cmp	r3, r2
 800521c:	d011      	beq.n	8005242 <UART_SetConfig+0x202>
 800521e:	2280      	movs	r2, #128	@ 0x80
 8005220:	0112      	lsls	r2, r2, #4
 8005222:	4293      	cmp	r3, r2
 8005224:	d822      	bhi.n	800526c <UART_SetConfig+0x22c>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <UART_SetConfig+0x1f4>
 800522a:	2280      	movs	r2, #128	@ 0x80
 800522c:	00d2      	lsls	r2, r2, #3
 800522e:	4293      	cmp	r3, r2
 8005230:	d00e      	beq.n	8005250 <UART_SetConfig+0x210>
 8005232:	e01b      	b.n	800526c <UART_SetConfig+0x22c>
 8005234:	231b      	movs	r3, #27
 8005236:	2220      	movs	r2, #32
 8005238:	189b      	adds	r3, r3, r2
 800523a:	19db      	adds	r3, r3, r7
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e021      	b.n	8005286 <UART_SetConfig+0x246>
 8005242:	231b      	movs	r3, #27
 8005244:	2220      	movs	r2, #32
 8005246:	189b      	adds	r3, r3, r2
 8005248:	19db      	adds	r3, r3, r7
 800524a:	2202      	movs	r2, #2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e01a      	b.n	8005286 <UART_SetConfig+0x246>
 8005250:	231b      	movs	r3, #27
 8005252:	2220      	movs	r2, #32
 8005254:	189b      	adds	r3, r3, r2
 8005256:	19db      	adds	r3, r3, r7
 8005258:	2204      	movs	r2, #4
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e013      	b.n	8005286 <UART_SetConfig+0x246>
 800525e:	231b      	movs	r3, #27
 8005260:	2220      	movs	r2, #32
 8005262:	189b      	adds	r3, r3, r2
 8005264:	19db      	adds	r3, r3, r7
 8005266:	2208      	movs	r2, #8
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	e00c      	b.n	8005286 <UART_SetConfig+0x246>
 800526c:	231b      	movs	r3, #27
 800526e:	2220      	movs	r2, #32
 8005270:	189b      	adds	r3, r3, r2
 8005272:	19db      	adds	r3, r3, r7
 8005274:	2210      	movs	r2, #16
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e005      	b.n	8005286 <UART_SetConfig+0x246>
 800527a:	231b      	movs	r3, #27
 800527c:	2220      	movs	r2, #32
 800527e:	189b      	adds	r3, r3, r2
 8005280:	19db      	adds	r3, r3, r7
 8005282:	2210      	movs	r2, #16
 8005284:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a2b      	ldr	r2, [pc, #172]	@ (8005338 <UART_SetConfig+0x2f8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d000      	beq.n	8005292 <UART_SetConfig+0x252>
 8005290:	e0a9      	b.n	80053e6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005292:	231b      	movs	r3, #27
 8005294:	2220      	movs	r2, #32
 8005296:	189b      	adds	r3, r3, r2
 8005298:	19db      	adds	r3, r3, r7
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d015      	beq.n	80052cc <UART_SetConfig+0x28c>
 80052a0:	dc18      	bgt.n	80052d4 <UART_SetConfig+0x294>
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d00d      	beq.n	80052c2 <UART_SetConfig+0x282>
 80052a6:	dc15      	bgt.n	80052d4 <UART_SetConfig+0x294>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <UART_SetConfig+0x272>
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d005      	beq.n	80052bc <UART_SetConfig+0x27c>
 80052b0:	e010      	b.n	80052d4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b2:	f7fe fc55 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 80052b6:	0003      	movs	r3, r0
 80052b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052ba:	e014      	b.n	80052e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052bc:	4b25      	ldr	r3, [pc, #148]	@ (8005354 <UART_SetConfig+0x314>)
 80052be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052c0:	e011      	b.n	80052e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052c2:	f7fe fbc1 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 80052c6:	0003      	movs	r3, r0
 80052c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052ca:	e00c      	b.n	80052e6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052cc:	2380      	movs	r3, #128	@ 0x80
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052d2:	e008      	b.n	80052e6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80052d8:	231a      	movs	r3, #26
 80052da:	2220      	movs	r2, #32
 80052dc:	189b      	adds	r3, r3, r2
 80052de:	19db      	adds	r3, r3, r7
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
        break;
 80052e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d100      	bne.n	80052ee <UART_SetConfig+0x2ae>
 80052ec:	e14b      	b.n	8005586 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052f2:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <UART_SetConfig+0x318>)
 80052f4:	0052      	lsls	r2, r2, #1
 80052f6:	5ad3      	ldrh	r3, [r2, r3]
 80052f8:	0019      	movs	r1, r3
 80052fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80052fc:	f7fa ff14 	bl	8000128 <__udivsi3>
 8005300:	0003      	movs	r3, r0
 8005302:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	0013      	movs	r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	189b      	adds	r3, r3, r2
 800530e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005310:	429a      	cmp	r2, r3
 8005312:	d305      	bcc.n	8005320 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800531a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800531c:	429a      	cmp	r2, r3
 800531e:	d91d      	bls.n	800535c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005320:	231a      	movs	r3, #26
 8005322:	2220      	movs	r2, #32
 8005324:	189b      	adds	r3, r3, r2
 8005326:	19db      	adds	r3, r3, r7
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e12b      	b.n	8005586 <UART_SetConfig+0x546>
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	cfff69f3 	.word	0xcfff69f3
 8005334:	ffffcfff 	.word	0xffffcfff
 8005338:	40008000 	.word	0x40008000
 800533c:	11fff4ff 	.word	0x11fff4ff
 8005340:	40013800 	.word	0x40013800
 8005344:	40021000 	.word	0x40021000
 8005348:	40004400 	.word	0x40004400
 800534c:	40004800 	.word	0x40004800
 8005350:	40004c00 	.word	0x40004c00
 8005354:	00f42400 	.word	0x00f42400
 8005358:	080066bc 	.word	0x080066bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800535c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005368:	4b92      	ldr	r3, [pc, #584]	@ (80055b4 <UART_SetConfig+0x574>)
 800536a:	0052      	lsls	r2, r2, #1
 800536c:	5ad3      	ldrh	r3, [r2, r3]
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	69b8      	ldr	r0, [r7, #24]
 800537a:	69f9      	ldr	r1, [r7, #28]
 800537c:	f7fb f84a 	bl	8000414 <__aeabi_uldivmod>
 8005380:	0002      	movs	r2, r0
 8005382:	000b      	movs	r3, r1
 8005384:	0e11      	lsrs	r1, r2, #24
 8005386:	021d      	lsls	r5, r3, #8
 8005388:	430d      	orrs	r5, r1
 800538a:	0214      	lsls	r4, r2, #8
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	60bb      	str	r3, [r7, #8]
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68b8      	ldr	r0, [r7, #8]
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	1900      	adds	r0, r0, r4
 800539e:	4169      	adcs	r1, r5
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	607b      	str	r3, [r7, #4]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f7fb f831 	bl	8000414 <__aeabi_uldivmod>
 80053b2:	0002      	movs	r2, r0
 80053b4:	000b      	movs	r3, r1
 80053b6:	0013      	movs	r3, r2
 80053b8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053bc:	23c0      	movs	r3, #192	@ 0xc0
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d309      	bcc.n	80053d8 <UART_SetConfig+0x398>
 80053c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053c6:	2380      	movs	r3, #128	@ 0x80
 80053c8:	035b      	lsls	r3, r3, #13
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d204      	bcs.n	80053d8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d4:	60da      	str	r2, [r3, #12]
 80053d6:	e0d6      	b.n	8005586 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80053d8:	231a      	movs	r3, #26
 80053da:	2220      	movs	r2, #32
 80053dc:	189b      	adds	r3, r3, r2
 80053de:	19db      	adds	r3, r3, r7
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	e0cf      	b.n	8005586 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	69da      	ldr	r2, [r3, #28]
 80053ea:	2380      	movs	r3, #128	@ 0x80
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d000      	beq.n	80053f4 <UART_SetConfig+0x3b4>
 80053f2:	e070      	b.n	80054d6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80053f4:	231b      	movs	r3, #27
 80053f6:	2220      	movs	r2, #32
 80053f8:	189b      	adds	r3, r3, r2
 80053fa:	19db      	adds	r3, r3, r7
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d015      	beq.n	800542e <UART_SetConfig+0x3ee>
 8005402:	dc18      	bgt.n	8005436 <UART_SetConfig+0x3f6>
 8005404:	2b04      	cmp	r3, #4
 8005406:	d00d      	beq.n	8005424 <UART_SetConfig+0x3e4>
 8005408:	dc15      	bgt.n	8005436 <UART_SetConfig+0x3f6>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <UART_SetConfig+0x3d4>
 800540e:	2b02      	cmp	r3, #2
 8005410:	d005      	beq.n	800541e <UART_SetConfig+0x3de>
 8005412:	e010      	b.n	8005436 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005414:	f7fe fba4 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8005418:	0003      	movs	r3, r0
 800541a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800541c:	e014      	b.n	8005448 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800541e:	4b66      	ldr	r3, [pc, #408]	@ (80055b8 <UART_SetConfig+0x578>)
 8005420:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005422:	e011      	b.n	8005448 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005424:	f7fe fb10 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8005428:	0003      	movs	r3, r0
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800542c:	e00c      	b.n	8005448 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542e:	2380      	movs	r3, #128	@ 0x80
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005434:	e008      	b.n	8005448 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800543a:	231a      	movs	r3, #26
 800543c:	2220      	movs	r2, #32
 800543e:	189b      	adds	r3, r3, r2
 8005440:	19db      	adds	r3, r3, r7
 8005442:	2201      	movs	r2, #1
 8005444:	701a      	strb	r2, [r3, #0]
        break;
 8005446:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544a:	2b00      	cmp	r3, #0
 800544c:	d100      	bne.n	8005450 <UART_SetConfig+0x410>
 800544e:	e09a      	b.n	8005586 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005454:	4b57      	ldr	r3, [pc, #348]	@ (80055b4 <UART_SetConfig+0x574>)
 8005456:	0052      	lsls	r2, r2, #1
 8005458:	5ad3      	ldrh	r3, [r2, r3]
 800545a:	0019      	movs	r1, r3
 800545c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800545e:	f7fa fe63 	bl	8000128 <__udivsi3>
 8005462:	0003      	movs	r3, r0
 8005464:	005a      	lsls	r2, r3, #1
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	18d2      	adds	r2, r2, r3
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	0019      	movs	r1, r3
 8005474:	0010      	movs	r0, r2
 8005476:	f7fa fe57 	bl	8000128 <__udivsi3>
 800547a:	0003      	movs	r3, r0
 800547c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	2b0f      	cmp	r3, #15
 8005482:	d921      	bls.n	80054c8 <UART_SetConfig+0x488>
 8005484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005486:	2380      	movs	r3, #128	@ 0x80
 8005488:	025b      	lsls	r3, r3, #9
 800548a:	429a      	cmp	r2, r3
 800548c:	d21c      	bcs.n	80054c8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005490:	b29a      	uxth	r2, r3
 8005492:	200e      	movs	r0, #14
 8005494:	2420      	movs	r4, #32
 8005496:	1903      	adds	r3, r0, r4
 8005498:	19db      	adds	r3, r3, r7
 800549a:	210f      	movs	r1, #15
 800549c:	438a      	bics	r2, r1
 800549e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a2:	085b      	lsrs	r3, r3, #1
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2207      	movs	r2, #7
 80054a8:	4013      	ands	r3, r2
 80054aa:	b299      	uxth	r1, r3
 80054ac:	1903      	adds	r3, r0, r4
 80054ae:	19db      	adds	r3, r3, r7
 80054b0:	1902      	adds	r2, r0, r4
 80054b2:	19d2      	adds	r2, r2, r7
 80054b4:	8812      	ldrh	r2, [r2, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	1902      	adds	r2, r0, r4
 80054c0:	19d2      	adds	r2, r2, r7
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	60da      	str	r2, [r3, #12]
 80054c6:	e05e      	b.n	8005586 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80054c8:	231a      	movs	r3, #26
 80054ca:	2220      	movs	r2, #32
 80054cc:	189b      	adds	r3, r3, r2
 80054ce:	19db      	adds	r3, r3, r7
 80054d0:	2201      	movs	r2, #1
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	e057      	b.n	8005586 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054d6:	231b      	movs	r3, #27
 80054d8:	2220      	movs	r2, #32
 80054da:	189b      	adds	r3, r3, r2
 80054dc:	19db      	adds	r3, r3, r7
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d015      	beq.n	8005510 <UART_SetConfig+0x4d0>
 80054e4:	dc18      	bgt.n	8005518 <UART_SetConfig+0x4d8>
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d00d      	beq.n	8005506 <UART_SetConfig+0x4c6>
 80054ea:	dc15      	bgt.n	8005518 <UART_SetConfig+0x4d8>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <UART_SetConfig+0x4b6>
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d005      	beq.n	8005500 <UART_SetConfig+0x4c0>
 80054f4:	e010      	b.n	8005518 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054f6:	f7fe fb33 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 80054fa:	0003      	movs	r3, r0
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80054fe:	e014      	b.n	800552a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005500:	4b2d      	ldr	r3, [pc, #180]	@ (80055b8 <UART_SetConfig+0x578>)
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005504:	e011      	b.n	800552a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005506:	f7fe fa9f 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 800550a:	0003      	movs	r3, r0
 800550c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800550e:	e00c      	b.n	800552a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005510:	2380      	movs	r3, #128	@ 0x80
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005516:	e008      	b.n	800552a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800551c:	231a      	movs	r3, #26
 800551e:	2220      	movs	r2, #32
 8005520:	189b      	adds	r3, r3, r2
 8005522:	19db      	adds	r3, r3, r7
 8005524:	2201      	movs	r2, #1
 8005526:	701a      	strb	r2, [r3, #0]
        break;
 8005528:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800552a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552c:	2b00      	cmp	r3, #0
 800552e:	d02a      	beq.n	8005586 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005534:	4b1f      	ldr	r3, [pc, #124]	@ (80055b4 <UART_SetConfig+0x574>)
 8005536:	0052      	lsls	r2, r2, #1
 8005538:	5ad3      	ldrh	r3, [r2, r3]
 800553a:	0019      	movs	r1, r3
 800553c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800553e:	f7fa fdf3 	bl	8000128 <__udivsi3>
 8005542:	0003      	movs	r3, r0
 8005544:	001a      	movs	r2, r3
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	085b      	lsrs	r3, r3, #1
 800554c:	18d2      	adds	r2, r2, r3
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	0019      	movs	r1, r3
 8005554:	0010      	movs	r0, r2
 8005556:	f7fa fde7 	bl	8000128 <__udivsi3>
 800555a:	0003      	movs	r3, r0
 800555c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	2b0f      	cmp	r3, #15
 8005562:	d90a      	bls.n	800557a <UART_SetConfig+0x53a>
 8005564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005566:	2380      	movs	r3, #128	@ 0x80
 8005568:	025b      	lsls	r3, r3, #9
 800556a:	429a      	cmp	r2, r3
 800556c:	d205      	bcs.n	800557a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	b29a      	uxth	r2, r3
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60da      	str	r2, [r3, #12]
 8005578:	e005      	b.n	8005586 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800557a:	231a      	movs	r3, #26
 800557c:	2220      	movs	r2, #32
 800557e:	189b      	adds	r3, r3, r2
 8005580:	19db      	adds	r3, r3, r7
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	226a      	movs	r2, #106	@ 0x6a
 800558a:	2101      	movs	r1, #1
 800558c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	2268      	movs	r2, #104	@ 0x68
 8005592:	2101      	movs	r1, #1
 8005594:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	2200      	movs	r2, #0
 800559a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	2200      	movs	r2, #0
 80055a0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80055a2:	231a      	movs	r3, #26
 80055a4:	2220      	movs	r2, #32
 80055a6:	189b      	adds	r3, r3, r2
 80055a8:	19db      	adds	r3, r3, r7
 80055aa:	781b      	ldrb	r3, [r3, #0]
}
 80055ac:	0018      	movs	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b010      	add	sp, #64	@ 0x40
 80055b2:	bdb0      	pop	{r4, r5, r7, pc}
 80055b4:	080066bc 	.word	0x080066bc
 80055b8:	00f42400 	.word	0x00f42400

080055bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	2208      	movs	r2, #8
 80055ca:	4013      	ands	r3, r2
 80055cc:	d00b      	beq.n	80055e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005700 <UART_AdvFeatureConfig+0x144>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	0019      	movs	r1, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ea:	2201      	movs	r2, #1
 80055ec:	4013      	ands	r3, r2
 80055ee:	d00b      	beq.n	8005608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4a43      	ldr	r2, [pc, #268]	@ (8005704 <UART_AdvFeatureConfig+0x148>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	0019      	movs	r1, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	2202      	movs	r2, #2
 800560e:	4013      	ands	r3, r2
 8005610:	d00b      	beq.n	800562a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4a3b      	ldr	r2, [pc, #236]	@ (8005708 <UART_AdvFeatureConfig+0x14c>)
 800561a:	4013      	ands	r3, r2
 800561c:	0019      	movs	r1, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562e:	2204      	movs	r2, #4
 8005630:	4013      	ands	r3, r2
 8005632:	d00b      	beq.n	800564c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4a34      	ldr	r2, [pc, #208]	@ (800570c <UART_AdvFeatureConfig+0x150>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005650:	2210      	movs	r2, #16
 8005652:	4013      	ands	r3, r2
 8005654:	d00b      	beq.n	800566e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4a2c      	ldr	r2, [pc, #176]	@ (8005710 <UART_AdvFeatureConfig+0x154>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	2220      	movs	r2, #32
 8005674:	4013      	ands	r3, r2
 8005676:	d00b      	beq.n	8005690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4a25      	ldr	r2, [pc, #148]	@ (8005714 <UART_AdvFeatureConfig+0x158>)
 8005680:	4013      	ands	r3, r2
 8005682:	0019      	movs	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	2240      	movs	r2, #64	@ 0x40
 8005696:	4013      	ands	r3, r2
 8005698:	d01d      	beq.n	80056d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005718 <UART_AdvFeatureConfig+0x15c>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056b6:	2380      	movs	r3, #128	@ 0x80
 80056b8:	035b      	lsls	r3, r3, #13
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d10b      	bne.n	80056d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	4a15      	ldr	r2, [pc, #84]	@ (800571c <UART_AdvFeatureConfig+0x160>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	0019      	movs	r1, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	2280      	movs	r2, #128	@ 0x80
 80056dc:	4013      	ands	r3, r2
 80056de:	d00b      	beq.n	80056f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005720 <UART_AdvFeatureConfig+0x164>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	0019      	movs	r1, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }
}
 80056f8:	46c0      	nop			@ (mov r8, r8)
 80056fa:	46bd      	mov	sp, r7
 80056fc:	b002      	add	sp, #8
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	ffff7fff 	.word	0xffff7fff
 8005704:	fffdffff 	.word	0xfffdffff
 8005708:	fffeffff 	.word	0xfffeffff
 800570c:	fffbffff 	.word	0xfffbffff
 8005710:	ffffefff 	.word	0xffffefff
 8005714:	ffffdfff 	.word	0xffffdfff
 8005718:	ffefffff 	.word	0xffefffff
 800571c:	ff9fffff 	.word	0xff9fffff
 8005720:	fff7ffff 	.word	0xfff7ffff

08005724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b092      	sub	sp, #72	@ 0x48
 8005728:	af02      	add	r7, sp, #8
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2290      	movs	r2, #144	@ 0x90
 8005730:	2100      	movs	r1, #0
 8005732:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005734:	f7fc f86e 	bl	8001814 <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2208      	movs	r2, #8
 8005744:	4013      	ands	r3, r2
 8005746:	2b08      	cmp	r3, #8
 8005748:	d12d      	bne.n	80057a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574c:	2280      	movs	r2, #128	@ 0x80
 800574e:	0391      	lsls	r1, r2, #14
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4a47      	ldr	r2, [pc, #284]	@ (8005870 <UART_CheckIdleState+0x14c>)
 8005754:	9200      	str	r2, [sp, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	f000 f88e 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 800575c:	1e03      	subs	r3, r0, #0
 800575e:	d022      	beq.n	80057a6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005760:	f3ef 8310 	mrs	r3, PRIMASK
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800576a:	2301      	movs	r3, #1
 800576c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005770:	f383 8810 	msr	PRIMASK, r3
}
 8005774:	46c0      	nop			@ (mov r8, r8)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2180      	movs	r1, #128	@ 0x80
 8005782:	438a      	bics	r2, r1
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	f383 8810 	msr	PRIMASK, r3
}
 8005790:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2288      	movs	r2, #136	@ 0x88
 8005796:	2120      	movs	r1, #32
 8005798:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2284      	movs	r2, #132	@ 0x84
 800579e:	2100      	movs	r1, #0
 80057a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e060      	b.n	8005868 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2204      	movs	r2, #4
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d146      	bne.n	8005842 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b6:	2280      	movs	r2, #128	@ 0x80
 80057b8:	03d1      	lsls	r1, r2, #15
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005870 <UART_CheckIdleState+0x14c>)
 80057be:	9200      	str	r2, [sp, #0]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f000 f859 	bl	8005878 <UART_WaitOnFlagUntilTimeout>
 80057c6:	1e03      	subs	r3, r0, #0
 80057c8:	d03b      	beq.n	8005842 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ca:	f3ef 8310 	mrs	r3, PRIMASK
 80057ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80057d0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d4:	2301      	movs	r3, #1
 80057d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f383 8810 	msr	PRIMASK, r3
}
 80057de:	46c0      	nop			@ (mov r8, r8)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4922      	ldr	r1, [pc, #136]	@ (8005874 <UART_CheckIdleState+0x150>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f383 8810 	msr	PRIMASK, r3
}
 80057fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005800:	61bb      	str	r3, [r7, #24]
  return(result);
 8005802:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005804:	633b      	str	r3, [r7, #48]	@ 0x30
 8005806:	2301      	movs	r3, #1
 8005808:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f383 8810 	msr	PRIMASK, r3
}
 8005810:	46c0      	nop			@ (mov r8, r8)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2101      	movs	r1, #1
 800581e:	438a      	bics	r2, r1
 8005820:	609a      	str	r2, [r3, #8]
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f383 8810 	msr	PRIMASK, r3
}
 800582c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	228c      	movs	r2, #140	@ 0x8c
 8005832:	2120      	movs	r1, #32
 8005834:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2284      	movs	r2, #132	@ 0x84
 800583a:	2100      	movs	r1, #0
 800583c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e012      	b.n	8005868 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2288      	movs	r2, #136	@ 0x88
 8005846:	2120      	movs	r1, #32
 8005848:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	228c      	movs	r2, #140	@ 0x8c
 800584e:	2120      	movs	r1, #32
 8005850:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2284      	movs	r2, #132	@ 0x84
 8005862:	2100      	movs	r1, #0
 8005864:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	0018      	movs	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	b010      	add	sp, #64	@ 0x40
 800586e:	bd80      	pop	{r7, pc}
 8005870:	01ffffff 	.word	0x01ffffff
 8005874:	fffffedf 	.word	0xfffffedf

08005878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	603b      	str	r3, [r7, #0]
 8005884:	1dfb      	adds	r3, r7, #7
 8005886:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005888:	e051      	b.n	800592e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	3301      	adds	r3, #1
 800588e:	d04e      	beq.n	800592e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005890:	f7fb ffc0 	bl	8001814 <HAL_GetTick>
 8005894:	0002      	movs	r2, r0
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e051      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2204      	movs	r2, #4
 80058b2:	4013      	ands	r3, r2
 80058b4:	d03b      	beq.n	800592e <UART_WaitOnFlagUntilTimeout+0xb6>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b80      	cmp	r3, #128	@ 0x80
 80058ba:	d038      	beq.n	800592e <UART_WaitOnFlagUntilTimeout+0xb6>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b40      	cmp	r3, #64	@ 0x40
 80058c0:	d035      	beq.n	800592e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	2208      	movs	r2, #8
 80058ca:	4013      	ands	r3, r2
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d111      	bne.n	80058f4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2208      	movs	r2, #8
 80058d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	0018      	movs	r0, r3
 80058dc:	f000 f83c 	bl	8005958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2290      	movs	r2, #144	@ 0x90
 80058e4:	2108      	movs	r1, #8
 80058e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2284      	movs	r2, #132	@ 0x84
 80058ec:	2100      	movs	r1, #0
 80058ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e02c      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69da      	ldr	r2, [r3, #28]
 80058fa:	2380      	movs	r3, #128	@ 0x80
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	401a      	ands	r2, r3
 8005900:	2380      	movs	r3, #128	@ 0x80
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	429a      	cmp	r2, r3
 8005906:	d112      	bne.n	800592e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2280      	movs	r2, #128	@ 0x80
 800590e:	0112      	lsls	r2, r2, #4
 8005910:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	0018      	movs	r0, r3
 8005916:	f000 f81f 	bl	8005958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2290      	movs	r2, #144	@ 0x90
 800591e:	2120      	movs	r1, #32
 8005920:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2284      	movs	r2, #132	@ 0x84
 8005926:	2100      	movs	r1, #0
 8005928:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e00f      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	4013      	ands	r3, r2
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	425a      	negs	r2, r3
 800593e:	4153      	adcs	r3, r2
 8005940:	b2db      	uxtb	r3, r3
 8005942:	001a      	movs	r2, r3
 8005944:	1dfb      	adds	r3, r7, #7
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d09e      	beq.n	800588a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	0018      	movs	r0, r3
 8005950:	46bd      	mov	sp, r7
 8005952:	b004      	add	sp, #16
 8005954:	bd80      	pop	{r7, pc}
	...

08005958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08e      	sub	sp, #56	@ 0x38
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005960:	f3ef 8310 	mrs	r3, PRIMASK
 8005964:	617b      	str	r3, [r7, #20]
  return(result);
 8005966:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005968:	637b      	str	r3, [r7, #52]	@ 0x34
 800596a:	2301      	movs	r3, #1
 800596c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f383 8810 	msr	PRIMASK, r3
}
 8005974:	46c0      	nop			@ (mov r8, r8)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4926      	ldr	r1, [pc, #152]	@ (8005a1c <UART_EndRxTransfer+0xc4>)
 8005982:	400a      	ands	r2, r1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f383 8810 	msr	PRIMASK, r3
}
 8005990:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005992:	f3ef 8310 	mrs	r3, PRIMASK
 8005996:	623b      	str	r3, [r7, #32]
  return(result);
 8005998:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800599a:	633b      	str	r3, [r7, #48]	@ 0x30
 800599c:	2301      	movs	r3, #1
 800599e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	491b      	ldr	r1, [pc, #108]	@ (8005a20 <UART_EndRxTransfer+0xc8>)
 80059b4:	400a      	ands	r2, r1
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	f383 8810 	msr	PRIMASK, r3
}
 80059c2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d118      	bne.n	80059fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059cc:	f3ef 8310 	mrs	r3, PRIMASK
 80059d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80059d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059d6:	2301      	movs	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f383 8810 	msr	PRIMASK, r3
}
 80059e0:	46c0      	nop			@ (mov r8, r8)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2110      	movs	r1, #16
 80059ee:	438a      	bics	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	228c      	movs	r2, #140	@ 0x8c
 8005a02:	2120      	movs	r1, #32
 8005a04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b00e      	add	sp, #56	@ 0x38
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	fffffedf 	.word	0xfffffedf
 8005a20:	effffffe 	.word	0xeffffffe

08005a24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2284      	movs	r2, #132	@ 0x84
 8005a30:	5c9b      	ldrb	r3, [r3, r2]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_UARTEx_DisableFifoMode+0x16>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e027      	b.n	8005a8a <HAL_UARTEx_DisableFifoMode+0x66>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2284      	movs	r2, #132	@ 0x84
 8005a3e:	2101      	movs	r1, #1
 8005a40:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2288      	movs	r2, #136	@ 0x88
 8005a46:	2124      	movs	r1, #36	@ 0x24
 8005a48:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	438a      	bics	r2, r1
 8005a60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a0b      	ldr	r2, [pc, #44]	@ (8005a94 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2288      	movs	r2, #136	@ 0x88
 8005a7c:	2120      	movs	r1, #32
 8005a7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2284      	movs	r2, #132	@ 0x84
 8005a84:	2100      	movs	r1, #0
 8005a86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	b004      	add	sp, #16
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	dfffffff 	.word	0xdfffffff

08005a98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2284      	movs	r2, #132	@ 0x84
 8005aa6:	5c9b      	ldrb	r3, [r3, r2]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e02e      	b.n	8005b0e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2284      	movs	r2, #132	@ 0x84
 8005ab4:	2101      	movs	r1, #1
 8005ab6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2288      	movs	r2, #136	@ 0x88
 8005abc:	2124      	movs	r1, #36	@ 0x24
 8005abe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	438a      	bics	r2, r1
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	08d9      	lsrs	r1, r3, #3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f000 f854 	bl	8005b9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2288      	movs	r2, #136	@ 0x88
 8005b00:	2120      	movs	r1, #32
 8005b02:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2284      	movs	r2, #132	@ 0x84
 8005b08:	2100      	movs	r1, #0
 8005b0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	0018      	movs	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b004      	add	sp, #16
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2284      	movs	r2, #132	@ 0x84
 8005b26:	5c9b      	ldrb	r3, [r3, r2]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e02f      	b.n	8005b90 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2284      	movs	r2, #132	@ 0x84
 8005b34:	2101      	movs	r1, #1
 8005b36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2288      	movs	r2, #136	@ 0x88
 8005b3c:	2124      	movs	r1, #36	@ 0x24
 8005b3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2101      	movs	r1, #1
 8005b54:	438a      	bics	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b98 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	0019      	movs	r1, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	0018      	movs	r0, r3
 8005b72:	f000 f813 	bl	8005b9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2288      	movs	r2, #136	@ 0x88
 8005b82:	2120      	movs	r1, #32
 8005b84:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2284      	movs	r2, #132	@ 0x84
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	0018      	movs	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b004      	add	sp, #16
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	f1ffffff 	.word	0xf1ffffff

08005b9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d108      	bne.n	8005bbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	226a      	movs	r2, #106	@ 0x6a
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2268      	movs	r2, #104	@ 0x68
 8005bb8:	2101      	movs	r1, #1
 8005bba:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bbc:	e043      	b.n	8005c46 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bbe:	260f      	movs	r6, #15
 8005bc0:	19bb      	adds	r3, r7, r6
 8005bc2:	2208      	movs	r2, #8
 8005bc4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bc6:	200e      	movs	r0, #14
 8005bc8:	183b      	adds	r3, r7, r0
 8005bca:	2208      	movs	r2, #8
 8005bcc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	0e5b      	lsrs	r3, r3, #25
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	240d      	movs	r4, #13
 8005bda:	193b      	adds	r3, r7, r4
 8005bdc:	2107      	movs	r1, #7
 8005bde:	400a      	ands	r2, r1
 8005be0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	0f5b      	lsrs	r3, r3, #29
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	250c      	movs	r5, #12
 8005bee:	197b      	adds	r3, r7, r5
 8005bf0:	2107      	movs	r1, #7
 8005bf2:	400a      	ands	r2, r1
 8005bf4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bf6:	183b      	adds	r3, r7, r0
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	197a      	adds	r2, r7, r5
 8005bfc:	7812      	ldrb	r2, [r2, #0]
 8005bfe:	4914      	ldr	r1, [pc, #80]	@ (8005c50 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c00:	5c8a      	ldrb	r2, [r1, r2]
 8005c02:	435a      	muls	r2, r3
 8005c04:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c06:	197b      	adds	r3, r7, r5
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	4a12      	ldr	r2, [pc, #72]	@ (8005c54 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c0c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c0e:	0019      	movs	r1, r3
 8005c10:	f7fa fb14 	bl	800023c <__divsi3>
 8005c14:	0003      	movs	r3, r0
 8005c16:	b299      	uxth	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	226a      	movs	r2, #106	@ 0x6a
 8005c1c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c1e:	19bb      	adds	r3, r7, r6
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	193a      	adds	r2, r7, r4
 8005c24:	7812      	ldrb	r2, [r2, #0]
 8005c26:	490a      	ldr	r1, [pc, #40]	@ (8005c50 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c28:	5c8a      	ldrb	r2, [r1, r2]
 8005c2a:	435a      	muls	r2, r3
 8005c2c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c2e:	193b      	adds	r3, r7, r4
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	4a08      	ldr	r2, [pc, #32]	@ (8005c54 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c34:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c36:	0019      	movs	r1, r3
 8005c38:	f7fa fb00 	bl	800023c <__divsi3>
 8005c3c:	0003      	movs	r3, r0
 8005c3e:	b299      	uxth	r1, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2268      	movs	r2, #104	@ 0x68
 8005c44:	5299      	strh	r1, [r3, r2]
}
 8005c46:	46c0      	nop			@ (mov r8, r8)
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	b005      	add	sp, #20
 8005c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c4e:	46c0      	nop			@ (mov r8, r8)
 8005c50:	080066d4 	.word	0x080066d4
 8005c54:	080066dc 	.word	0x080066dc

08005c58 <siprintf>:
 8005c58:	b40e      	push	{r1, r2, r3}
 8005c5a:	b500      	push	{lr}
 8005c5c:	490b      	ldr	r1, [pc, #44]	@ (8005c8c <siprintf+0x34>)
 8005c5e:	b09c      	sub	sp, #112	@ 0x70
 8005c60:	ab1d      	add	r3, sp, #116	@ 0x74
 8005c62:	9002      	str	r0, [sp, #8]
 8005c64:	9006      	str	r0, [sp, #24]
 8005c66:	9107      	str	r1, [sp, #28]
 8005c68:	9104      	str	r1, [sp, #16]
 8005c6a:	4809      	ldr	r0, [pc, #36]	@ (8005c90 <siprintf+0x38>)
 8005c6c:	4909      	ldr	r1, [pc, #36]	@ (8005c94 <siprintf+0x3c>)
 8005c6e:	cb04      	ldmia	r3!, {r2}
 8005c70:	9105      	str	r1, [sp, #20]
 8005c72:	6800      	ldr	r0, [r0, #0]
 8005c74:	a902      	add	r1, sp, #8
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	f000 f99e 	bl	8005fb8 <_svfiprintf_r>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	9b02      	ldr	r3, [sp, #8]
 8005c80:	701a      	strb	r2, [r3, #0]
 8005c82:	b01c      	add	sp, #112	@ 0x70
 8005c84:	bc08      	pop	{r3}
 8005c86:	b003      	add	sp, #12
 8005c88:	4718      	bx	r3
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	7fffffff 	.word	0x7fffffff
 8005c90:	2000001c 	.word	0x2000001c
 8005c94:	ffff0208 	.word	0xffff0208

08005c98 <memset>:
 8005c98:	0003      	movs	r3, r0
 8005c9a:	1882      	adds	r2, r0, r2
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d100      	bne.n	8005ca2 <memset+0xa>
 8005ca0:	4770      	bx	lr
 8005ca2:	7019      	strb	r1, [r3, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	e7f9      	b.n	8005c9c <memset+0x4>

08005ca8 <__errno>:
 8005ca8:	4b01      	ldr	r3, [pc, #4]	@ (8005cb0 <__errno+0x8>)
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	4770      	bx	lr
 8005cae:	46c0      	nop			@ (mov r8, r8)
 8005cb0:	2000001c 	.word	0x2000001c

08005cb4 <__libc_init_array>:
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	4c0c      	ldr	r4, [pc, #48]	@ (8005cec <__libc_init_array+0x38>)
 8005cba:	4d0d      	ldr	r5, [pc, #52]	@ (8005cf0 <__libc_init_array+0x3c>)
 8005cbc:	1b64      	subs	r4, r4, r5
 8005cbe:	10a4      	asrs	r4, r4, #2
 8005cc0:	42a6      	cmp	r6, r4
 8005cc2:	d109      	bne.n	8005cd8 <__libc_init_array+0x24>
 8005cc4:	2600      	movs	r6, #0
 8005cc6:	f000 fc65 	bl	8006594 <_init>
 8005cca:	4c0a      	ldr	r4, [pc, #40]	@ (8005cf4 <__libc_init_array+0x40>)
 8005ccc:	4d0a      	ldr	r5, [pc, #40]	@ (8005cf8 <__libc_init_array+0x44>)
 8005cce:	1b64      	subs	r4, r4, r5
 8005cd0:	10a4      	asrs	r4, r4, #2
 8005cd2:	42a6      	cmp	r6, r4
 8005cd4:	d105      	bne.n	8005ce2 <__libc_init_array+0x2e>
 8005cd6:	bd70      	pop	{r4, r5, r6, pc}
 8005cd8:	00b3      	lsls	r3, r6, #2
 8005cda:	58eb      	ldr	r3, [r5, r3]
 8005cdc:	4798      	blx	r3
 8005cde:	3601      	adds	r6, #1
 8005ce0:	e7ee      	b.n	8005cc0 <__libc_init_array+0xc>
 8005ce2:	00b3      	lsls	r3, r6, #2
 8005ce4:	58eb      	ldr	r3, [r5, r3]
 8005ce6:	4798      	blx	r3
 8005ce8:	3601      	adds	r6, #1
 8005cea:	e7f2      	b.n	8005cd2 <__libc_init_array+0x1e>
 8005cec:	08006720 	.word	0x08006720
 8005cf0:	08006720 	.word	0x08006720
 8005cf4:	08006724 	.word	0x08006724
 8005cf8:	08006720 	.word	0x08006720

08005cfc <__retarget_lock_acquire_recursive>:
 8005cfc:	4770      	bx	lr

08005cfe <__retarget_lock_release_recursive>:
 8005cfe:	4770      	bx	lr

08005d00 <_free_r>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	0005      	movs	r5, r0
 8005d04:	1e0c      	subs	r4, r1, #0
 8005d06:	d010      	beq.n	8005d2a <_free_r+0x2a>
 8005d08:	3c04      	subs	r4, #4
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da00      	bge.n	8005d12 <_free_r+0x12>
 8005d10:	18e4      	adds	r4, r4, r3
 8005d12:	0028      	movs	r0, r5
 8005d14:	f000 f8e0 	bl	8005ed8 <__malloc_lock>
 8005d18:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <_free_r+0x90>)
 8005d1a:	6813      	ldr	r3, [r2, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <_free_r+0x2c>
 8005d20:	6063      	str	r3, [r4, #4]
 8005d22:	6014      	str	r4, [r2, #0]
 8005d24:	0028      	movs	r0, r5
 8005d26:	f000 f8df 	bl	8005ee8 <__malloc_unlock>
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d908      	bls.n	8005d42 <_free_r+0x42>
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	1821      	adds	r1, r4, r0
 8005d34:	428b      	cmp	r3, r1
 8005d36:	d1f3      	bne.n	8005d20 <_free_r+0x20>
 8005d38:	6819      	ldr	r1, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	1809      	adds	r1, r1, r0
 8005d3e:	6021      	str	r1, [r4, #0]
 8005d40:	e7ee      	b.n	8005d20 <_free_r+0x20>
 8005d42:	001a      	movs	r2, r3
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <_free_r+0x4e>
 8005d4a:	42a3      	cmp	r3, r4
 8005d4c:	d9f9      	bls.n	8005d42 <_free_r+0x42>
 8005d4e:	6811      	ldr	r1, [r2, #0]
 8005d50:	1850      	adds	r0, r2, r1
 8005d52:	42a0      	cmp	r0, r4
 8005d54:	d10b      	bne.n	8005d6e <_free_r+0x6e>
 8005d56:	6820      	ldr	r0, [r4, #0]
 8005d58:	1809      	adds	r1, r1, r0
 8005d5a:	1850      	adds	r0, r2, r1
 8005d5c:	6011      	str	r1, [r2, #0]
 8005d5e:	4283      	cmp	r3, r0
 8005d60:	d1e0      	bne.n	8005d24 <_free_r+0x24>
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	1841      	adds	r1, r0, r1
 8005d68:	6011      	str	r1, [r2, #0]
 8005d6a:	6053      	str	r3, [r2, #4]
 8005d6c:	e7da      	b.n	8005d24 <_free_r+0x24>
 8005d6e:	42a0      	cmp	r0, r4
 8005d70:	d902      	bls.n	8005d78 <_free_r+0x78>
 8005d72:	230c      	movs	r3, #12
 8005d74:	602b      	str	r3, [r5, #0]
 8005d76:	e7d5      	b.n	8005d24 <_free_r+0x24>
 8005d78:	6820      	ldr	r0, [r4, #0]
 8005d7a:	1821      	adds	r1, r4, r0
 8005d7c:	428b      	cmp	r3, r1
 8005d7e:	d103      	bne.n	8005d88 <_free_r+0x88>
 8005d80:	6819      	ldr	r1, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	1809      	adds	r1, r1, r0
 8005d86:	6021      	str	r1, [r4, #0]
 8005d88:	6063      	str	r3, [r4, #4]
 8005d8a:	6054      	str	r4, [r2, #4]
 8005d8c:	e7ca      	b.n	8005d24 <_free_r+0x24>
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	20000404 	.word	0x20000404

08005d94 <sbrk_aligned>:
 8005d94:	b570      	push	{r4, r5, r6, lr}
 8005d96:	4e0f      	ldr	r6, [pc, #60]	@ (8005dd4 <sbrk_aligned+0x40>)
 8005d98:	000d      	movs	r5, r1
 8005d9a:	6831      	ldr	r1, [r6, #0]
 8005d9c:	0004      	movs	r4, r0
 8005d9e:	2900      	cmp	r1, #0
 8005da0:	d102      	bne.n	8005da8 <sbrk_aligned+0x14>
 8005da2:	f000 fb99 	bl	80064d8 <_sbrk_r>
 8005da6:	6030      	str	r0, [r6, #0]
 8005da8:	0029      	movs	r1, r5
 8005daa:	0020      	movs	r0, r4
 8005dac:	f000 fb94 	bl	80064d8 <_sbrk_r>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d103      	bne.n	8005dbc <sbrk_aligned+0x28>
 8005db4:	2501      	movs	r5, #1
 8005db6:	426d      	negs	r5, r5
 8005db8:	0028      	movs	r0, r5
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	1cc5      	adds	r5, r0, #3
 8005dc0:	439d      	bics	r5, r3
 8005dc2:	42a8      	cmp	r0, r5
 8005dc4:	d0f8      	beq.n	8005db8 <sbrk_aligned+0x24>
 8005dc6:	1a29      	subs	r1, r5, r0
 8005dc8:	0020      	movs	r0, r4
 8005dca:	f000 fb85 	bl	80064d8 <_sbrk_r>
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d1f2      	bne.n	8005db8 <sbrk_aligned+0x24>
 8005dd2:	e7ef      	b.n	8005db4 <sbrk_aligned+0x20>
 8005dd4:	20000400 	.word	0x20000400

08005dd8 <_malloc_r>:
 8005dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dda:	2203      	movs	r2, #3
 8005ddc:	1ccb      	adds	r3, r1, #3
 8005dde:	4393      	bics	r3, r2
 8005de0:	3308      	adds	r3, #8
 8005de2:	0005      	movs	r5, r0
 8005de4:	001f      	movs	r7, r3
 8005de6:	2b0c      	cmp	r3, #12
 8005de8:	d234      	bcs.n	8005e54 <_malloc_r+0x7c>
 8005dea:	270c      	movs	r7, #12
 8005dec:	42b9      	cmp	r1, r7
 8005dee:	d833      	bhi.n	8005e58 <_malloc_r+0x80>
 8005df0:	0028      	movs	r0, r5
 8005df2:	f000 f871 	bl	8005ed8 <__malloc_lock>
 8005df6:	4e37      	ldr	r6, [pc, #220]	@ (8005ed4 <_malloc_r+0xfc>)
 8005df8:	6833      	ldr	r3, [r6, #0]
 8005dfa:	001c      	movs	r4, r3
 8005dfc:	2c00      	cmp	r4, #0
 8005dfe:	d12f      	bne.n	8005e60 <_malloc_r+0x88>
 8005e00:	0039      	movs	r1, r7
 8005e02:	0028      	movs	r0, r5
 8005e04:	f7ff ffc6 	bl	8005d94 <sbrk_aligned>
 8005e08:	0004      	movs	r4, r0
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	d15f      	bne.n	8005ece <_malloc_r+0xf6>
 8005e0e:	6834      	ldr	r4, [r6, #0]
 8005e10:	9400      	str	r4, [sp, #0]
 8005e12:	9b00      	ldr	r3, [sp, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d14a      	bne.n	8005eae <_malloc_r+0xd6>
 8005e18:	2c00      	cmp	r4, #0
 8005e1a:	d052      	beq.n	8005ec2 <_malloc_r+0xea>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	0028      	movs	r0, r5
 8005e20:	18e3      	adds	r3, r4, r3
 8005e22:	9900      	ldr	r1, [sp, #0]
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	f000 fb57 	bl	80064d8 <_sbrk_r>
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	4283      	cmp	r3, r0
 8005e2e:	d148      	bne.n	8005ec2 <_malloc_r+0xea>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	0028      	movs	r0, r5
 8005e34:	1aff      	subs	r7, r7, r3
 8005e36:	0039      	movs	r1, r7
 8005e38:	f7ff ffac 	bl	8005d94 <sbrk_aligned>
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	d040      	beq.n	8005ec2 <_malloc_r+0xea>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	19db      	adds	r3, r3, r7
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	6833      	ldr	r3, [r6, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d133      	bne.n	8005eb6 <_malloc_r+0xde>
 8005e4e:	9b00      	ldr	r3, [sp, #0]
 8005e50:	6033      	str	r3, [r6, #0]
 8005e52:	e019      	b.n	8005e88 <_malloc_r+0xb0>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dac9      	bge.n	8005dec <_malloc_r+0x14>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e60:	6821      	ldr	r1, [r4, #0]
 8005e62:	1bc9      	subs	r1, r1, r7
 8005e64:	d420      	bmi.n	8005ea8 <_malloc_r+0xd0>
 8005e66:	290b      	cmp	r1, #11
 8005e68:	d90a      	bls.n	8005e80 <_malloc_r+0xa8>
 8005e6a:	19e2      	adds	r2, r4, r7
 8005e6c:	6027      	str	r7, [r4, #0]
 8005e6e:	42a3      	cmp	r3, r4
 8005e70:	d104      	bne.n	8005e7c <_malloc_r+0xa4>
 8005e72:	6032      	str	r2, [r6, #0]
 8005e74:	6863      	ldr	r3, [r4, #4]
 8005e76:	6011      	str	r1, [r2, #0]
 8005e78:	6053      	str	r3, [r2, #4]
 8005e7a:	e005      	b.n	8005e88 <_malloc_r+0xb0>
 8005e7c:	605a      	str	r2, [r3, #4]
 8005e7e:	e7f9      	b.n	8005e74 <_malloc_r+0x9c>
 8005e80:	6862      	ldr	r2, [r4, #4]
 8005e82:	42a3      	cmp	r3, r4
 8005e84:	d10e      	bne.n	8005ea4 <_malloc_r+0xcc>
 8005e86:	6032      	str	r2, [r6, #0]
 8005e88:	0028      	movs	r0, r5
 8005e8a:	f000 f82d 	bl	8005ee8 <__malloc_unlock>
 8005e8e:	0020      	movs	r0, r4
 8005e90:	2207      	movs	r2, #7
 8005e92:	300b      	adds	r0, #11
 8005e94:	1d23      	adds	r3, r4, #4
 8005e96:	4390      	bics	r0, r2
 8005e98:	1ac2      	subs	r2, r0, r3
 8005e9a:	4298      	cmp	r0, r3
 8005e9c:	d0df      	beq.n	8005e5e <_malloc_r+0x86>
 8005e9e:	1a1b      	subs	r3, r3, r0
 8005ea0:	50a3      	str	r3, [r4, r2]
 8005ea2:	e7dc      	b.n	8005e5e <_malloc_r+0x86>
 8005ea4:	605a      	str	r2, [r3, #4]
 8005ea6:	e7ef      	b.n	8005e88 <_malloc_r+0xb0>
 8005ea8:	0023      	movs	r3, r4
 8005eaa:	6864      	ldr	r4, [r4, #4]
 8005eac:	e7a6      	b.n	8005dfc <_malloc_r+0x24>
 8005eae:	9c00      	ldr	r4, [sp, #0]
 8005eb0:	6863      	ldr	r3, [r4, #4]
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	e7ad      	b.n	8005e12 <_malloc_r+0x3a>
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	42a3      	cmp	r3, r4
 8005ebc:	d1fb      	bne.n	8005eb6 <_malloc_r+0xde>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e7da      	b.n	8005e78 <_malloc_r+0xa0>
 8005ec2:	230c      	movs	r3, #12
 8005ec4:	0028      	movs	r0, r5
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f000 f80e 	bl	8005ee8 <__malloc_unlock>
 8005ecc:	e7c6      	b.n	8005e5c <_malloc_r+0x84>
 8005ece:	6007      	str	r7, [r0, #0]
 8005ed0:	e7da      	b.n	8005e88 <_malloc_r+0xb0>
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	20000404 	.word	0x20000404

08005ed8 <__malloc_lock>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	4802      	ldr	r0, [pc, #8]	@ (8005ee4 <__malloc_lock+0xc>)
 8005edc:	f7ff ff0e 	bl	8005cfc <__retarget_lock_acquire_recursive>
 8005ee0:	bd10      	pop	{r4, pc}
 8005ee2:	46c0      	nop			@ (mov r8, r8)
 8005ee4:	200003fc 	.word	0x200003fc

08005ee8 <__malloc_unlock>:
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	4802      	ldr	r0, [pc, #8]	@ (8005ef4 <__malloc_unlock+0xc>)
 8005eec:	f7ff ff07 	bl	8005cfe <__retarget_lock_release_recursive>
 8005ef0:	bd10      	pop	{r4, pc}
 8005ef2:	46c0      	nop			@ (mov r8, r8)
 8005ef4:	200003fc 	.word	0x200003fc

08005ef8 <__ssputs_r>:
 8005ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efa:	688e      	ldr	r6, [r1, #8]
 8005efc:	b085      	sub	sp, #20
 8005efe:	001f      	movs	r7, r3
 8005f00:	000c      	movs	r4, r1
 8005f02:	680b      	ldr	r3, [r1, #0]
 8005f04:	9002      	str	r0, [sp, #8]
 8005f06:	9203      	str	r2, [sp, #12]
 8005f08:	42be      	cmp	r6, r7
 8005f0a:	d830      	bhi.n	8005f6e <__ssputs_r+0x76>
 8005f0c:	210c      	movs	r1, #12
 8005f0e:	5e62      	ldrsh	r2, [r4, r1]
 8005f10:	2190      	movs	r1, #144	@ 0x90
 8005f12:	00c9      	lsls	r1, r1, #3
 8005f14:	420a      	tst	r2, r1
 8005f16:	d028      	beq.n	8005f6a <__ssputs_r+0x72>
 8005f18:	2003      	movs	r0, #3
 8005f1a:	6921      	ldr	r1, [r4, #16]
 8005f1c:	1a5b      	subs	r3, r3, r1
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	6963      	ldr	r3, [r4, #20]
 8005f22:	4343      	muls	r3, r0
 8005f24:	9801      	ldr	r0, [sp, #4]
 8005f26:	0fdd      	lsrs	r5, r3, #31
 8005f28:	18ed      	adds	r5, r5, r3
 8005f2a:	1c7b      	adds	r3, r7, #1
 8005f2c:	181b      	adds	r3, r3, r0
 8005f2e:	106d      	asrs	r5, r5, #1
 8005f30:	42ab      	cmp	r3, r5
 8005f32:	d900      	bls.n	8005f36 <__ssputs_r+0x3e>
 8005f34:	001d      	movs	r5, r3
 8005f36:	0552      	lsls	r2, r2, #21
 8005f38:	d528      	bpl.n	8005f8c <__ssputs_r+0x94>
 8005f3a:	0029      	movs	r1, r5
 8005f3c:	9802      	ldr	r0, [sp, #8]
 8005f3e:	f7ff ff4b 	bl	8005dd8 <_malloc_r>
 8005f42:	1e06      	subs	r6, r0, #0
 8005f44:	d02c      	beq.n	8005fa0 <__ssputs_r+0xa8>
 8005f46:	9a01      	ldr	r2, [sp, #4]
 8005f48:	6921      	ldr	r1, [r4, #16]
 8005f4a:	f000 fae2 	bl	8006512 <memcpy>
 8005f4e:	89a2      	ldrh	r2, [r4, #12]
 8005f50:	4b18      	ldr	r3, [pc, #96]	@ (8005fb4 <__ssputs_r+0xbc>)
 8005f52:	401a      	ands	r2, r3
 8005f54:	2380      	movs	r3, #128	@ 0x80
 8005f56:	4313      	orrs	r3, r2
 8005f58:	81a3      	strh	r3, [r4, #12]
 8005f5a:	9b01      	ldr	r3, [sp, #4]
 8005f5c:	6126      	str	r6, [r4, #16]
 8005f5e:	18f6      	adds	r6, r6, r3
 8005f60:	6026      	str	r6, [r4, #0]
 8005f62:	003e      	movs	r6, r7
 8005f64:	6165      	str	r5, [r4, #20]
 8005f66:	1aed      	subs	r5, r5, r3
 8005f68:	60a5      	str	r5, [r4, #8]
 8005f6a:	42be      	cmp	r6, r7
 8005f6c:	d900      	bls.n	8005f70 <__ssputs_r+0x78>
 8005f6e:	003e      	movs	r6, r7
 8005f70:	0032      	movs	r2, r6
 8005f72:	9903      	ldr	r1, [sp, #12]
 8005f74:	6820      	ldr	r0, [r4, #0]
 8005f76:	f000 fa9b 	bl	80064b0 <memmove>
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	68a3      	ldr	r3, [r4, #8]
 8005f7e:	1b9b      	subs	r3, r3, r6
 8005f80:	60a3      	str	r3, [r4, #8]
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	199b      	adds	r3, r3, r6
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	b005      	add	sp, #20
 8005f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f8c:	002a      	movs	r2, r5
 8005f8e:	9802      	ldr	r0, [sp, #8]
 8005f90:	f000 fac8 	bl	8006524 <_realloc_r>
 8005f94:	1e06      	subs	r6, r0, #0
 8005f96:	d1e0      	bne.n	8005f5a <__ssputs_r+0x62>
 8005f98:	6921      	ldr	r1, [r4, #16]
 8005f9a:	9802      	ldr	r0, [sp, #8]
 8005f9c:	f7ff feb0 	bl	8005d00 <_free_r>
 8005fa0:	230c      	movs	r3, #12
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	9a02      	ldr	r2, [sp, #8]
 8005fa6:	4240      	negs	r0, r0
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	89a2      	ldrh	r2, [r4, #12]
 8005fac:	3334      	adds	r3, #52	@ 0x34
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	81a3      	strh	r3, [r4, #12]
 8005fb2:	e7e9      	b.n	8005f88 <__ssputs_r+0x90>
 8005fb4:	fffffb7f 	.word	0xfffffb7f

08005fb8 <_svfiprintf_r>:
 8005fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fba:	b0a1      	sub	sp, #132	@ 0x84
 8005fbc:	9003      	str	r0, [sp, #12]
 8005fbe:	001d      	movs	r5, r3
 8005fc0:	898b      	ldrh	r3, [r1, #12]
 8005fc2:	000f      	movs	r7, r1
 8005fc4:	0016      	movs	r6, r2
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	d511      	bpl.n	8005fee <_svfiprintf_r+0x36>
 8005fca:	690b      	ldr	r3, [r1, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10e      	bne.n	8005fee <_svfiprintf_r+0x36>
 8005fd0:	2140      	movs	r1, #64	@ 0x40
 8005fd2:	f7ff ff01 	bl	8005dd8 <_malloc_r>
 8005fd6:	6038      	str	r0, [r7, #0]
 8005fd8:	6138      	str	r0, [r7, #16]
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d105      	bne.n	8005fea <_svfiprintf_r+0x32>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	9a03      	ldr	r2, [sp, #12]
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	4240      	negs	r0, r0
 8005fe8:	e0cf      	b.n	800618a <_svfiprintf_r+0x1d2>
 8005fea:	2340      	movs	r3, #64	@ 0x40
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	ac08      	add	r4, sp, #32
 8005ff2:	6163      	str	r3, [r4, #20]
 8005ff4:	3320      	adds	r3, #32
 8005ff6:	7663      	strb	r3, [r4, #25]
 8005ff8:	3310      	adds	r3, #16
 8005ffa:	76a3      	strb	r3, [r4, #26]
 8005ffc:	9507      	str	r5, [sp, #28]
 8005ffe:	0035      	movs	r5, r6
 8006000:	782b      	ldrb	r3, [r5, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <_svfiprintf_r+0x52>
 8006006:	2b25      	cmp	r3, #37	@ 0x25
 8006008:	d148      	bne.n	800609c <_svfiprintf_r+0xe4>
 800600a:	1bab      	subs	r3, r5, r6
 800600c:	9305      	str	r3, [sp, #20]
 800600e:	42b5      	cmp	r5, r6
 8006010:	d00b      	beq.n	800602a <_svfiprintf_r+0x72>
 8006012:	0032      	movs	r2, r6
 8006014:	0039      	movs	r1, r7
 8006016:	9803      	ldr	r0, [sp, #12]
 8006018:	f7ff ff6e 	bl	8005ef8 <__ssputs_r>
 800601c:	3001      	adds	r0, #1
 800601e:	d100      	bne.n	8006022 <_svfiprintf_r+0x6a>
 8006020:	e0ae      	b.n	8006180 <_svfiprintf_r+0x1c8>
 8006022:	6963      	ldr	r3, [r4, #20]
 8006024:	9a05      	ldr	r2, [sp, #20]
 8006026:	189b      	adds	r3, r3, r2
 8006028:	6163      	str	r3, [r4, #20]
 800602a:	782b      	ldrb	r3, [r5, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d100      	bne.n	8006032 <_svfiprintf_r+0x7a>
 8006030:	e0a6      	b.n	8006180 <_svfiprintf_r+0x1c8>
 8006032:	2201      	movs	r2, #1
 8006034:	2300      	movs	r3, #0
 8006036:	4252      	negs	r2, r2
 8006038:	6062      	str	r2, [r4, #4]
 800603a:	a904      	add	r1, sp, #16
 800603c:	3254      	adds	r2, #84	@ 0x54
 800603e:	1852      	adds	r2, r2, r1
 8006040:	1c6e      	adds	r6, r5, #1
 8006042:	6023      	str	r3, [r4, #0]
 8006044:	60e3      	str	r3, [r4, #12]
 8006046:	60a3      	str	r3, [r4, #8]
 8006048:	7013      	strb	r3, [r2, #0]
 800604a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800604c:	4b54      	ldr	r3, [pc, #336]	@ (80061a0 <_svfiprintf_r+0x1e8>)
 800604e:	2205      	movs	r2, #5
 8006050:	0018      	movs	r0, r3
 8006052:	7831      	ldrb	r1, [r6, #0]
 8006054:	9305      	str	r3, [sp, #20]
 8006056:	f000 fa51 	bl	80064fc <memchr>
 800605a:	1c75      	adds	r5, r6, #1
 800605c:	2800      	cmp	r0, #0
 800605e:	d11f      	bne.n	80060a0 <_svfiprintf_r+0xe8>
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	06d3      	lsls	r3, r2, #27
 8006064:	d504      	bpl.n	8006070 <_svfiprintf_r+0xb8>
 8006066:	2353      	movs	r3, #83	@ 0x53
 8006068:	a904      	add	r1, sp, #16
 800606a:	185b      	adds	r3, r3, r1
 800606c:	2120      	movs	r1, #32
 800606e:	7019      	strb	r1, [r3, #0]
 8006070:	0713      	lsls	r3, r2, #28
 8006072:	d504      	bpl.n	800607e <_svfiprintf_r+0xc6>
 8006074:	2353      	movs	r3, #83	@ 0x53
 8006076:	a904      	add	r1, sp, #16
 8006078:	185b      	adds	r3, r3, r1
 800607a:	212b      	movs	r1, #43	@ 0x2b
 800607c:	7019      	strb	r1, [r3, #0]
 800607e:	7833      	ldrb	r3, [r6, #0]
 8006080:	2b2a      	cmp	r3, #42	@ 0x2a
 8006082:	d016      	beq.n	80060b2 <_svfiprintf_r+0xfa>
 8006084:	0035      	movs	r5, r6
 8006086:	2100      	movs	r1, #0
 8006088:	200a      	movs	r0, #10
 800608a:	68e3      	ldr	r3, [r4, #12]
 800608c:	782a      	ldrb	r2, [r5, #0]
 800608e:	1c6e      	adds	r6, r5, #1
 8006090:	3a30      	subs	r2, #48	@ 0x30
 8006092:	2a09      	cmp	r2, #9
 8006094:	d950      	bls.n	8006138 <_svfiprintf_r+0x180>
 8006096:	2900      	cmp	r1, #0
 8006098:	d111      	bne.n	80060be <_svfiprintf_r+0x106>
 800609a:	e017      	b.n	80060cc <_svfiprintf_r+0x114>
 800609c:	3501      	adds	r5, #1
 800609e:	e7af      	b.n	8006000 <_svfiprintf_r+0x48>
 80060a0:	9b05      	ldr	r3, [sp, #20]
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	1ac0      	subs	r0, r0, r3
 80060a6:	2301      	movs	r3, #1
 80060a8:	4083      	lsls	r3, r0
 80060aa:	4313      	orrs	r3, r2
 80060ac:	002e      	movs	r6, r5
 80060ae:	6023      	str	r3, [r4, #0]
 80060b0:	e7cc      	b.n	800604c <_svfiprintf_r+0x94>
 80060b2:	9b07      	ldr	r3, [sp, #28]
 80060b4:	1d19      	adds	r1, r3, #4
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	9107      	str	r1, [sp, #28]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	db01      	blt.n	80060c2 <_svfiprintf_r+0x10a>
 80060be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060c0:	e004      	b.n	80060cc <_svfiprintf_r+0x114>
 80060c2:	425b      	negs	r3, r3
 80060c4:	60e3      	str	r3, [r4, #12]
 80060c6:	2302      	movs	r3, #2
 80060c8:	4313      	orrs	r3, r2
 80060ca:	6023      	str	r3, [r4, #0]
 80060cc:	782b      	ldrb	r3, [r5, #0]
 80060ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80060d0:	d10c      	bne.n	80060ec <_svfiprintf_r+0x134>
 80060d2:	786b      	ldrb	r3, [r5, #1]
 80060d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80060d6:	d134      	bne.n	8006142 <_svfiprintf_r+0x18a>
 80060d8:	9b07      	ldr	r3, [sp, #28]
 80060da:	3502      	adds	r5, #2
 80060dc:	1d1a      	adds	r2, r3, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	9207      	str	r2, [sp, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	da01      	bge.n	80060ea <_svfiprintf_r+0x132>
 80060e6:	2301      	movs	r3, #1
 80060e8:	425b      	negs	r3, r3
 80060ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ec:	4e2d      	ldr	r6, [pc, #180]	@ (80061a4 <_svfiprintf_r+0x1ec>)
 80060ee:	2203      	movs	r2, #3
 80060f0:	0030      	movs	r0, r6
 80060f2:	7829      	ldrb	r1, [r5, #0]
 80060f4:	f000 fa02 	bl	80064fc <memchr>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d006      	beq.n	800610a <_svfiprintf_r+0x152>
 80060fc:	2340      	movs	r3, #64	@ 0x40
 80060fe:	1b80      	subs	r0, r0, r6
 8006100:	4083      	lsls	r3, r0
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	3501      	adds	r5, #1
 8006106:	4313      	orrs	r3, r2
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	7829      	ldrb	r1, [r5, #0]
 800610c:	2206      	movs	r2, #6
 800610e:	4826      	ldr	r0, [pc, #152]	@ (80061a8 <_svfiprintf_r+0x1f0>)
 8006110:	1c6e      	adds	r6, r5, #1
 8006112:	7621      	strb	r1, [r4, #24]
 8006114:	f000 f9f2 	bl	80064fc <memchr>
 8006118:	2800      	cmp	r0, #0
 800611a:	d038      	beq.n	800618e <_svfiprintf_r+0x1d6>
 800611c:	4b23      	ldr	r3, [pc, #140]	@ (80061ac <_svfiprintf_r+0x1f4>)
 800611e:	2b00      	cmp	r3, #0
 8006120:	d122      	bne.n	8006168 <_svfiprintf_r+0x1b0>
 8006122:	2207      	movs	r2, #7
 8006124:	9b07      	ldr	r3, [sp, #28]
 8006126:	3307      	adds	r3, #7
 8006128:	4393      	bics	r3, r2
 800612a:	3308      	adds	r3, #8
 800612c:	9307      	str	r3, [sp, #28]
 800612e:	6963      	ldr	r3, [r4, #20]
 8006130:	9a04      	ldr	r2, [sp, #16]
 8006132:	189b      	adds	r3, r3, r2
 8006134:	6163      	str	r3, [r4, #20]
 8006136:	e762      	b.n	8005ffe <_svfiprintf_r+0x46>
 8006138:	4343      	muls	r3, r0
 800613a:	0035      	movs	r5, r6
 800613c:	2101      	movs	r1, #1
 800613e:	189b      	adds	r3, r3, r2
 8006140:	e7a4      	b.n	800608c <_svfiprintf_r+0xd4>
 8006142:	2300      	movs	r3, #0
 8006144:	200a      	movs	r0, #10
 8006146:	0019      	movs	r1, r3
 8006148:	3501      	adds	r5, #1
 800614a:	6063      	str	r3, [r4, #4]
 800614c:	782a      	ldrb	r2, [r5, #0]
 800614e:	1c6e      	adds	r6, r5, #1
 8006150:	3a30      	subs	r2, #48	@ 0x30
 8006152:	2a09      	cmp	r2, #9
 8006154:	d903      	bls.n	800615e <_svfiprintf_r+0x1a6>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0c8      	beq.n	80060ec <_svfiprintf_r+0x134>
 800615a:	9109      	str	r1, [sp, #36]	@ 0x24
 800615c:	e7c6      	b.n	80060ec <_svfiprintf_r+0x134>
 800615e:	4341      	muls	r1, r0
 8006160:	0035      	movs	r5, r6
 8006162:	2301      	movs	r3, #1
 8006164:	1889      	adds	r1, r1, r2
 8006166:	e7f1      	b.n	800614c <_svfiprintf_r+0x194>
 8006168:	aa07      	add	r2, sp, #28
 800616a:	9200      	str	r2, [sp, #0]
 800616c:	0021      	movs	r1, r4
 800616e:	003a      	movs	r2, r7
 8006170:	4b0f      	ldr	r3, [pc, #60]	@ (80061b0 <_svfiprintf_r+0x1f8>)
 8006172:	9803      	ldr	r0, [sp, #12]
 8006174:	e000      	b.n	8006178 <_svfiprintf_r+0x1c0>
 8006176:	bf00      	nop
 8006178:	9004      	str	r0, [sp, #16]
 800617a:	9b04      	ldr	r3, [sp, #16]
 800617c:	3301      	adds	r3, #1
 800617e:	d1d6      	bne.n	800612e <_svfiprintf_r+0x176>
 8006180:	89bb      	ldrh	r3, [r7, #12]
 8006182:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006184:	065b      	lsls	r3, r3, #25
 8006186:	d500      	bpl.n	800618a <_svfiprintf_r+0x1d2>
 8006188:	e72c      	b.n	8005fe4 <_svfiprintf_r+0x2c>
 800618a:	b021      	add	sp, #132	@ 0x84
 800618c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800618e:	aa07      	add	r2, sp, #28
 8006190:	9200      	str	r2, [sp, #0]
 8006192:	0021      	movs	r1, r4
 8006194:	003a      	movs	r2, r7
 8006196:	4b06      	ldr	r3, [pc, #24]	@ (80061b0 <_svfiprintf_r+0x1f8>)
 8006198:	9803      	ldr	r0, [sp, #12]
 800619a:	f000 f87b 	bl	8006294 <_printf_i>
 800619e:	e7eb      	b.n	8006178 <_svfiprintf_r+0x1c0>
 80061a0:	080066e4 	.word	0x080066e4
 80061a4:	080066ea 	.word	0x080066ea
 80061a8:	080066ee 	.word	0x080066ee
 80061ac:	00000000 	.word	0x00000000
 80061b0:	08005ef9 	.word	0x08005ef9

080061b4 <_printf_common>:
 80061b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061b6:	0016      	movs	r6, r2
 80061b8:	9301      	str	r3, [sp, #4]
 80061ba:	688a      	ldr	r2, [r1, #8]
 80061bc:	690b      	ldr	r3, [r1, #16]
 80061be:	000c      	movs	r4, r1
 80061c0:	9000      	str	r0, [sp, #0]
 80061c2:	4293      	cmp	r3, r2
 80061c4:	da00      	bge.n	80061c8 <_printf_common+0x14>
 80061c6:	0013      	movs	r3, r2
 80061c8:	0022      	movs	r2, r4
 80061ca:	6033      	str	r3, [r6, #0]
 80061cc:	3243      	adds	r2, #67	@ 0x43
 80061ce:	7812      	ldrb	r2, [r2, #0]
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	d001      	beq.n	80061d8 <_printf_common+0x24>
 80061d4:	3301      	adds	r3, #1
 80061d6:	6033      	str	r3, [r6, #0]
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	069b      	lsls	r3, r3, #26
 80061dc:	d502      	bpl.n	80061e4 <_printf_common+0x30>
 80061de:	6833      	ldr	r3, [r6, #0]
 80061e0:	3302      	adds	r3, #2
 80061e2:	6033      	str	r3, [r6, #0]
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	2306      	movs	r3, #6
 80061e8:	0015      	movs	r5, r2
 80061ea:	401d      	ands	r5, r3
 80061ec:	421a      	tst	r2, r3
 80061ee:	d027      	beq.n	8006240 <_printf_common+0x8c>
 80061f0:	0023      	movs	r3, r4
 80061f2:	3343      	adds	r3, #67	@ 0x43
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	1e5a      	subs	r2, r3, #1
 80061f8:	4193      	sbcs	r3, r2
 80061fa:	6822      	ldr	r2, [r4, #0]
 80061fc:	0692      	lsls	r2, r2, #26
 80061fe:	d430      	bmi.n	8006262 <_printf_common+0xae>
 8006200:	0022      	movs	r2, r4
 8006202:	9901      	ldr	r1, [sp, #4]
 8006204:	9800      	ldr	r0, [sp, #0]
 8006206:	9d08      	ldr	r5, [sp, #32]
 8006208:	3243      	adds	r2, #67	@ 0x43
 800620a:	47a8      	blx	r5
 800620c:	3001      	adds	r0, #1
 800620e:	d025      	beq.n	800625c <_printf_common+0xa8>
 8006210:	2206      	movs	r2, #6
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	2500      	movs	r5, #0
 8006216:	4013      	ands	r3, r2
 8006218:	2b04      	cmp	r3, #4
 800621a:	d105      	bne.n	8006228 <_printf_common+0x74>
 800621c:	6833      	ldr	r3, [r6, #0]
 800621e:	68e5      	ldr	r5, [r4, #12]
 8006220:	1aed      	subs	r5, r5, r3
 8006222:	43eb      	mvns	r3, r5
 8006224:	17db      	asrs	r3, r3, #31
 8006226:	401d      	ands	r5, r3
 8006228:	68a3      	ldr	r3, [r4, #8]
 800622a:	6922      	ldr	r2, [r4, #16]
 800622c:	4293      	cmp	r3, r2
 800622e:	dd01      	ble.n	8006234 <_printf_common+0x80>
 8006230:	1a9b      	subs	r3, r3, r2
 8006232:	18ed      	adds	r5, r5, r3
 8006234:	2600      	movs	r6, #0
 8006236:	42b5      	cmp	r5, r6
 8006238:	d120      	bne.n	800627c <_printf_common+0xc8>
 800623a:	2000      	movs	r0, #0
 800623c:	e010      	b.n	8006260 <_printf_common+0xac>
 800623e:	3501      	adds	r5, #1
 8006240:	68e3      	ldr	r3, [r4, #12]
 8006242:	6832      	ldr	r2, [r6, #0]
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	42ab      	cmp	r3, r5
 8006248:	ddd2      	ble.n	80061f0 <_printf_common+0x3c>
 800624a:	0022      	movs	r2, r4
 800624c:	2301      	movs	r3, #1
 800624e:	9901      	ldr	r1, [sp, #4]
 8006250:	9800      	ldr	r0, [sp, #0]
 8006252:	9f08      	ldr	r7, [sp, #32]
 8006254:	3219      	adds	r2, #25
 8006256:	47b8      	blx	r7
 8006258:	3001      	adds	r0, #1
 800625a:	d1f0      	bne.n	800623e <_printf_common+0x8a>
 800625c:	2001      	movs	r0, #1
 800625e:	4240      	negs	r0, r0
 8006260:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006262:	2030      	movs	r0, #48	@ 0x30
 8006264:	18e1      	adds	r1, r4, r3
 8006266:	3143      	adds	r1, #67	@ 0x43
 8006268:	7008      	strb	r0, [r1, #0]
 800626a:	0021      	movs	r1, r4
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	3145      	adds	r1, #69	@ 0x45
 8006270:	7809      	ldrb	r1, [r1, #0]
 8006272:	18a2      	adds	r2, r4, r2
 8006274:	3243      	adds	r2, #67	@ 0x43
 8006276:	3302      	adds	r3, #2
 8006278:	7011      	strb	r1, [r2, #0]
 800627a:	e7c1      	b.n	8006200 <_printf_common+0x4c>
 800627c:	0022      	movs	r2, r4
 800627e:	2301      	movs	r3, #1
 8006280:	9901      	ldr	r1, [sp, #4]
 8006282:	9800      	ldr	r0, [sp, #0]
 8006284:	9f08      	ldr	r7, [sp, #32]
 8006286:	321a      	adds	r2, #26
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	d0e6      	beq.n	800625c <_printf_common+0xa8>
 800628e:	3601      	adds	r6, #1
 8006290:	e7d1      	b.n	8006236 <_printf_common+0x82>
	...

08006294 <_printf_i>:
 8006294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006296:	b08b      	sub	sp, #44	@ 0x2c
 8006298:	9206      	str	r2, [sp, #24]
 800629a:	000a      	movs	r2, r1
 800629c:	3243      	adds	r2, #67	@ 0x43
 800629e:	9307      	str	r3, [sp, #28]
 80062a0:	9005      	str	r0, [sp, #20]
 80062a2:	9203      	str	r2, [sp, #12]
 80062a4:	7e0a      	ldrb	r2, [r1, #24]
 80062a6:	000c      	movs	r4, r1
 80062a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062aa:	2a78      	cmp	r2, #120	@ 0x78
 80062ac:	d809      	bhi.n	80062c2 <_printf_i+0x2e>
 80062ae:	2a62      	cmp	r2, #98	@ 0x62
 80062b0:	d80b      	bhi.n	80062ca <_printf_i+0x36>
 80062b2:	2a00      	cmp	r2, #0
 80062b4:	d100      	bne.n	80062b8 <_printf_i+0x24>
 80062b6:	e0bc      	b.n	8006432 <_printf_i+0x19e>
 80062b8:	497b      	ldr	r1, [pc, #492]	@ (80064a8 <_printf_i+0x214>)
 80062ba:	9104      	str	r1, [sp, #16]
 80062bc:	2a58      	cmp	r2, #88	@ 0x58
 80062be:	d100      	bne.n	80062c2 <_printf_i+0x2e>
 80062c0:	e090      	b.n	80063e4 <_printf_i+0x150>
 80062c2:	0025      	movs	r5, r4
 80062c4:	3542      	adds	r5, #66	@ 0x42
 80062c6:	702a      	strb	r2, [r5, #0]
 80062c8:	e022      	b.n	8006310 <_printf_i+0x7c>
 80062ca:	0010      	movs	r0, r2
 80062cc:	3863      	subs	r0, #99	@ 0x63
 80062ce:	2815      	cmp	r0, #21
 80062d0:	d8f7      	bhi.n	80062c2 <_printf_i+0x2e>
 80062d2:	f7f9 ff1f 	bl	8000114 <__gnu_thumb1_case_shi>
 80062d6:	0016      	.short	0x0016
 80062d8:	fff6001f 	.word	0xfff6001f
 80062dc:	fff6fff6 	.word	0xfff6fff6
 80062e0:	001ffff6 	.word	0x001ffff6
 80062e4:	fff6fff6 	.word	0xfff6fff6
 80062e8:	fff6fff6 	.word	0xfff6fff6
 80062ec:	003600a1 	.word	0x003600a1
 80062f0:	fff60080 	.word	0xfff60080
 80062f4:	00b2fff6 	.word	0x00b2fff6
 80062f8:	0036fff6 	.word	0x0036fff6
 80062fc:	fff6fff6 	.word	0xfff6fff6
 8006300:	0084      	.short	0x0084
 8006302:	0025      	movs	r5, r4
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	3542      	adds	r5, #66	@ 0x42
 8006308:	1d11      	adds	r1, r2, #4
 800630a:	6019      	str	r1, [r3, #0]
 800630c:	6813      	ldr	r3, [r2, #0]
 800630e:	702b      	strb	r3, [r5, #0]
 8006310:	2301      	movs	r3, #1
 8006312:	e0a0      	b.n	8006456 <_printf_i+0x1c2>
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	6809      	ldr	r1, [r1, #0]
 8006318:	1d02      	adds	r2, r0, #4
 800631a:	060d      	lsls	r5, r1, #24
 800631c:	d50b      	bpl.n	8006336 <_printf_i+0xa2>
 800631e:	6806      	ldr	r6, [r0, #0]
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	2e00      	cmp	r6, #0
 8006324:	da03      	bge.n	800632e <_printf_i+0x9a>
 8006326:	232d      	movs	r3, #45	@ 0x2d
 8006328:	9a03      	ldr	r2, [sp, #12]
 800632a:	4276      	negs	r6, r6
 800632c:	7013      	strb	r3, [r2, #0]
 800632e:	4b5e      	ldr	r3, [pc, #376]	@ (80064a8 <_printf_i+0x214>)
 8006330:	270a      	movs	r7, #10
 8006332:	9304      	str	r3, [sp, #16]
 8006334:	e018      	b.n	8006368 <_printf_i+0xd4>
 8006336:	6806      	ldr	r6, [r0, #0]
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	0649      	lsls	r1, r1, #25
 800633c:	d5f1      	bpl.n	8006322 <_printf_i+0x8e>
 800633e:	b236      	sxth	r6, r6
 8006340:	e7ef      	b.n	8006322 <_printf_i+0x8e>
 8006342:	6808      	ldr	r0, [r1, #0]
 8006344:	6819      	ldr	r1, [r3, #0]
 8006346:	c940      	ldmia	r1!, {r6}
 8006348:	0605      	lsls	r5, r0, #24
 800634a:	d402      	bmi.n	8006352 <_printf_i+0xbe>
 800634c:	0640      	lsls	r0, r0, #25
 800634e:	d500      	bpl.n	8006352 <_printf_i+0xbe>
 8006350:	b2b6      	uxth	r6, r6
 8006352:	6019      	str	r1, [r3, #0]
 8006354:	4b54      	ldr	r3, [pc, #336]	@ (80064a8 <_printf_i+0x214>)
 8006356:	270a      	movs	r7, #10
 8006358:	9304      	str	r3, [sp, #16]
 800635a:	2a6f      	cmp	r2, #111	@ 0x6f
 800635c:	d100      	bne.n	8006360 <_printf_i+0xcc>
 800635e:	3f02      	subs	r7, #2
 8006360:	0023      	movs	r3, r4
 8006362:	2200      	movs	r2, #0
 8006364:	3343      	adds	r3, #67	@ 0x43
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	60a3      	str	r3, [r4, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	db03      	blt.n	8006378 <_printf_i+0xe4>
 8006370:	2104      	movs	r1, #4
 8006372:	6822      	ldr	r2, [r4, #0]
 8006374:	438a      	bics	r2, r1
 8006376:	6022      	str	r2, [r4, #0]
 8006378:	2e00      	cmp	r6, #0
 800637a:	d102      	bne.n	8006382 <_printf_i+0xee>
 800637c:	9d03      	ldr	r5, [sp, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <_printf_i+0x108>
 8006382:	9d03      	ldr	r5, [sp, #12]
 8006384:	0030      	movs	r0, r6
 8006386:	0039      	movs	r1, r7
 8006388:	f7f9 ff54 	bl	8000234 <__aeabi_uidivmod>
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	3d01      	subs	r5, #1
 8006390:	5c5b      	ldrb	r3, [r3, r1]
 8006392:	702b      	strb	r3, [r5, #0]
 8006394:	0033      	movs	r3, r6
 8006396:	0006      	movs	r6, r0
 8006398:	429f      	cmp	r7, r3
 800639a:	d9f3      	bls.n	8006384 <_printf_i+0xf0>
 800639c:	2f08      	cmp	r7, #8
 800639e:	d109      	bne.n	80063b4 <_printf_i+0x120>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	07db      	lsls	r3, r3, #31
 80063a4:	d506      	bpl.n	80063b4 <_printf_i+0x120>
 80063a6:	6862      	ldr	r2, [r4, #4]
 80063a8:	6923      	ldr	r3, [r4, #16]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	dc02      	bgt.n	80063b4 <_printf_i+0x120>
 80063ae:	2330      	movs	r3, #48	@ 0x30
 80063b0:	3d01      	subs	r5, #1
 80063b2:	702b      	strb	r3, [r5, #0]
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	1b5b      	subs	r3, r3, r5
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	9b07      	ldr	r3, [sp, #28]
 80063bc:	0021      	movs	r1, r4
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	9805      	ldr	r0, [sp, #20]
 80063c2:	9b06      	ldr	r3, [sp, #24]
 80063c4:	aa09      	add	r2, sp, #36	@ 0x24
 80063c6:	f7ff fef5 	bl	80061b4 <_printf_common>
 80063ca:	3001      	adds	r0, #1
 80063cc:	d148      	bne.n	8006460 <_printf_i+0x1cc>
 80063ce:	2001      	movs	r0, #1
 80063d0:	4240      	negs	r0, r0
 80063d2:	b00b      	add	sp, #44	@ 0x2c
 80063d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063d6:	2220      	movs	r2, #32
 80063d8:	6809      	ldr	r1, [r1, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	6022      	str	r2, [r4, #0]
 80063de:	2278      	movs	r2, #120	@ 0x78
 80063e0:	4932      	ldr	r1, [pc, #200]	@ (80064ac <_printf_i+0x218>)
 80063e2:	9104      	str	r1, [sp, #16]
 80063e4:	0021      	movs	r1, r4
 80063e6:	3145      	adds	r1, #69	@ 0x45
 80063e8:	700a      	strb	r2, [r1, #0]
 80063ea:	6819      	ldr	r1, [r3, #0]
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	c940      	ldmia	r1!, {r6}
 80063f0:	0610      	lsls	r0, r2, #24
 80063f2:	d402      	bmi.n	80063fa <_printf_i+0x166>
 80063f4:	0650      	lsls	r0, r2, #25
 80063f6:	d500      	bpl.n	80063fa <_printf_i+0x166>
 80063f8:	b2b6      	uxth	r6, r6
 80063fa:	6019      	str	r1, [r3, #0]
 80063fc:	07d3      	lsls	r3, r2, #31
 80063fe:	d502      	bpl.n	8006406 <_printf_i+0x172>
 8006400:	2320      	movs	r3, #32
 8006402:	4313      	orrs	r3, r2
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	2e00      	cmp	r6, #0
 8006408:	d001      	beq.n	800640e <_printf_i+0x17a>
 800640a:	2710      	movs	r7, #16
 800640c:	e7a8      	b.n	8006360 <_printf_i+0xcc>
 800640e:	2220      	movs	r2, #32
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	4393      	bics	r3, r2
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	e7f8      	b.n	800640a <_printf_i+0x176>
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	680d      	ldr	r5, [r1, #0]
 800641c:	1d10      	adds	r0, r2, #4
 800641e:	6949      	ldr	r1, [r1, #20]
 8006420:	6018      	str	r0, [r3, #0]
 8006422:	6813      	ldr	r3, [r2, #0]
 8006424:	062e      	lsls	r6, r5, #24
 8006426:	d501      	bpl.n	800642c <_printf_i+0x198>
 8006428:	6019      	str	r1, [r3, #0]
 800642a:	e002      	b.n	8006432 <_printf_i+0x19e>
 800642c:	066d      	lsls	r5, r5, #25
 800642e:	d5fb      	bpl.n	8006428 <_printf_i+0x194>
 8006430:	8019      	strh	r1, [r3, #0]
 8006432:	2300      	movs	r3, #0
 8006434:	9d03      	ldr	r5, [sp, #12]
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	e7bf      	b.n	80063ba <_printf_i+0x126>
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	1d11      	adds	r1, r2, #4
 800643e:	6019      	str	r1, [r3, #0]
 8006440:	6815      	ldr	r5, [r2, #0]
 8006442:	2100      	movs	r1, #0
 8006444:	0028      	movs	r0, r5
 8006446:	6862      	ldr	r2, [r4, #4]
 8006448:	f000 f858 	bl	80064fc <memchr>
 800644c:	2800      	cmp	r0, #0
 800644e:	d001      	beq.n	8006454 <_printf_i+0x1c0>
 8006450:	1b40      	subs	r0, r0, r5
 8006452:	6060      	str	r0, [r4, #4]
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	6123      	str	r3, [r4, #16]
 8006458:	2300      	movs	r3, #0
 800645a:	9a03      	ldr	r2, [sp, #12]
 800645c:	7013      	strb	r3, [r2, #0]
 800645e:	e7ac      	b.n	80063ba <_printf_i+0x126>
 8006460:	002a      	movs	r2, r5
 8006462:	6923      	ldr	r3, [r4, #16]
 8006464:	9906      	ldr	r1, [sp, #24]
 8006466:	9805      	ldr	r0, [sp, #20]
 8006468:	9d07      	ldr	r5, [sp, #28]
 800646a:	47a8      	blx	r5
 800646c:	3001      	adds	r0, #1
 800646e:	d0ae      	beq.n	80063ce <_printf_i+0x13a>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	079b      	lsls	r3, r3, #30
 8006474:	d415      	bmi.n	80064a2 <_printf_i+0x20e>
 8006476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006478:	68e0      	ldr	r0, [r4, #12]
 800647a:	4298      	cmp	r0, r3
 800647c:	daa9      	bge.n	80063d2 <_printf_i+0x13e>
 800647e:	0018      	movs	r0, r3
 8006480:	e7a7      	b.n	80063d2 <_printf_i+0x13e>
 8006482:	0022      	movs	r2, r4
 8006484:	2301      	movs	r3, #1
 8006486:	9906      	ldr	r1, [sp, #24]
 8006488:	9805      	ldr	r0, [sp, #20]
 800648a:	9e07      	ldr	r6, [sp, #28]
 800648c:	3219      	adds	r2, #25
 800648e:	47b0      	blx	r6
 8006490:	3001      	adds	r0, #1
 8006492:	d09c      	beq.n	80063ce <_printf_i+0x13a>
 8006494:	3501      	adds	r5, #1
 8006496:	68e3      	ldr	r3, [r4, #12]
 8006498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	42ab      	cmp	r3, r5
 800649e:	dcf0      	bgt.n	8006482 <_printf_i+0x1ee>
 80064a0:	e7e9      	b.n	8006476 <_printf_i+0x1e2>
 80064a2:	2500      	movs	r5, #0
 80064a4:	e7f7      	b.n	8006496 <_printf_i+0x202>
 80064a6:	46c0      	nop			@ (mov r8, r8)
 80064a8:	080066f5 	.word	0x080066f5
 80064ac:	08006706 	.word	0x08006706

080064b0 <memmove>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	4288      	cmp	r0, r1
 80064b4:	d806      	bhi.n	80064c4 <memmove+0x14>
 80064b6:	2300      	movs	r3, #0
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d008      	beq.n	80064ce <memmove+0x1e>
 80064bc:	5ccc      	ldrb	r4, [r1, r3]
 80064be:	54c4      	strb	r4, [r0, r3]
 80064c0:	3301      	adds	r3, #1
 80064c2:	e7f9      	b.n	80064b8 <memmove+0x8>
 80064c4:	188b      	adds	r3, r1, r2
 80064c6:	4298      	cmp	r0, r3
 80064c8:	d2f5      	bcs.n	80064b6 <memmove+0x6>
 80064ca:	3a01      	subs	r2, #1
 80064cc:	d200      	bcs.n	80064d0 <memmove+0x20>
 80064ce:	bd10      	pop	{r4, pc}
 80064d0:	5c8b      	ldrb	r3, [r1, r2]
 80064d2:	5483      	strb	r3, [r0, r2]
 80064d4:	e7f9      	b.n	80064ca <memmove+0x1a>
	...

080064d8 <_sbrk_r>:
 80064d8:	2300      	movs	r3, #0
 80064da:	b570      	push	{r4, r5, r6, lr}
 80064dc:	4d06      	ldr	r5, [pc, #24]	@ (80064f8 <_sbrk_r+0x20>)
 80064de:	0004      	movs	r4, r0
 80064e0:	0008      	movs	r0, r1
 80064e2:	602b      	str	r3, [r5, #0]
 80064e4:	f7fb f8b4 	bl	8001650 <_sbrk>
 80064e8:	1c43      	adds	r3, r0, #1
 80064ea:	d103      	bne.n	80064f4 <_sbrk_r+0x1c>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d000      	beq.n	80064f4 <_sbrk_r+0x1c>
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	bd70      	pop	{r4, r5, r6, pc}
 80064f6:	46c0      	nop			@ (mov r8, r8)
 80064f8:	200003f8 	.word	0x200003f8

080064fc <memchr>:
 80064fc:	b2c9      	uxtb	r1, r1
 80064fe:	1882      	adds	r2, r0, r2
 8006500:	4290      	cmp	r0, r2
 8006502:	d101      	bne.n	8006508 <memchr+0xc>
 8006504:	2000      	movs	r0, #0
 8006506:	4770      	bx	lr
 8006508:	7803      	ldrb	r3, [r0, #0]
 800650a:	428b      	cmp	r3, r1
 800650c:	d0fb      	beq.n	8006506 <memchr+0xa>
 800650e:	3001      	adds	r0, #1
 8006510:	e7f6      	b.n	8006500 <memchr+0x4>

08006512 <memcpy>:
 8006512:	2300      	movs	r3, #0
 8006514:	b510      	push	{r4, lr}
 8006516:	429a      	cmp	r2, r3
 8006518:	d100      	bne.n	800651c <memcpy+0xa>
 800651a:	bd10      	pop	{r4, pc}
 800651c:	5ccc      	ldrb	r4, [r1, r3]
 800651e:	54c4      	strb	r4, [r0, r3]
 8006520:	3301      	adds	r3, #1
 8006522:	e7f8      	b.n	8006516 <memcpy+0x4>

08006524 <_realloc_r>:
 8006524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006526:	0006      	movs	r6, r0
 8006528:	000c      	movs	r4, r1
 800652a:	0015      	movs	r5, r2
 800652c:	2900      	cmp	r1, #0
 800652e:	d105      	bne.n	800653c <_realloc_r+0x18>
 8006530:	0011      	movs	r1, r2
 8006532:	f7ff fc51 	bl	8005dd8 <_malloc_r>
 8006536:	0004      	movs	r4, r0
 8006538:	0020      	movs	r0, r4
 800653a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800653c:	2a00      	cmp	r2, #0
 800653e:	d103      	bne.n	8006548 <_realloc_r+0x24>
 8006540:	f7ff fbde 	bl	8005d00 <_free_r>
 8006544:	2400      	movs	r4, #0
 8006546:	e7f7      	b.n	8006538 <_realloc_r+0x14>
 8006548:	f000 f81b 	bl	8006582 <_malloc_usable_size_r>
 800654c:	0007      	movs	r7, r0
 800654e:	4285      	cmp	r5, r0
 8006550:	d802      	bhi.n	8006558 <_realloc_r+0x34>
 8006552:	0843      	lsrs	r3, r0, #1
 8006554:	42ab      	cmp	r3, r5
 8006556:	d3ef      	bcc.n	8006538 <_realloc_r+0x14>
 8006558:	0029      	movs	r1, r5
 800655a:	0030      	movs	r0, r6
 800655c:	f7ff fc3c 	bl	8005dd8 <_malloc_r>
 8006560:	9001      	str	r0, [sp, #4]
 8006562:	2800      	cmp	r0, #0
 8006564:	d0ee      	beq.n	8006544 <_realloc_r+0x20>
 8006566:	002a      	movs	r2, r5
 8006568:	42bd      	cmp	r5, r7
 800656a:	d900      	bls.n	800656e <_realloc_r+0x4a>
 800656c:	003a      	movs	r2, r7
 800656e:	0021      	movs	r1, r4
 8006570:	9801      	ldr	r0, [sp, #4]
 8006572:	f7ff ffce 	bl	8006512 <memcpy>
 8006576:	0021      	movs	r1, r4
 8006578:	0030      	movs	r0, r6
 800657a:	f7ff fbc1 	bl	8005d00 <_free_r>
 800657e:	9c01      	ldr	r4, [sp, #4]
 8006580:	e7da      	b.n	8006538 <_realloc_r+0x14>

08006582 <_malloc_usable_size_r>:
 8006582:	1f0b      	subs	r3, r1, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	1f18      	subs	r0, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	da01      	bge.n	8006590 <_malloc_usable_size_r+0xe>
 800658c:	580b      	ldr	r3, [r1, r0]
 800658e:	18c0      	adds	r0, r0, r3
 8006590:	4770      	bx	lr
	...

08006594 <_init>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	46c0      	nop			@ (mov r8, r8)
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr

080065a0 <_fini>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	46c0      	nop			@ (mov r8, r8)
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr
